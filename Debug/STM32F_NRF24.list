
STM32F_NRF24.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003bb0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000030c  08003c70  08003c70  00013c70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f7c  08003f7c  00020028  2**0
                  CONTENTS
  4 .ARM          00000000  08003f7c  08003f7c  00020028  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003f7c  08003f7c  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f7c  08003f7c  00013f7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003f80  08003f80  00013f80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  08003f84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d4  20000028  08003fac  00020028  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000fc  08003fac  000200fc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007dce  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a8f  00000000  00000000  00027e1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000810  00000000  00000000  000298b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000728  00000000  00000000  0002a0c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000f476  00000000  00000000  0002a7e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009c41  00000000  00000000  00039c5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005910b  00000000  00000000  0004389f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0009c9aa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001b04  00000000  00000000  0009ca00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000028 	.word	0x20000028
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003c58 	.word	0x08003c58

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000002c 	.word	0x2000002c
 8000104:	08003c58 	.word	0x08003c58

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <lcdn1202_init>:
#include "lcd_n1202.h"
#include "lcd_n1202_stm32f.h"
#include "font.h"

void lcdn1202_init()
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
	lcdn1202_gpio_init();
 8000224:	f000 f9fc 	bl	8000620 <lcdn1202_gpio_init>

	//Hard Reset -> By HW using R-C

	HAL_Delay(10);
 8000228:	200a      	movs	r0, #10
 800022a:	f001 fa69 	bl	8001700 <HAL_Delay>

	lcdn1202_sendcom(0xE2);	//Soft Reset
 800022e:	20e2      	movs	r0, #226	; 0xe2
 8000230:	f000 f81e 	bl	8000270 <lcdn1202_sendcom>
	HAL_Delay(1);
 8000234:	2001      	movs	r0, #1
 8000236:	f001 fa63 	bl	8001700 <HAL_Delay>
	lcdn1202_sendcom(0xA4); //Normal Display Mode
 800023a:	20a4      	movs	r0, #164	; 0xa4
 800023c:	f000 f818 	bl	8000270 <lcdn1202_sendcom>
	lcdn1202_sendcom(0x2F);	//Power Control = Max (Booster On, VReg On, VFol On)
 8000240:	202f      	movs	r0, #47	; 0x2f
 8000242:	f000 f815 	bl	8000270 <lcdn1202_sendcom>

	lcdn1202_sendcom(0xA0); //Segment Driver Direction = Normal (lines start at left)
 8000246:	20a0      	movs	r0, #160	; 0xa0
 8000248:	f000 f812 	bl	8000270 <lcdn1202_sendcom>
	lcdn1202_sendcom(0xC0); //Common Driver Direction = Normal
 800024c:	20c0      	movs	r0, #192	; 0xc0
 800024e:	f000 f80f 	bl	8000270 <lcdn1202_sendcom>
	lcdn1202_sendcom(0x80|16); //Set Contrast to Default
 8000252:	2090      	movs	r0, #144	; 0x90
 8000254:	f000 f80c 	bl	8000270 <lcdn1202_sendcom>

	lcdn1202_sendcom(0xAF);	//Display On
 8000258:	20af      	movs	r0, #175	; 0xaf
 800025a:	f000 f809 	bl	8000270 <lcdn1202_sendcom>

	LCD_BL_OFF(); //Backlight Off
 800025e:	f000 f9d7 	bl	8000610 <LCD_BL_OFF>
	LCD_clear();  //Clear pixel memory
 8000262:	f000 f98f 	bl	8000584 <LCD_clear>
	LCD_BL_ON();  //Backlight On
 8000266:	f000 f9cc 	bl	8000602 <LCD_BL_ON>
}
 800026a:	46c0      	nop			; (mov r8, r8)
 800026c:	46bd      	mov	sp, r7
 800026e:	bd80      	pop	{r7, pc}

08000270 <lcdn1202_sendcom>:

void lcdn1202_sendcom(unsigned char ssd1306com)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b082      	sub	sp, #8
 8000274:	af00      	add	r7, sp, #0
 8000276:	0002      	movs	r2, r0
 8000278:	1dfb      	adds	r3, r7, #7
 800027a:	701a      	strb	r2, [r3, #0]
	lcdn1202_9bsend(0,ssd1306com);
 800027c:	1dfb      	adds	r3, r7, #7
 800027e:	781b      	ldrb	r3, [r3, #0]
 8000280:	0019      	movs	r1, r3
 8000282:	2000      	movs	r0, #0
 8000284:	f000 fa06 	bl	8000694 <lcdn1202_9bsend>
}
 8000288:	46c0      	nop			; (mov r8, r8)
 800028a:	46bd      	mov	sp, r7
 800028c:	b002      	add	sp, #8
 800028e:	bd80      	pop	{r7, pc}

08000290 <lcdn1202_senddat>:

void lcdn1202_senddat(unsigned char ssd1306dat)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b082      	sub	sp, #8
 8000294:	af00      	add	r7, sp, #0
 8000296:	0002      	movs	r2, r0
 8000298:	1dfb      	adds	r3, r7, #7
 800029a:	701a      	strb	r2, [r3, #0]
	lcdn1202_9bsend(1,ssd1306dat);
 800029c:	1dfb      	adds	r3, r7, #7
 800029e:	781b      	ldrb	r3, [r3, #0]
 80002a0:	0019      	movs	r1, r3
 80002a2:	2001      	movs	r0, #1
 80002a4:	f000 f9f6 	bl	8000694 <lcdn1202_9bsend>
}
 80002a8:	46c0      	nop			; (mov r8, r8)
 80002aa:	46bd      	mov	sp, r7
 80002ac:	b002      	add	sp, #8
 80002ae:	bd80      	pop	{r7, pc}

080002b0 <lcdn1202_setpos>:

void lcdn1202_setpos(unsigned char row, unsigned char col)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b082      	sub	sp, #8
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	0002      	movs	r2, r0
 80002b8:	1dfb      	adds	r3, r7, #7
 80002ba:	701a      	strb	r2, [r3, #0]
 80002bc:	1dbb      	adds	r3, r7, #6
 80002be:	1c0a      	adds	r2, r1, #0
 80002c0:	701a      	strb	r2, [r3, #0]
	lcdn1202_sendcom(0xB0|(row&0x0F)); //Set page of row
 80002c2:	1dfb      	adds	r3, r7, #7
 80002c4:	781b      	ldrb	r3, [r3, #0]
 80002c6:	b25b      	sxtb	r3, r3
 80002c8:	220f      	movs	r2, #15
 80002ca:	4013      	ands	r3, r2
 80002cc:	b25b      	sxtb	r3, r3
 80002ce:	2250      	movs	r2, #80	; 0x50
 80002d0:	4252      	negs	r2, r2
 80002d2:	4313      	orrs	r3, r2
 80002d4:	b25b      	sxtb	r3, r3
 80002d6:	b2db      	uxtb	r3, r3
 80002d8:	0018      	movs	r0, r3
 80002da:	f7ff ffc9 	bl	8000270 <lcdn1202_sendcom>
	lcdn1202_sendcom(0x00|(col&0x0F)); //Set lower nibble of Column
 80002de:	1dbb      	adds	r3, r7, #6
 80002e0:	781b      	ldrb	r3, [r3, #0]
 80002e2:	220f      	movs	r2, #15
 80002e4:	4013      	ands	r3, r2
 80002e6:	b2db      	uxtb	r3, r3
 80002e8:	0018      	movs	r0, r3
 80002ea:	f7ff ffc1 	bl	8000270 <lcdn1202_sendcom>
	lcdn1202_sendcom(0x10|((col>>4)&0x0F)); //Set upper nibble of Column
 80002ee:	1dbb      	adds	r3, r7, #6
 80002f0:	781b      	ldrb	r3, [r3, #0]
 80002f2:	091b      	lsrs	r3, r3, #4
 80002f4:	b2db      	uxtb	r3, r3
 80002f6:	b25b      	sxtb	r3, r3
 80002f8:	2210      	movs	r2, #16
 80002fa:	4313      	orrs	r3, r2
 80002fc:	b25b      	sxtb	r3, r3
 80002fe:	b2db      	uxtb	r3, r3
 8000300:	0018      	movs	r0, r3
 8000302:	f7ff ffb5 	bl	8000270 <lcdn1202_sendcom>
}
 8000306:	46c0      	nop			; (mov r8, r8)
 8000308:	46bd      	mov	sp, r7
 800030a:	b002      	add	sp, #8
 800030c:	bd80      	pop	{r7, pc}

0800030e <lcdn1202_clear>:

void lcdn1202_clear()
{
 800030e:	b580      	push	{r7, lr}
 8000310:	b082      	sub	sp, #8
 8000312:	af00      	add	r7, sp, #0
	unsigned char col,row;
	lcdn1202_setpos(0,0);
 8000314:	2100      	movs	r1, #0
 8000316:	2000      	movs	r0, #0
 8000318:	f7ff ffca 	bl	80002b0 <lcdn1202_setpos>
  	for(row=0;row<LCDN1202_ROW;row++)	//scan rows (pages)
 800031c:	1dbb      	adds	r3, r7, #6
 800031e:	2200      	movs	r2, #0
 8000320:	701a      	strb	r2, [r3, #0]
 8000322:	e014      	b.n	800034e <lcdn1202_clear+0x40>
  	   {
      		for(col=0;col<LCDN1202_COL;col++)	//scan columns
 8000324:	1dfb      	adds	r3, r7, #7
 8000326:	2200      	movs	r2, #0
 8000328:	701a      	strb	r2, [r3, #0]
 800032a:	e007      	b.n	800033c <lcdn1202_clear+0x2e>
      		   {
        		lcdn1202_senddat(0);	//send 0 to the all pixel
 800032c:	2000      	movs	r0, #0
 800032e:	f7ff ffaf 	bl	8000290 <lcdn1202_senddat>
      		for(col=0;col<LCDN1202_COL;col++)	//scan columns
 8000332:	1dfb      	adds	r3, r7, #7
 8000334:	781a      	ldrb	r2, [r3, #0]
 8000336:	1dfb      	adds	r3, r7, #7
 8000338:	3201      	adds	r2, #1
 800033a:	701a      	strb	r2, [r3, #0]
 800033c:	1dfb      	adds	r3, r7, #7
 800033e:	781b      	ldrb	r3, [r3, #0]
 8000340:	2b5f      	cmp	r3, #95	; 0x5f
 8000342:	d9f3      	bls.n	800032c <lcdn1202_clear+0x1e>
  	for(row=0;row<LCDN1202_ROW;row++)	//scan rows (pages)
 8000344:	1dbb      	adds	r3, r7, #6
 8000346:	781a      	ldrb	r2, [r3, #0]
 8000348:	1dbb      	adds	r3, r7, #6
 800034a:	3201      	adds	r2, #1
 800034c:	701a      	strb	r2, [r3, #0]
 800034e:	1dbb      	adds	r3, r7, #6
 8000350:	781b      	ldrb	r3, [r3, #0]
 8000352:	2b08      	cmp	r3, #8
 8000354:	d9e6      	bls.n	8000324 <lcdn1202_clear+0x16>
      		   }
  	   }
}
 8000356:	46c0      	nop			; (mov r8, r8)
 8000358:	46c0      	nop			; (mov r8, r8)
 800035a:	46bd      	mov	sp, r7
 800035c:	b002      	add	sp, #8
 800035e:	bd80      	pop	{r7, pc}

08000360 <LCD_drawchar>:
{
	lcdn1202_senddat(dbyte);
}

void LCD_drawchar(unsigned char chr, unsigned char chrrow, unsigned char chrcol)
{
 8000360:	b590      	push	{r4, r7, lr}
 8000362:	b087      	sub	sp, #28
 8000364:	af00      	add	r7, sp, #0
 8000366:	0004      	movs	r4, r0
 8000368:	0008      	movs	r0, r1
 800036a:	0011      	movs	r1, r2
 800036c:	1dfb      	adds	r3, r7, #7
 800036e:	1c22      	adds	r2, r4, #0
 8000370:	701a      	strb	r2, [r3, #0]
 8000372:	1dbb      	adds	r3, r7, #6
 8000374:	1c02      	adds	r2, r0, #0
 8000376:	701a      	strb	r2, [r3, #0]
 8000378:	1d7b      	adds	r3, r7, #5
 800037a:	1c0a      	adds	r2, r1, #0
 800037c:	701a      	strb	r2, [r3, #0]
	unsigned char ci,fchar;
	unsigned int chridx;

	lcdn1202_setpos(chrrow,chrcol);
 800037e:	1d7b      	adds	r3, r7, #5
 8000380:	781a      	ldrb	r2, [r3, #0]
 8000382:	1dbb      	adds	r3, r7, #6
 8000384:	781b      	ldrb	r3, [r3, #0]
 8000386:	0011      	movs	r1, r2
 8000388:	0018      	movs	r0, r3
 800038a:	f7ff ff91 	bl	80002b0 <lcdn1202_setpos>

	if((chr>31)&&(chr<128))	//Alphanumeric & Punctuation
 800038e:	1dfb      	adds	r3, r7, #7
 8000390:	781b      	ldrb	r3, [r3, #0]
 8000392:	2b1f      	cmp	r3, #31
 8000394:	d92e      	bls.n	80003f4 <LCD_drawchar+0x94>
 8000396:	1dfb      	adds	r3, r7, #7
 8000398:	781b      	ldrb	r3, [r3, #0]
 800039a:	b25b      	sxtb	r3, r3
 800039c:	2b00      	cmp	r3, #0
 800039e:	db29      	blt.n	80003f4 <LCD_drawchar+0x94>
	  {
	    lcdn1202_senddat(0x00);
 80003a0:	2000      	movs	r0, #0
 80003a2:	f7ff ff75 	bl	8000290 <lcdn1202_senddat>
            chridx=(chr-32)*5;
 80003a6:	1dfb      	adds	r3, r7, #7
 80003a8:	781b      	ldrb	r3, [r3, #0]
 80003aa:	3b20      	subs	r3, #32
 80003ac:	001a      	movs	r2, r3
 80003ae:	0013      	movs	r3, r2
 80003b0:	009b      	lsls	r3, r3, #2
 80003b2:	189b      	adds	r3, r3, r2
 80003b4:	613b      	str	r3, [r7, #16]
            for(ci=0;ci<5;ci++)
 80003b6:	2317      	movs	r3, #23
 80003b8:	18fb      	adds	r3, r7, r3
 80003ba:	2200      	movs	r2, #0
 80003bc:	701a      	strb	r2, [r3, #0]
 80003be:	e013      	b.n	80003e8 <LCD_drawchar+0x88>
		{
		   //fchar = font_read(chridx+ci); //get Character Pattern
		   fchar = font_arr[chridx+ci]; //get Character Pattern from Font Array
 80003c0:	2417      	movs	r4, #23
 80003c2:	193b      	adds	r3, r7, r4
 80003c4:	781a      	ldrb	r2, [r3, #0]
 80003c6:	693b      	ldr	r3, [r7, #16]
 80003c8:	18d2      	adds	r2, r2, r3
 80003ca:	200f      	movs	r0, #15
 80003cc:	183b      	adds	r3, r7, r0
 80003ce:	4923      	ldr	r1, [pc, #140]	; (800045c <LCD_drawchar+0xfc>)
 80003d0:	5c8a      	ldrb	r2, [r1, r2]
 80003d2:	701a      	strb	r2, [r3, #0]
		   lcdn1202_senddat(fchar);
 80003d4:	183b      	adds	r3, r7, r0
 80003d6:	781b      	ldrb	r3, [r3, #0]
 80003d8:	0018      	movs	r0, r3
 80003da:	f7ff ff59 	bl	8000290 <lcdn1202_senddat>
            for(ci=0;ci<5;ci++)
 80003de:	193b      	adds	r3, r7, r4
 80003e0:	781a      	ldrb	r2, [r3, #0]
 80003e2:	193b      	adds	r3, r7, r4
 80003e4:	3201      	adds	r2, #1
 80003e6:	701a      	strb	r2, [r3, #0]
 80003e8:	2317      	movs	r3, #23
 80003ea:	18fb      	adds	r3, r7, r3
 80003ec:	781b      	ldrb	r3, [r3, #0]
 80003ee:	2b04      	cmp	r3, #4
 80003f0:	d9e6      	bls.n	80003c0 <LCD_drawchar+0x60>
	if((chr>31)&&(chr<128))	//Alphanumeric & Punctuation
 80003f2:	e02f      	b.n	8000454 <LCD_drawchar+0xf4>
		}
          }
 	else if((chr>127)&&(chr<148))	//Frame & Arrow
 80003f4:	1dfb      	adds	r3, r7, #7
 80003f6:	781b      	ldrb	r3, [r3, #0]
 80003f8:	b25b      	sxtb	r3, r3
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	da2a      	bge.n	8000454 <LCD_drawchar+0xf4>
 80003fe:	1dfb      	adds	r3, r7, #7
 8000400:	781b      	ldrb	r3, [r3, #0]
 8000402:	2b93      	cmp	r3, #147	; 0x93
 8000404:	d826      	bhi.n	8000454 <LCD_drawchar+0xf4>
	  {
	    chridx=(chr-128)*8;
 8000406:	1dfb      	adds	r3, r7, #7
 8000408:	781b      	ldrb	r3, [r3, #0]
 800040a:	3b80      	subs	r3, #128	; 0x80
 800040c:	00db      	lsls	r3, r3, #3
 800040e:	613b      	str	r3, [r7, #16]
            for(ci=0;ci<8;ci++)
 8000410:	2317      	movs	r3, #23
 8000412:	18fb      	adds	r3, r7, r3
 8000414:	2200      	movs	r2, #0
 8000416:	701a      	strb	r2, [r3, #0]
 8000418:	e016      	b.n	8000448 <LCD_drawchar+0xe8>
		{
 		   //fchar = font_read(chridx+480+ci); //get Character Pattern
 		   fchar = font_arr[chridx+480+ci]; //get Character Pattern from Font Array
 800041a:	2417      	movs	r4, #23
 800041c:	193b      	adds	r3, r7, r4
 800041e:	781a      	ldrb	r2, [r3, #0]
 8000420:	693b      	ldr	r3, [r7, #16]
 8000422:	18d3      	adds	r3, r2, r3
 8000424:	33e1      	adds	r3, #225	; 0xe1
 8000426:	33ff      	adds	r3, #255	; 0xff
 8000428:	001a      	movs	r2, r3
 800042a:	200f      	movs	r0, #15
 800042c:	183b      	adds	r3, r7, r0
 800042e:	490b      	ldr	r1, [pc, #44]	; (800045c <LCD_drawchar+0xfc>)
 8000430:	5c8a      	ldrb	r2, [r1, r2]
 8000432:	701a      	strb	r2, [r3, #0]
		   lcdn1202_senddat(fchar);
 8000434:	183b      	adds	r3, r7, r0
 8000436:	781b      	ldrb	r3, [r3, #0]
 8000438:	0018      	movs	r0, r3
 800043a:	f7ff ff29 	bl	8000290 <lcdn1202_senddat>
            for(ci=0;ci<8;ci++)
 800043e:	193b      	adds	r3, r7, r4
 8000440:	781a      	ldrb	r2, [r3, #0]
 8000442:	193b      	adds	r3, r7, r4
 8000444:	3201      	adds	r2, #1
 8000446:	701a      	strb	r2, [r3, #0]
 8000448:	2317      	movs	r3, #23
 800044a:	18fb      	adds	r3, r7, r3
 800044c:	781b      	ldrb	r3, [r3, #0]
 800044e:	2b07      	cmp	r3, #7
 8000450:	d9e3      	bls.n	800041a <LCD_drawchar+0xba>
		}
	  }
	else{}
}
 8000452:	e7ff      	b.n	8000454 <LCD_drawchar+0xf4>
 8000454:	46c0      	nop			; (mov r8, r8)
 8000456:	46bd      	mov	sp, r7
 8000458:	b007      	add	sp, #28
 800045a:	bd90      	pop	{r4, r7, pc}
 800045c:	08003cec 	.word	0x08003cec

08000460 <LCD_drawtext>:

void LCD_drawtext(char *text, unsigned char txtrow, unsigned char txtcol)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b084      	sub	sp, #16
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
 8000468:	0008      	movs	r0, r1
 800046a:	0011      	movs	r1, r2
 800046c:	1cfb      	adds	r3, r7, #3
 800046e:	1c02      	adds	r2, r0, #0
 8000470:	701a      	strb	r2, [r3, #0]
 8000472:	1cbb      	adds	r3, r7, #2
 8000474:	1c0a      	adds	r2, r1, #0
 8000476:	701a      	strb	r2, [r3, #0]
	unsigned int stridx = 0;
 8000478:	2300      	movs	r3, #0
 800047a:	60fb      	str	r3, [r7, #12]

	while(text[stridx] != 0) //scan characters in string
 800047c:	e013      	b.n	80004a6 <LCD_drawtext+0x46>
	  {
		LCD_drawchar(text[stridx],txtrow,txtcol+(8*stridx)); //print each character
 800047e:	687a      	ldr	r2, [r7, #4]
 8000480:	68fb      	ldr	r3, [r7, #12]
 8000482:	18d3      	adds	r3, r2, r3
 8000484:	7818      	ldrb	r0, [r3, #0]
 8000486:	68fb      	ldr	r3, [r7, #12]
 8000488:	b2db      	uxtb	r3, r3
 800048a:	00db      	lsls	r3, r3, #3
 800048c:	b2da      	uxtb	r2, r3
 800048e:	1cbb      	adds	r3, r7, #2
 8000490:	781b      	ldrb	r3, [r3, #0]
 8000492:	18d3      	adds	r3, r2, r3
 8000494:	b2da      	uxtb	r2, r3
 8000496:	1cfb      	adds	r3, r7, #3
 8000498:	781b      	ldrb	r3, [r3, #0]
 800049a:	0019      	movs	r1, r3
 800049c:	f7ff ff60 	bl	8000360 <LCD_drawchar>
		stridx++;
 80004a0:	68fb      	ldr	r3, [r7, #12]
 80004a2:	3301      	adds	r3, #1
 80004a4:	60fb      	str	r3, [r7, #12]
	while(text[stridx] != 0) //scan characters in string
 80004a6:	687a      	ldr	r2, [r7, #4]
 80004a8:	68fb      	ldr	r3, [r7, #12]
 80004aa:	18d3      	adds	r3, r2, r3
 80004ac:	781b      	ldrb	r3, [r3, #0]
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d1e5      	bne.n	800047e <LCD_drawtext+0x1e>
	  }
}
 80004b2:	46c0      	nop			; (mov r8, r8)
 80004b4:	46c0      	nop			; (mov r8, r8)
 80004b6:	46bd      	mov	sp, r7
 80004b8:	b004      	add	sp, #16
 80004ba:	bd80      	pop	{r7, pc}

080004bc <LCD_drawint>:

void LCD_drawint(unsigned int num, unsigned char numrow, unsigned char numcol)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b088      	sub	sp, #32
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]
 80004c4:	0008      	movs	r0, r1
 80004c6:	0011      	movs	r1, r2
 80004c8:	1cfb      	adds	r3, r7, #3
 80004ca:	1c02      	adds	r2, r0, #0
 80004cc:	701a      	strb	r2, [r3, #0]
 80004ce:	1cbb      	adds	r3, r7, #2
 80004d0:	1c0a      	adds	r2, r1, #0
 80004d2:	701a      	strb	r2, [r3, #0]
	char ibuff[11]; //MAX : 5 DIGIT : 65535

	unsigned char ndigit=0,nd;
 80004d4:	231f      	movs	r3, #31
 80004d6:	18fb      	adds	r3, r7, r3
 80004d8:	2200      	movs	r2, #0
 80004da:	701a      	strb	r2, [r3, #0]
	unsigned int numb; //must unsigned, so max. number can be 65535
			   //if set to signed, max. number only 55536

	numb = num;
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	61bb      	str	r3, [r7, #24]
	while(numb!=0)
 80004e0:	e00c      	b.n	80004fc <LCD_drawint+0x40>
	  {
	  	ndigit++;
 80004e2:	211f      	movs	r1, #31
 80004e4:	187b      	adds	r3, r7, r1
 80004e6:	781a      	ldrb	r2, [r3, #0]
 80004e8:	187b      	adds	r3, r7, r1
 80004ea:	3201      	adds	r2, #1
 80004ec:	701a      	strb	r2, [r3, #0]
		numb /= 10; //count decimal digit
 80004ee:	69bb      	ldr	r3, [r7, #24]
 80004f0:	210a      	movs	r1, #10
 80004f2:	0018      	movs	r0, r3
 80004f4:	f7ff fe08 	bl	8000108 <__udivsi3>
 80004f8:	0003      	movs	r3, r0
 80004fa:	61bb      	str	r3, [r7, #24]
	while(numb!=0)
 80004fc:	69bb      	ldr	r3, [r7, #24]
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d1ef      	bne.n	80004e2 <LCD_drawint+0x26>
	  }
	for(nd=0;nd<ndigit;nd++)
 8000502:	231e      	movs	r3, #30
 8000504:	18fb      	adds	r3, r7, r3
 8000506:	2200      	movs	r2, #0
 8000508:	701a      	strb	r2, [r3, #0]
 800050a:	e021      	b.n	8000550 <LCD_drawint+0x94>
	  {
		numb = num%10;
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	210a      	movs	r1, #10
 8000510:	0018      	movs	r0, r3
 8000512:	f7ff fe7f 	bl	8000214 <__aeabi_uidivmod>
 8000516:	000b      	movs	r3, r1
 8000518:	61bb      	str	r3, [r7, #24]
		num = num/10;
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	210a      	movs	r1, #10
 800051e:	0018      	movs	r0, r3
 8000520:	f7ff fdf2 	bl	8000108 <__udivsi3>
 8000524:	0003      	movs	r3, r0
 8000526:	607b      	str	r3, [r7, #4]
		ibuff[ndigit-(nd+1)] = numb + '0'; //start from last_index-1
 8000528:	69bb      	ldr	r3, [r7, #24]
 800052a:	b2da      	uxtb	r2, r3
 800052c:	231f      	movs	r3, #31
 800052e:	18fb      	adds	r3, r7, r3
 8000530:	7819      	ldrb	r1, [r3, #0]
 8000532:	201e      	movs	r0, #30
 8000534:	183b      	adds	r3, r7, r0
 8000536:	781b      	ldrb	r3, [r3, #0]
 8000538:	3301      	adds	r3, #1
 800053a:	1acb      	subs	r3, r1, r3
 800053c:	3230      	adds	r2, #48	; 0x30
 800053e:	b2d1      	uxtb	r1, r2
 8000540:	220c      	movs	r2, #12
 8000542:	18ba      	adds	r2, r7, r2
 8000544:	54d1      	strb	r1, [r2, r3]
	for(nd=0;nd<ndigit;nd++)
 8000546:	183b      	adds	r3, r7, r0
 8000548:	781a      	ldrb	r2, [r3, #0]
 800054a:	183b      	adds	r3, r7, r0
 800054c:	3201      	adds	r2, #1
 800054e:	701a      	strb	r2, [r3, #0]
 8000550:	231e      	movs	r3, #30
 8000552:	18fa      	adds	r2, r7, r3
 8000554:	211f      	movs	r1, #31
 8000556:	187b      	adds	r3, r7, r1
 8000558:	7812      	ldrb	r2, [r2, #0]
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	429a      	cmp	r2, r3
 800055e:	d3d5      	bcc.n	800050c <LCD_drawint+0x50>
	  }
	ibuff[ndigit] = '\0'; //last character is null
 8000560:	187b      	adds	r3, r7, r1
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	200c      	movs	r0, #12
 8000566:	183a      	adds	r2, r7, r0
 8000568:	2100      	movs	r1, #0
 800056a:	54d1      	strb	r1, [r2, r3]

	LCD_drawtext(ibuff,numrow,numcol);
 800056c:	1cbb      	adds	r3, r7, #2
 800056e:	781a      	ldrb	r2, [r3, #0]
 8000570:	1cfb      	adds	r3, r7, #3
 8000572:	7819      	ldrb	r1, [r3, #0]
 8000574:	183b      	adds	r3, r7, r0
 8000576:	0018      	movs	r0, r3
 8000578:	f7ff ff72 	bl	8000460 <LCD_drawtext>
}
 800057c:	46c0      	nop			; (mov r8, r8)
 800057e:	46bd      	mov	sp, r7
 8000580:	b008      	add	sp, #32
 8000582:	bd80      	pop	{r7, pc}

08000584 <LCD_clear>:

void LCD_clear()
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
	lcdn1202_sendcom(0xAE);  //Set Display Off
 8000588:	20ae      	movs	r0, #174	; 0xae
 800058a:	f7ff fe71 	bl	8000270 <lcdn1202_sendcom>
	lcdn1202_clear(); //Clear Display
 800058e:	f7ff febe 	bl	800030e <lcdn1202_clear>
	lcdn1202_sendcom(0xAF); //Set Display On
 8000592:	20af      	movs	r0, #175	; 0xaf
 8000594:	f7ff fe6c 	bl	8000270 <lcdn1202_sendcom>
}
 8000598:	46c0      	nop			; (mov r8, r8)
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}

0800059e <LCD_clearblock>:

void LCD_clearblock(unsigned char row, unsigned char col_start, unsigned char col_fin)
{
 800059e:	b590      	push	{r4, r7, lr}
 80005a0:	b085      	sub	sp, #20
 80005a2:	af00      	add	r7, sp, #0
 80005a4:	0004      	movs	r4, r0
 80005a6:	0008      	movs	r0, r1
 80005a8:	0011      	movs	r1, r2
 80005aa:	1dfb      	adds	r3, r7, #7
 80005ac:	1c22      	adds	r2, r4, #0
 80005ae:	701a      	strb	r2, [r3, #0]
 80005b0:	1dbb      	adds	r3, r7, #6
 80005b2:	1c02      	adds	r2, r0, #0
 80005b4:	701a      	strb	r2, [r3, #0]
 80005b6:	1d7b      	adds	r3, r7, #5
 80005b8:	1c0a      	adds	r2, r1, #0
 80005ba:	701a      	strb	r2, [r3, #0]
	unsigned char col;

	lcdn1202_setpos(row,col_start);
 80005bc:	1dbb      	adds	r3, r7, #6
 80005be:	781a      	ldrb	r2, [r3, #0]
 80005c0:	1dfb      	adds	r3, r7, #7
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	0011      	movs	r1, r2
 80005c6:	0018      	movs	r0, r3
 80005c8:	f7ff fe72 	bl	80002b0 <lcdn1202_setpos>
	for(col=col_start;col<=col_fin;col++) //scan specific columns
 80005cc:	230f      	movs	r3, #15
 80005ce:	18fb      	adds	r3, r7, r3
 80005d0:	1dba      	adds	r2, r7, #6
 80005d2:	7812      	ldrb	r2, [r2, #0]
 80005d4:	701a      	strb	r2, [r3, #0]
 80005d6:	e008      	b.n	80005ea <LCD_clearblock+0x4c>
	   {
		lcdn1202_senddat(0);	//send 0 to the all pixel
 80005d8:	2000      	movs	r0, #0
 80005da:	f7ff fe59 	bl	8000290 <lcdn1202_senddat>
	for(col=col_start;col<=col_fin;col++) //scan specific columns
 80005de:	210f      	movs	r1, #15
 80005e0:	187b      	adds	r3, r7, r1
 80005e2:	781a      	ldrb	r2, [r3, #0]
 80005e4:	187b      	adds	r3, r7, r1
 80005e6:	3201      	adds	r2, #1
 80005e8:	701a      	strb	r2, [r3, #0]
 80005ea:	230f      	movs	r3, #15
 80005ec:	18fa      	adds	r2, r7, r3
 80005ee:	1d7b      	adds	r3, r7, #5
 80005f0:	7812      	ldrb	r2, [r2, #0]
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	429a      	cmp	r2, r3
 80005f6:	d9ef      	bls.n	80005d8 <LCD_clearblock+0x3a>
	   }
}
 80005f8:	46c0      	nop			; (mov r8, r8)
 80005fa:	46c0      	nop			; (mov r8, r8)
 80005fc:	46bd      	mov	sp, r7
 80005fe:	b005      	add	sp, #20
 8000600:	bd90      	pop	{r4, r7, pc}

08000602 <LCD_BL_ON>:
{
	lcdn1202_sendcom(0xA7);	//White Pixel in Black Background
}

void LCD_BL_ON()
{
 8000602:	b580      	push	{r7, lr}
 8000604:	af00      	add	r7, sp, #0
	lcdn1202_blon();
 8000606:	f000 f8b4 	bl	8000772 <lcdn1202_blon>
}
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}

08000610 <LCD_BL_OFF>:

void LCD_BL_OFF()
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
	lcdn1202_bloff();
 8000614:	f000 f8b9 	bl	800078a <lcdn1202_bloff>
}
 8000618:	46c0      	nop			; (mov r8, r8)
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
	...

08000620 <lcdn1202_gpio_init>:
#include "main.h"
#include "lcd_n1202_stm32f.h"

void lcdn1202_gpio_init()
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b086      	sub	sp, #24
 8000624:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000626:	1d3b      	adds	r3, r7, #4
 8000628:	0018      	movs	r0, r3
 800062a:	2314      	movs	r3, #20
 800062c:	001a      	movs	r2, r3
 800062e:	2100      	movs	r1, #0
 8000630:	f003 fb0a 	bl	8003c48 <memset>

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000634:	4b16      	ldr	r3, [pc, #88]	; (8000690 <lcdn1202_gpio_init+0x70>)
 8000636:	695a      	ldr	r2, [r3, #20]
 8000638:	4b15      	ldr	r3, [pc, #84]	; (8000690 <lcdn1202_gpio_init+0x70>)
 800063a:	2180      	movs	r1, #128	; 0x80
 800063c:	0289      	lsls	r1, r1, #10
 800063e:	430a      	orrs	r2, r1
 8000640:	615a      	str	r2, [r3, #20]
 8000642:	4b13      	ldr	r3, [pc, #76]	; (8000690 <lcdn1202_gpio_init+0x70>)
 8000644:	695a      	ldr	r2, [r3, #20]
 8000646:	2380      	movs	r3, #128	; 0x80
 8000648:	029b      	lsls	r3, r3, #10
 800064a:	4013      	ands	r3, r2
 800064c:	603b      	str	r3, [r7, #0]
 800064e:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LCDP, LCDBL|LCDDAT|LCDCLK, GPIO_PIN_RESET);
 8000650:	23e0      	movs	r3, #224	; 0xe0
 8000652:	0099      	lsls	r1, r3, #2
 8000654:	2390      	movs	r3, #144	; 0x90
 8000656:	05db      	lsls	r3, r3, #23
 8000658:	2200      	movs	r2, #0
 800065a:	0018      	movs	r0, r3
 800065c:	f001 ff65 	bl	800252a <HAL_GPIO_WritePin>

	/*Configure GPIO pins : PA7 PA8 PA9 */
	GPIO_InitStruct.Pin = LCDBL|LCDDAT|LCDCLK;
 8000660:	1d3b      	adds	r3, r7, #4
 8000662:	22e0      	movs	r2, #224	; 0xe0
 8000664:	0092      	lsls	r2, r2, #2
 8000666:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000668:	1d3b      	adds	r3, r7, #4
 800066a:	2201      	movs	r2, #1
 800066c:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066e:	1d3b      	adds	r3, r7, #4
 8000670:	2200      	movs	r2, #0
 8000672:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000674:	1d3b      	adds	r3, r7, #4
 8000676:	2200      	movs	r2, #0
 8000678:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(LCDP, &GPIO_InitStruct);
 800067a:	1d3a      	adds	r2, r7, #4
 800067c:	2390      	movs	r3, #144	; 0x90
 800067e:	05db      	lsls	r3, r3, #23
 8000680:	0011      	movs	r1, r2
 8000682:	0018      	movs	r0, r3
 8000684:	f001 fdc4 	bl	8002210 <HAL_GPIO_Init>
}
 8000688:	46c0      	nop			; (mov r8, r8)
 800068a:	46bd      	mov	sp, r7
 800068c:	b006      	add	sp, #24
 800068e:	bd80      	pop	{r7, pc}
 8000690:	40021000 	.word	0x40021000

08000694 <lcdn1202_9bsend>:

void lcdn1202_9bsend(unsigned char cdsign, unsigned char comdat)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b084      	sub	sp, #16
 8000698:	af00      	add	r7, sp, #0
 800069a:	0002      	movs	r2, r0
 800069c:	1dfb      	adds	r3, r7, #7
 800069e:	701a      	strb	r2, [r3, #0]
 80006a0:	1dbb      	adds	r3, r7, #6
 80006a2:	1c0a      	adds	r2, r1, #0
 80006a4:	701a      	strb	r2, [r3, #0]
	unsigned char cdi;

	if(cdsign==0) HAL_GPIO_WritePin(LCDP, LCDDAT, GPIO_PIN_RESET); //LCDODR &= LCDDAT_MASKL;
 80006a6:	1dfb      	adds	r3, r7, #7
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d108      	bne.n	80006c0 <lcdn1202_9bsend+0x2c>
 80006ae:	2380      	movs	r3, #128	; 0x80
 80006b0:	0059      	lsls	r1, r3, #1
 80006b2:	2390      	movs	r3, #144	; 0x90
 80006b4:	05db      	lsls	r3, r3, #23
 80006b6:	2200      	movs	r2, #0
 80006b8:	0018      	movs	r0, r3
 80006ba:	f001 ff36 	bl	800252a <HAL_GPIO_WritePin>
 80006be:	e007      	b.n	80006d0 <lcdn1202_9bsend+0x3c>
	else HAL_GPIO_WritePin(LCDP, LCDDAT, GPIO_PIN_SET); //LCDODR |= LCDDAT_MASKH;
 80006c0:	2380      	movs	r3, #128	; 0x80
 80006c2:	0059      	lsls	r1, r3, #1
 80006c4:	2390      	movs	r3, #144	; 0x90
 80006c6:	05db      	lsls	r3, r3, #23
 80006c8:	2201      	movs	r2, #1
 80006ca:	0018      	movs	r0, r3
 80006cc:	f001 ff2d 	bl	800252a <HAL_GPIO_WritePin>
	lcdn1202_clock1();
 80006d0:	f000 f839 	bl	8000746 <lcdn1202_clock1>

	for(cdi=0;cdi<8;cdi++) //send 9 bit data
 80006d4:	230f      	movs	r3, #15
 80006d6:	18fb      	adds	r3, r7, r3
 80006d8:	2200      	movs	r2, #0
 80006da:	701a      	strb	r2, [r3, #0]
 80006dc:	e022      	b.n	8000724 <lcdn1202_9bsend+0x90>
	   {
		if(comdat & 0x80) HAL_GPIO_WritePin(LCDP, LCDDAT, GPIO_PIN_SET); //LCDODR |= LCDDAT_MASKH; //Data = '1'
 80006de:	1dbb      	adds	r3, r7, #6
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	b25b      	sxtb	r3, r3
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	da08      	bge.n	80006fa <lcdn1202_9bsend+0x66>
 80006e8:	2380      	movs	r3, #128	; 0x80
 80006ea:	0059      	lsls	r1, r3, #1
 80006ec:	2390      	movs	r3, #144	; 0x90
 80006ee:	05db      	lsls	r3, r3, #23
 80006f0:	2201      	movs	r2, #1
 80006f2:	0018      	movs	r0, r3
 80006f4:	f001 ff19 	bl	800252a <HAL_GPIO_WritePin>
 80006f8:	e007      	b.n	800070a <lcdn1202_9bsend+0x76>
		else HAL_GPIO_WritePin(LCDP, LCDDAT, GPIO_PIN_RESET); //LCDODR &= LCDDAT_MASKL;		  //Data = '0'
 80006fa:	2380      	movs	r3, #128	; 0x80
 80006fc:	0059      	lsls	r1, r3, #1
 80006fe:	2390      	movs	r3, #144	; 0x90
 8000700:	05db      	lsls	r3, r3, #23
 8000702:	2200      	movs	r2, #0
 8000704:	0018      	movs	r0, r3
 8000706:	f001 ff10 	bl	800252a <HAL_GPIO_WritePin>
		lcdn1202_clock1();
 800070a:	f000 f81c 	bl	8000746 <lcdn1202_clock1>
		comdat <<= 1;
 800070e:	1dba      	adds	r2, r7, #6
 8000710:	1dbb      	adds	r3, r7, #6
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	18db      	adds	r3, r3, r3
 8000716:	7013      	strb	r3, [r2, #0]
	for(cdi=0;cdi<8;cdi++) //send 9 bit data
 8000718:	210f      	movs	r1, #15
 800071a:	187b      	adds	r3, r7, r1
 800071c:	781a      	ldrb	r2, [r3, #0]
 800071e:	187b      	adds	r3, r7, r1
 8000720:	3201      	adds	r2, #1
 8000722:	701a      	strb	r2, [r3, #0]
 8000724:	230f      	movs	r3, #15
 8000726:	18fb      	adds	r3, r7, r3
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	2b07      	cmp	r3, #7
 800072c:	d9d7      	bls.n	80006de <lcdn1202_9bsend+0x4a>
	   }
	HAL_GPIO_WritePin(LCDP, LCDDAT, GPIO_PIN_RESET); //LCDODR &= LCDDAT_MASKL;
 800072e:	2380      	movs	r3, #128	; 0x80
 8000730:	0059      	lsls	r1, r3, #1
 8000732:	2390      	movs	r3, #144	; 0x90
 8000734:	05db      	lsls	r3, r3, #23
 8000736:	2200      	movs	r2, #0
 8000738:	0018      	movs	r0, r3
 800073a:	f001 fef6 	bl	800252a <HAL_GPIO_WritePin>
}
 800073e:	46c0      	nop			; (mov r8, r8)
 8000740:	46bd      	mov	sp, r7
 8000742:	b004      	add	sp, #16
 8000744:	bd80      	pop	{r7, pc}

08000746 <lcdn1202_clock1>:

void lcdn1202_clock1()
{
 8000746:	b580      	push	{r7, lr}
 8000748:	af00      	add	r7, sp, #0
	//LCDODR |= LCDCLK_MASKH;
	HAL_GPIO_WritePin(LCDP, LCDCLK, GPIO_PIN_SET);
 800074a:	2380      	movs	r3, #128	; 0x80
 800074c:	0099      	lsls	r1, r3, #2
 800074e:	2390      	movs	r3, #144	; 0x90
 8000750:	05db      	lsls	r3, r3, #23
 8000752:	2201      	movs	r2, #1
 8000754:	0018      	movs	r0, r3
 8000756:	f001 fee8 	bl	800252a <HAL_GPIO_WritePin>
	//HAL_Delay(1);
	__asm__("nop");
 800075a:	46c0      	nop			; (mov r8, r8)
	//LCDODR &= LCDCLK_MASKL;
	HAL_GPIO_WritePin(LCDP, LCDCLK, GPIO_PIN_RESET);
 800075c:	2380      	movs	r3, #128	; 0x80
 800075e:	0099      	lsls	r1, r3, #2
 8000760:	2390      	movs	r3, #144	; 0x90
 8000762:	05db      	lsls	r3, r3, #23
 8000764:	2200      	movs	r2, #0
 8000766:	0018      	movs	r0, r3
 8000768:	f001 fedf 	bl	800252a <HAL_GPIO_WritePin>
}
 800076c:	46c0      	nop			; (mov r8, r8)
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}

08000772 <lcdn1202_blon>:

	//return fontbyte;
//}

void lcdn1202_blon()
{
 8000772:	b580      	push	{r7, lr}
 8000774:	af00      	add	r7, sp, #0
	//LCDODR |= LCDBL_MASKH;
	HAL_GPIO_WritePin(LCDP, LCDBL, GPIO_PIN_SET);
 8000776:	2390      	movs	r3, #144	; 0x90
 8000778:	05db      	lsls	r3, r3, #23
 800077a:	2201      	movs	r2, #1
 800077c:	2180      	movs	r1, #128	; 0x80
 800077e:	0018      	movs	r0, r3
 8000780:	f001 fed3 	bl	800252a <HAL_GPIO_WritePin>
}
 8000784:	46c0      	nop			; (mov r8, r8)
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}

0800078a <lcdn1202_bloff>:

void lcdn1202_bloff()
{
 800078a:	b580      	push	{r7, lr}
 800078c:	af00      	add	r7, sp, #0
	//LCDODR &= LCDBL_MASKL;
	HAL_GPIO_WritePin(LCDP, LCDBL, GPIO_PIN_RESET);
 800078e:	2390      	movs	r3, #144	; 0x90
 8000790:	05db      	lsls	r3, r3, #23
 8000792:	2200      	movs	r2, #0
 8000794:	2180      	movs	r1, #128	; 0x80
 8000796:	0018      	movs	r0, r3
 8000798:	f001 fec7 	bl	800252a <HAL_GPIO_WritePin>
}
 800079c:	46c0      	nop			; (mov r8, r8)
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
	...

080007a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007a8:	f000 ff46 	bl	8001638 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007ac:	f000 f930 	bl	8000a10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007b0:	f000 fa0e 	bl	8000bd0 <MX_GPIO_Init>
  MX_ADC_Init();
 80007b4:	f000 f972 	bl	8000a9c <MX_ADC_Init>
  MX_SPI1_Init();
 80007b8:	f000 f9cc 	bl	8000b54 <MX_SPI1_Init>
  lcdn1202_init();
 80007bc:	f7ff fd30 	bl	8000220 <lcdn1202_init>
  NRF24_init();
 80007c0:	f000 fa91 	bl	8000ce6 <NRF24_init>
  /* USER CODE BEGIN 2 */
  if(HAL_GPIO_ReadPin(BTN, BTN01)==GPIO_PIN_SET) //If Button 1 is pressed -> TX Mode
 80007c4:	2390      	movs	r3, #144	; 0x90
 80007c6:	05db      	lsls	r3, r3, #23
 80007c8:	2140      	movs	r1, #64	; 0x40
 80007ca:	0018      	movs	r0, r3
 80007cc:	f001 fe90 	bl	80024f0 <HAL_GPIO_ReadPin>
 80007d0:	0003      	movs	r3, r0
 80007d2:	2b01      	cmp	r3, #1
 80007d4:	d10e      	bne.n	80007f4 <main+0x50>
  {
	  RFmode = 1;
 80007d6:	4b82      	ldr	r3, [pc, #520]	; (80009e0 <main+0x23c>)
 80007d8:	2201      	movs	r2, #1
 80007da:	701a      	strb	r2, [r3, #0]
	  LCD_drawtext("TX MODE", 1, 16);
 80007dc:	4b81      	ldr	r3, [pc, #516]	; (80009e4 <main+0x240>)
 80007de:	2210      	movs	r2, #16
 80007e0:	2101      	movs	r1, #1
 80007e2:	0018      	movs	r0, r3
 80007e4:	f7ff fe3c 	bl	8000460 <LCD_drawtext>
	  NRF24_TXmode(10, TXaddr);	//Use Channel 10
 80007e8:	4b7f      	ldr	r3, [pc, #508]	; (80009e8 <main+0x244>)
 80007ea:	0019      	movs	r1, r3
 80007ec:	200a      	movs	r0, #10
 80007ee:	f000 fc11 	bl	8001014 <NRF24_TXmode>
 80007f2:	e00e      	b.n	8000812 <main+0x6e>
  }
  else	//If Button 1 is not pressed -> RX Mode
  {
	  RFmode = 0;
 80007f4:	4b7a      	ldr	r3, [pc, #488]	; (80009e0 <main+0x23c>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	701a      	strb	r2, [r3, #0]
	  LCD_drawtext("RX MODE", 1, 16);
 80007fa:	4b7c      	ldr	r3, [pc, #496]	; (80009ec <main+0x248>)
 80007fc:	2210      	movs	r2, #16
 80007fe:	2101      	movs	r1, #1
 8000800:	0018      	movs	r0, r3
 8000802:	f7ff fe2d 	bl	8000460 <LCD_drawtext>
	  NRF24_RXmode(10, 1, RXaddr, DLEN); //Use Channel 10 and Pipe 1. Payload size = data length
 8000806:	4a7a      	ldr	r2, [pc, #488]	; (80009f0 <main+0x24c>)
 8000808:	2303      	movs	r3, #3
 800080a:	2101      	movs	r1, #1
 800080c:	200a      	movs	r0, #10
 800080e:	f000 fc77 	bl	8001100 <NRF24_RXmode>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if(RFmode==1)
 8000812:	4b73      	ldr	r3, [pc, #460]	; (80009e0 <main+0x23c>)
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	2b01      	cmp	r3, #1
 8000818:	d16d      	bne.n	80008f6 <main+0x152>
	  {
		  	  TXdat[0] = 0;
 800081a:	4b76      	ldr	r3, [pc, #472]	; (80009f4 <main+0x250>)
 800081c:	2200      	movs	r2, #0
 800081e:	701a      	strb	r2, [r3, #0]
		  	  for(btns=0;btns<6;btns++) //Check all button
 8000820:	4b75      	ldr	r3, [pc, #468]	; (80009f8 <main+0x254>)
 8000822:	2200      	movs	r2, #0
 8000824:	701a      	strb	r2, [r3, #0]
 8000826:	e01f      	b.n	8000868 <main+0xc4>
		  	  {
	  	  			  if(checkbtn(BTNseq[btns])==1) //Check if a button is pressed
 8000828:	4b73      	ldr	r3, [pc, #460]	; (80009f8 <main+0x254>)
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	001a      	movs	r2, r3
 800082e:	4b73      	ldr	r3, [pc, #460]	; (80009fc <main+0x258>)
 8000830:	0052      	lsls	r2, r2, #1
 8000832:	5ad3      	ldrh	r3, [r2, r3]
 8000834:	0018      	movs	r0, r3
 8000836:	f000 fa0b 	bl	8000c50 <checkbtn>
 800083a:	0003      	movs	r3, r0
 800083c:	2b01      	cmp	r3, #1
 800083e:	d10d      	bne.n	800085c <main+0xb8>
	  	  			  {
	  	  				  TXdat[0] = TXdat[0] | 1<<btns; //Update buttons data
 8000840:	4b6c      	ldr	r3, [pc, #432]	; (80009f4 <main+0x250>)
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	b25a      	sxtb	r2, r3
 8000846:	4b6c      	ldr	r3, [pc, #432]	; (80009f8 <main+0x254>)
 8000848:	781b      	ldrb	r3, [r3, #0]
 800084a:	0019      	movs	r1, r3
 800084c:	2301      	movs	r3, #1
 800084e:	408b      	lsls	r3, r1
 8000850:	b25b      	sxtb	r3, r3
 8000852:	4313      	orrs	r3, r2
 8000854:	b25b      	sxtb	r3, r3
 8000856:	b2da      	uxtb	r2, r3
 8000858:	4b66      	ldr	r3, [pc, #408]	; (80009f4 <main+0x250>)
 800085a:	701a      	strb	r2, [r3, #0]
		  	  for(btns=0;btns<6;btns++) //Check all button
 800085c:	4b66      	ldr	r3, [pc, #408]	; (80009f8 <main+0x254>)
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	3301      	adds	r3, #1
 8000862:	b2da      	uxtb	r2, r3
 8000864:	4b64      	ldr	r3, [pc, #400]	; (80009f8 <main+0x254>)
 8000866:	701a      	strb	r2, [r3, #0]
 8000868:	4b63      	ldr	r3, [pc, #396]	; (80009f8 <main+0x254>)
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	2b05      	cmp	r3, #5
 800086e:	d9db      	bls.n	8000828 <main+0x84>
	  	  			  }
	  	  			  else{}
		  	  }

		  	  adcv = getADCvalue();		//Get ADC Value
 8000870:	f000 fa10 	bl	8000c94 <getADCvalue>
 8000874:	0003      	movs	r3, r0
 8000876:	001a      	movs	r2, r3
 8000878:	4b61      	ldr	r3, [pc, #388]	; (8000a00 <main+0x25c>)
 800087a:	801a      	strh	r2, [r3, #0]
		  	  TXdat[1] = adcv >> 8;		//ADC Upper Byte
 800087c:	4b60      	ldr	r3, [pc, #384]	; (8000a00 <main+0x25c>)
 800087e:	881b      	ldrh	r3, [r3, #0]
 8000880:	0a1b      	lsrs	r3, r3, #8
 8000882:	b29b      	uxth	r3, r3
 8000884:	b2da      	uxtb	r2, r3
 8000886:	4b5b      	ldr	r3, [pc, #364]	; (80009f4 <main+0x250>)
 8000888:	705a      	strb	r2, [r3, #1]
		  	  TXdat[2] = adcv & 0x00FF;	//ADC Lower Byte
 800088a:	4b5d      	ldr	r3, [pc, #372]	; (8000a00 <main+0x25c>)
 800088c:	881b      	ldrh	r3, [r3, #0]
 800088e:	b2da      	uxtb	r2, r3
 8000890:	4b58      	ldr	r3, [pc, #352]	; (80009f4 <main+0x250>)
 8000892:	709a      	strb	r2, [r3, #2]

		  	  if(NRF24_TX(TXdat,DLEN)==1) //Send all payload data
 8000894:	4b57      	ldr	r3, [pc, #348]	; (80009f4 <main+0x250>)
 8000896:	2103      	movs	r1, #3
 8000898:	0018      	movs	r0, r3
 800089a:	f000 fbee 	bl	800107a <NRF24_TX>
 800089e:	0003      	movs	r3, r0
 80008a0:	2b01      	cmp	r3, #1
 80008a2:	d11a      	bne.n	80008da <main+0x136>
	  	  	  {
	  	  			  LCD_drawtext("Transmit...", 3, 0);
 80008a4:	4b57      	ldr	r3, [pc, #348]	; (8000a04 <main+0x260>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	2103      	movs	r1, #3
 80008aa:	0018      	movs	r0, r3
 80008ac:	f7ff fdd8 	bl	8000460 <LCD_drawtext>
	  	  			  LCD_drawint(TXdat[0], 5, 0);	//Display Buttons State Data
 80008b0:	4b50      	ldr	r3, [pc, #320]	; (80009f4 <main+0x250>)
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	2200      	movs	r2, #0
 80008b6:	2105      	movs	r1, #5
 80008b8:	0018      	movs	r0, r3
 80008ba:	f7ff fdff 	bl	80004bc <LCD_drawint>
	  	  			  LCD_drawint(TXdat[1], 5, 32);	//Display ADC Upper Byte
 80008be:	4b4d      	ldr	r3, [pc, #308]	; (80009f4 <main+0x250>)
 80008c0:	785b      	ldrb	r3, [r3, #1]
 80008c2:	2220      	movs	r2, #32
 80008c4:	2105      	movs	r1, #5
 80008c6:	0018      	movs	r0, r3
 80008c8:	f7ff fdf8 	bl	80004bc <LCD_drawint>
	  	  			  LCD_drawint(TXdat[2], 5, 64);	//Display ADC Lower Byte
 80008cc:	4b49      	ldr	r3, [pc, #292]	; (80009f4 <main+0x250>)
 80008ce:	789b      	ldrb	r3, [r3, #2]
 80008d0:	2240      	movs	r2, #64	; 0x40
 80008d2:	2105      	movs	r1, #5
 80008d4:	0018      	movs	r0, r3
 80008d6:	f7ff fdf1 	bl	80004bc <LCD_drawint>
	  	  	  }
	  	  	  else{}

		  	  HAL_Delay(200);
 80008da:	20c8      	movs	r0, #200	; 0xc8
 80008dc:	f000 ff10 	bl	8001700 <HAL_Delay>
		  	  LCD_clearblock(3,0,95);
 80008e0:	225f      	movs	r2, #95	; 0x5f
 80008e2:	2100      	movs	r1, #0
 80008e4:	2003      	movs	r0, #3
 80008e6:	f7ff fe5a 	bl	800059e <LCD_clearblock>
		  	  LCD_clearblock(5,0,95);
 80008ea:	225f      	movs	r2, #95	; 0x5f
 80008ec:	2100      	movs	r1, #0
 80008ee:	2005      	movs	r0, #5
 80008f0:	f7ff fe55 	bl	800059e <LCD_clearblock>
 80008f4:	e78d      	b.n	8000812 <main+0x6e>
	  }
	  else
	  {
	  	  	  if(NRF24_checkpipe(1)==1)	//Check if any data in Pipe 1
 80008f6:	2001      	movs	r0, #1
 80008f8:	f000 fc8e 	bl	8001218 <NRF24_checkpipe>
 80008fc:	0003      	movs	r3, r0
 80008fe:	2b01      	cmp	r3, #1
 8000900:	d15b      	bne.n	80009ba <main+0x216>
	  	  	  {
	  	  	  		  NRF24_RX(RXdat,DLEN);	//Receive data
 8000902:	4b41      	ldr	r3, [pc, #260]	; (8000a08 <main+0x264>)
 8000904:	2103      	movs	r1, #3
 8000906:	0018      	movs	r0, r3
 8000908:	f000 fcab 	bl	8001262 <NRF24_RX>
	  	  	  		  LCD_drawint(RXdat[0], 3, 0);	//Display Buttons State Data
 800090c:	4b3e      	ldr	r3, [pc, #248]	; (8000a08 <main+0x264>)
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	2200      	movs	r2, #0
 8000912:	2103      	movs	r1, #3
 8000914:	0018      	movs	r0, r3
 8000916:	f7ff fdd1 	bl	80004bc <LCD_drawint>
	  	  	  		  LCD_drawint(RXdat[1], 3, 32);	//Display ADC Upper Byte
 800091a:	4b3b      	ldr	r3, [pc, #236]	; (8000a08 <main+0x264>)
 800091c:	785b      	ldrb	r3, [r3, #1]
 800091e:	2220      	movs	r2, #32
 8000920:	2103      	movs	r1, #3
 8000922:	0018      	movs	r0, r3
 8000924:	f7ff fdca 	bl	80004bc <LCD_drawint>
	  	  	  		  LCD_drawint(RXdat[2], 3, 64);	//Display ADC Lower Byte
 8000928:	4b37      	ldr	r3, [pc, #220]	; (8000a08 <main+0x264>)
 800092a:	789b      	ldrb	r3, [r3, #2]
 800092c:	2240      	movs	r2, #64	; 0x40
 800092e:	2103      	movs	r1, #3
 8000930:	0018      	movs	r0, r3
 8000932:	f7ff fdc3 	bl	80004bc <LCD_drawint>
	  	  	  		  adcv = (RXdat[1] << 8) | RXdat[2];	//Get ADC Value
 8000936:	4b34      	ldr	r3, [pc, #208]	; (8000a08 <main+0x264>)
 8000938:	785b      	ldrb	r3, [r3, #1]
 800093a:	021b      	lsls	r3, r3, #8
 800093c:	b21a      	sxth	r2, r3
 800093e:	4b32      	ldr	r3, [pc, #200]	; (8000a08 <main+0x264>)
 8000940:	789b      	ldrb	r3, [r3, #2]
 8000942:	b21b      	sxth	r3, r3
 8000944:	4313      	orrs	r3, r2
 8000946:	b21b      	sxth	r3, r3
 8000948:	b29a      	uxth	r2, r3
 800094a:	4b2d      	ldr	r3, [pc, #180]	; (8000a00 <main+0x25c>)
 800094c:	801a      	strh	r2, [r3, #0]

	  	  	  		  for(btns=0;btns<6;btns++)
 800094e:	4b2a      	ldr	r3, [pc, #168]	; (80009f8 <main+0x254>)
 8000950:	2200      	movs	r2, #0
 8000952:	701a      	strb	r2, [r3, #0]
 8000954:	e020      	b.n	8000998 <main+0x1f4>
	  	  	  		  {
	  	  	  			  if((RXdat[0])&0x01) //Check buttons state bit
 8000956:	4b2c      	ldr	r3, [pc, #176]	; (8000a08 <main+0x264>)
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	001a      	movs	r2, r3
 800095c:	2301      	movs	r3, #1
 800095e:	4013      	ands	r3, r2
 8000960:	d00e      	beq.n	8000980 <main+0x1dc>
	  	  	  			  {
	  	  	  				LCD_drawint((btns+1), 4, (btns*12)+12);	//Display pressed buttons
 8000962:	4b25      	ldr	r3, [pc, #148]	; (80009f8 <main+0x254>)
 8000964:	781b      	ldrb	r3, [r3, #0]
 8000966:	3301      	adds	r3, #1
 8000968:	0018      	movs	r0, r3
 800096a:	4b23      	ldr	r3, [pc, #140]	; (80009f8 <main+0x254>)
 800096c:	781b      	ldrb	r3, [r3, #0]
 800096e:	3301      	adds	r3, #1
 8000970:	b2db      	uxtb	r3, r3
 8000972:	220c      	movs	r2, #12
 8000974:	4353      	muls	r3, r2
 8000976:	b2db      	uxtb	r3, r3
 8000978:	001a      	movs	r2, r3
 800097a:	2104      	movs	r1, #4
 800097c:	f7ff fd9e 	bl	80004bc <LCD_drawint>
	  	  	  			  }
	  	  	  			  RXdat[0] = RXdat[0]>>1;
 8000980:	4b21      	ldr	r3, [pc, #132]	; (8000a08 <main+0x264>)
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	085b      	lsrs	r3, r3, #1
 8000986:	b2da      	uxtb	r2, r3
 8000988:	4b1f      	ldr	r3, [pc, #124]	; (8000a08 <main+0x264>)
 800098a:	701a      	strb	r2, [r3, #0]
	  	  	  		  for(btns=0;btns<6;btns++)
 800098c:	4b1a      	ldr	r3, [pc, #104]	; (80009f8 <main+0x254>)
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	3301      	adds	r3, #1
 8000992:	b2da      	uxtb	r2, r3
 8000994:	4b18      	ldr	r3, [pc, #96]	; (80009f8 <main+0x254>)
 8000996:	701a      	strb	r2, [r3, #0]
 8000998:	4b17      	ldr	r3, [pc, #92]	; (80009f8 <main+0x254>)
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	2b05      	cmp	r3, #5
 800099e:	d9da      	bls.n	8000956 <main+0x1b2>
	  	  	  		  }

	  	  	  		LCD_drawtext("ADC : ", 6, 0);
 80009a0:	4b1a      	ldr	r3, [pc, #104]	; (8000a0c <main+0x268>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	2106      	movs	r1, #6
 80009a6:	0018      	movs	r0, r3
 80009a8:	f7ff fd5a 	bl	8000460 <LCD_drawtext>
	  	  	  		LCD_drawint(adcv, 6, 48);
 80009ac:	4b14      	ldr	r3, [pc, #80]	; (8000a00 <main+0x25c>)
 80009ae:	881b      	ldrh	r3, [r3, #0]
 80009b0:	2230      	movs	r2, #48	; 0x30
 80009b2:	2106      	movs	r1, #6
 80009b4:	0018      	movs	r0, r3
 80009b6:	f7ff fd81 	bl	80004bc <LCD_drawint>
	  	  	  }
	  	  	  else{}

	  	  	  HAL_Delay(200);
 80009ba:	20c8      	movs	r0, #200	; 0xc8
 80009bc:	f000 fea0 	bl	8001700 <HAL_Delay>
	  	  	  LCD_clearblock(3,0,95);
 80009c0:	225f      	movs	r2, #95	; 0x5f
 80009c2:	2100      	movs	r1, #0
 80009c4:	2003      	movs	r0, #3
 80009c6:	f7ff fdea 	bl	800059e <LCD_clearblock>
	  	  	  LCD_clearblock(4,12,83);
 80009ca:	2253      	movs	r2, #83	; 0x53
 80009cc:	210c      	movs	r1, #12
 80009ce:	2004      	movs	r0, #4
 80009d0:	f7ff fde5 	bl	800059e <LCD_clearblock>
	  	  	  LCD_clearblock(6,0,95);
 80009d4:	225f      	movs	r2, #95	; 0x5f
 80009d6:	2100      	movs	r1, #0
 80009d8:	2006      	movs	r0, #6
 80009da:	f7ff fde0 	bl	800059e <LCD_clearblock>
	  if(RFmode==1)
 80009de:	e718      	b.n	8000812 <main+0x6e>
 80009e0:	200000b4 	.word	0x200000b4
 80009e4:	08003c70 	.word	0x08003c70
 80009e8:	20000008 	.word	0x20000008
 80009ec:	08003c78 	.word	0x08003c78
 80009f0:	20000000 	.word	0x20000000
 80009f4:	20000044 	.word	0x20000044
 80009f8:	20000048 	.word	0x20000048
 80009fc:	20000010 	.word	0x20000010
 8000a00:	2000004a 	.word	0x2000004a
 8000a04:	08003c80 	.word	0x08003c80
 8000a08:	2000004c 	.word	0x2000004c
 8000a0c:	08003c8c 	.word	0x08003c8c

08000a10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a10:	b590      	push	{r4, r7, lr}
 8000a12:	b091      	sub	sp, #68	; 0x44
 8000a14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a16:	2410      	movs	r4, #16
 8000a18:	193b      	adds	r3, r7, r4
 8000a1a:	0018      	movs	r0, r3
 8000a1c:	2330      	movs	r3, #48	; 0x30
 8000a1e:	001a      	movs	r2, r3
 8000a20:	2100      	movs	r1, #0
 8000a22:	f003 f911 	bl	8003c48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a26:	003b      	movs	r3, r7
 8000a28:	0018      	movs	r0, r3
 8000a2a:	2310      	movs	r3, #16
 8000a2c:	001a      	movs	r2, r3
 8000a2e:	2100      	movs	r1, #0
 8000a30:	f003 f90a 	bl	8003c48 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8000a34:	0021      	movs	r1, r4
 8000a36:	187b      	adds	r3, r7, r1
 8000a38:	2212      	movs	r2, #18
 8000a3a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a3c:	187b      	adds	r3, r7, r1
 8000a3e:	2201      	movs	r2, #1
 8000a40:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8000a42:	187b      	adds	r3, r7, r1
 8000a44:	2201      	movs	r2, #1
 8000a46:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a48:	187b      	adds	r3, r7, r1
 8000a4a:	2210      	movs	r2, #16
 8000a4c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8000a4e:	187b      	adds	r3, r7, r1
 8000a50:	2210      	movs	r2, #16
 8000a52:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a54:	187b      	adds	r3, r7, r1
 8000a56:	2200      	movs	r2, #0
 8000a58:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a5a:	187b      	adds	r3, r7, r1
 8000a5c:	0018      	movs	r0, r3
 8000a5e:	f001 fd81 	bl	8002564 <HAL_RCC_OscConfig>
 8000a62:	1e03      	subs	r3, r0, #0
 8000a64:	d001      	beq.n	8000a6a <SystemClock_Config+0x5a>
  {
    Error_Handler();
 8000a66:	f000 f939 	bl	8000cdc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a6a:	003b      	movs	r3, r7
 8000a6c:	2207      	movs	r2, #7
 8000a6e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a70:	003b      	movs	r3, r7
 8000a72:	2200      	movs	r2, #0
 8000a74:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a76:	003b      	movs	r3, r7
 8000a78:	2200      	movs	r2, #0
 8000a7a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a7c:	003b      	movs	r3, r7
 8000a7e:	2200      	movs	r2, #0
 8000a80:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a82:	003b      	movs	r3, r7
 8000a84:	2100      	movs	r1, #0
 8000a86:	0018      	movs	r0, r3
 8000a88:	f002 f886 	bl	8002b98 <HAL_RCC_ClockConfig>
 8000a8c:	1e03      	subs	r3, r0, #0
 8000a8e:	d001      	beq.n	8000a94 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000a90:	f000 f924 	bl	8000cdc <Error_Handler>
  }
}
 8000a94:	46c0      	nop			; (mov r8, r8)
 8000a96:	46bd      	mov	sp, r7
 8000a98:	b011      	add	sp, #68	; 0x44
 8000a9a:	bd90      	pop	{r4, r7, pc}

08000a9c <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b084      	sub	sp, #16
 8000aa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000aa2:	1d3b      	adds	r3, r7, #4
 8000aa4:	0018      	movs	r0, r3
 8000aa6:	230c      	movs	r3, #12
 8000aa8:	001a      	movs	r2, r3
 8000aaa:	2100      	movs	r1, #0
 8000aac:	f003 f8cc 	bl	8003c48 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000ab0:	4b26      	ldr	r3, [pc, #152]	; (8000b4c <MX_ADC_Init+0xb0>)
 8000ab2:	4a27      	ldr	r2, [pc, #156]	; (8000b50 <MX_ADC_Init+0xb4>)
 8000ab4:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000ab6:	4b25      	ldr	r3, [pc, #148]	; (8000b4c <MX_ADC_Init+0xb0>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000abc:	4b23      	ldr	r3, [pc, #140]	; (8000b4c <MX_ADC_Init+0xb0>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ac2:	4b22      	ldr	r3, [pc, #136]	; (8000b4c <MX_ADC_Init+0xb0>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000ac8:	4b20      	ldr	r3, [pc, #128]	; (8000b4c <MX_ADC_Init+0xb0>)
 8000aca:	2201      	movs	r2, #1
 8000acc:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ace:	4b1f      	ldr	r3, [pc, #124]	; (8000b4c <MX_ADC_Init+0xb0>)
 8000ad0:	2204      	movs	r2, #4
 8000ad2:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000ad4:	4b1d      	ldr	r3, [pc, #116]	; (8000b4c <MX_ADC_Init+0xb0>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000ada:	4b1c      	ldr	r3, [pc, #112]	; (8000b4c <MX_ADC_Init+0xb0>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000ae0:	4b1a      	ldr	r3, [pc, #104]	; (8000b4c <MX_ADC_Init+0xb0>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000ae6:	4b19      	ldr	r3, [pc, #100]	; (8000b4c <MX_ADC_Init+0xb0>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000aec:	4b17      	ldr	r3, [pc, #92]	; (8000b4c <MX_ADC_Init+0xb0>)
 8000aee:	22c2      	movs	r2, #194	; 0xc2
 8000af0:	32ff      	adds	r2, #255	; 0xff
 8000af2:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000af4:	4b15      	ldr	r3, [pc, #84]	; (8000b4c <MX_ADC_Init+0xb0>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000afa:	4b14      	ldr	r3, [pc, #80]	; (8000b4c <MX_ADC_Init+0xb0>)
 8000afc:	2224      	movs	r2, #36	; 0x24
 8000afe:	2100      	movs	r1, #0
 8000b00:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b02:	4b12      	ldr	r3, [pc, #72]	; (8000b4c <MX_ADC_Init+0xb0>)
 8000b04:	2201      	movs	r2, #1
 8000b06:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000b08:	4b10      	ldr	r3, [pc, #64]	; (8000b4c <MX_ADC_Init+0xb0>)
 8000b0a:	0018      	movs	r0, r3
 8000b0c:	f000 fe1c 	bl	8001748 <HAL_ADC_Init>
 8000b10:	1e03      	subs	r3, r0, #0
 8000b12:	d001      	beq.n	8000b18 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8000b14:	f000 f8e2 	bl	8000cdc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000b18:	1d3b      	adds	r3, r7, #4
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000b1e:	1d3b      	adds	r3, r7, #4
 8000b20:	2280      	movs	r2, #128	; 0x80
 8000b22:	0152      	lsls	r2, r2, #5
 8000b24:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000b26:	1d3b      	adds	r3, r7, #4
 8000b28:	2280      	movs	r2, #128	; 0x80
 8000b2a:	0552      	lsls	r2, r2, #21
 8000b2c:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000b2e:	1d3a      	adds	r2, r7, #4
 8000b30:	4b06      	ldr	r3, [pc, #24]	; (8000b4c <MX_ADC_Init+0xb0>)
 8000b32:	0011      	movs	r1, r2
 8000b34:	0018      	movs	r0, r3
 8000b36:	f001 f87f 	bl	8001c38 <HAL_ADC_ConfigChannel>
 8000b3a:	1e03      	subs	r3, r0, #0
 8000b3c:	d001      	beq.n	8000b42 <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 8000b3e:	f000 f8cd 	bl	8000cdc <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000b42:	46c0      	nop			; (mov r8, r8)
 8000b44:	46bd      	mov	sp, r7
 8000b46:	b004      	add	sp, #16
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	46c0      	nop			; (mov r8, r8)
 8000b4c:	200000b8 	.word	0x200000b8
 8000b50:	40012400 	.word	0x40012400

08000b54 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000b58:	4b1b      	ldr	r3, [pc, #108]	; (8000bc8 <MX_SPI1_Init+0x74>)
 8000b5a:	4a1c      	ldr	r2, [pc, #112]	; (8000bcc <MX_SPI1_Init+0x78>)
 8000b5c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b5e:	4b1a      	ldr	r3, [pc, #104]	; (8000bc8 <MX_SPI1_Init+0x74>)
 8000b60:	2282      	movs	r2, #130	; 0x82
 8000b62:	0052      	lsls	r2, r2, #1
 8000b64:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b66:	4b18      	ldr	r3, [pc, #96]	; (8000bc8 <MX_SPI1_Init+0x74>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b6c:	4b16      	ldr	r3, [pc, #88]	; (8000bc8 <MX_SPI1_Init+0x74>)
 8000b6e:	22e0      	movs	r2, #224	; 0xe0
 8000b70:	00d2      	lsls	r2, r2, #3
 8000b72:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b74:	4b14      	ldr	r3, [pc, #80]	; (8000bc8 <MX_SPI1_Init+0x74>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b7a:	4b13      	ldr	r3, [pc, #76]	; (8000bc8 <MX_SPI1_Init+0x74>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b80:	4b11      	ldr	r3, [pc, #68]	; (8000bc8 <MX_SPI1_Init+0x74>)
 8000b82:	2280      	movs	r2, #128	; 0x80
 8000b84:	0092      	lsls	r2, r2, #2
 8000b86:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000b88:	4b0f      	ldr	r3, [pc, #60]	; (8000bc8 <MX_SPI1_Init+0x74>)
 8000b8a:	2220      	movs	r2, #32
 8000b8c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b8e:	4b0e      	ldr	r3, [pc, #56]	; (8000bc8 <MX_SPI1_Init+0x74>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b94:	4b0c      	ldr	r3, [pc, #48]	; (8000bc8 <MX_SPI1_Init+0x74>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b9a:	4b0b      	ldr	r3, [pc, #44]	; (8000bc8 <MX_SPI1_Init+0x74>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000ba0:	4b09      	ldr	r3, [pc, #36]	; (8000bc8 <MX_SPI1_Init+0x74>)
 8000ba2:	2207      	movs	r2, #7
 8000ba4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000ba6:	4b08      	ldr	r3, [pc, #32]	; (8000bc8 <MX_SPI1_Init+0x74>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000bac:	4b06      	ldr	r3, [pc, #24]	; (8000bc8 <MX_SPI1_Init+0x74>)
 8000bae:	2208      	movs	r2, #8
 8000bb0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000bb2:	4b05      	ldr	r3, [pc, #20]	; (8000bc8 <MX_SPI1_Init+0x74>)
 8000bb4:	0018      	movs	r0, r3
 8000bb6:	f002 f921 	bl	8002dfc <HAL_SPI_Init>
 8000bba:	1e03      	subs	r3, r0, #0
 8000bbc:	d001      	beq.n	8000bc2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000bbe:	f000 f88d 	bl	8000cdc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000bc2:	46c0      	nop			; (mov r8, r8)
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	20000050 	.word	0x20000050
 8000bcc:	40013000 	.word	0x40013000

08000bd0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bd0:	b590      	push	{r4, r7, lr}
 8000bd2:	b089      	sub	sp, #36	; 0x24
 8000bd4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd6:	240c      	movs	r4, #12
 8000bd8:	193b      	adds	r3, r7, r4
 8000bda:	0018      	movs	r0, r3
 8000bdc:	2314      	movs	r3, #20
 8000bde:	001a      	movs	r2, r3
 8000be0:	2100      	movs	r1, #0
 8000be2:	f003 f831 	bl	8003c48 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be6:	4b18      	ldr	r3, [pc, #96]	; (8000c48 <MX_GPIO_Init+0x78>)
 8000be8:	695a      	ldr	r2, [r3, #20]
 8000bea:	4b17      	ldr	r3, [pc, #92]	; (8000c48 <MX_GPIO_Init+0x78>)
 8000bec:	2180      	movs	r1, #128	; 0x80
 8000bee:	0289      	lsls	r1, r1, #10
 8000bf0:	430a      	orrs	r2, r1
 8000bf2:	615a      	str	r2, [r3, #20]
 8000bf4:	4b14      	ldr	r3, [pc, #80]	; (8000c48 <MX_GPIO_Init+0x78>)
 8000bf6:	695a      	ldr	r2, [r3, #20]
 8000bf8:	2380      	movs	r3, #128	; 0x80
 8000bfa:	029b      	lsls	r3, r3, #10
 8000bfc:	4013      	ands	r3, r2
 8000bfe:	60bb      	str	r3, [r7, #8]
 8000c00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c02:	4b11      	ldr	r3, [pc, #68]	; (8000c48 <MX_GPIO_Init+0x78>)
 8000c04:	695a      	ldr	r2, [r3, #20]
 8000c06:	4b10      	ldr	r3, [pc, #64]	; (8000c48 <MX_GPIO_Init+0x78>)
 8000c08:	2180      	movs	r1, #128	; 0x80
 8000c0a:	02c9      	lsls	r1, r1, #11
 8000c0c:	430a      	orrs	r2, r1
 8000c0e:	615a      	str	r2, [r3, #20]
 8000c10:	4b0d      	ldr	r3, [pc, #52]	; (8000c48 <MX_GPIO_Init+0x78>)
 8000c12:	695a      	ldr	r2, [r3, #20]
 8000c14:	2380      	movs	r3, #128	; 0x80
 8000c16:	02db      	lsls	r3, r3, #11
 8000c18:	4013      	ands	r3, r2
 8000c1a:	607b      	str	r3, [r7, #4]
 8000c1c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : BTN03_Pin BTN02_Pin BTN01_Pin BTN06_Pin
                           BTN05_Pin BTN04_Pin */
  GPIO_InitStruct.Pin = BTN03_Pin|BTN02_Pin|BTN01_Pin|BTN06_Pin
 8000c1e:	193b      	adds	r3, r7, r4
 8000c20:	4a0a      	ldr	r2, [pc, #40]	; (8000c4c <MX_GPIO_Init+0x7c>)
 8000c22:	601a      	str	r2, [r3, #0]
                          |BTN05_Pin|BTN04_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c24:	193b      	adds	r3, r7, r4
 8000c26:	2200      	movs	r2, #0
 8000c28:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2a:	193b      	adds	r3, r7, r4
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c30:	193a      	adds	r2, r7, r4
 8000c32:	2390      	movs	r3, #144	; 0x90
 8000c34:	05db      	lsls	r3, r3, #23
 8000c36:	0011      	movs	r1, r2
 8000c38:	0018      	movs	r0, r3
 8000c3a:	f001 fae9 	bl	8002210 <HAL_GPIO_Init>

}
 8000c3e:	46c0      	nop			; (mov r8, r8)
 8000c40:	46bd      	mov	sp, r7
 8000c42:	b009      	add	sp, #36	; 0x24
 8000c44:	bd90      	pop	{r4, r7, pc}
 8000c46:	46c0      	nop			; (mov r8, r8)
 8000c48:	40021000 	.word	0x40021000
 8000c4c:	00001c70 	.word	0x00001c70

08000c50 <checkbtn>:

/* USER CODE BEGIN 4 */
uint8_t checkbtn(uint16_t cbtn)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b084      	sub	sp, #16
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	0002      	movs	r2, r0
 8000c58:	1dbb      	adds	r3, r7, #6
 8000c5a:	801a      	strh	r2, [r3, #0]
	uint8_t sbtn;

	if(HAL_GPIO_ReadPin(BTN, cbtn)==GPIO_PIN_SET) //Check if Button is pressed
 8000c5c:	1dbb      	adds	r3, r7, #6
 8000c5e:	881a      	ldrh	r2, [r3, #0]
 8000c60:	2390      	movs	r3, #144	; 0x90
 8000c62:	05db      	lsls	r3, r3, #23
 8000c64:	0011      	movs	r1, r2
 8000c66:	0018      	movs	r0, r3
 8000c68:	f001 fc42 	bl	80024f0 <HAL_GPIO_ReadPin>
 8000c6c:	0003      	movs	r3, r0
 8000c6e:	2b01      	cmp	r3, #1
 8000c70:	d104      	bne.n	8000c7c <checkbtn+0x2c>
	{
		sbtn = 1; //Return 1
 8000c72:	230f      	movs	r3, #15
 8000c74:	18fb      	adds	r3, r7, r3
 8000c76:	2201      	movs	r2, #1
 8000c78:	701a      	strb	r2, [r3, #0]
 8000c7a:	e003      	b.n	8000c84 <checkbtn+0x34>
	}
	else sbtn = 0;
 8000c7c:	230f      	movs	r3, #15
 8000c7e:	18fb      	adds	r3, r7, r3
 8000c80:	2200      	movs	r2, #0
 8000c82:	701a      	strb	r2, [r3, #0]

	return sbtn;
 8000c84:	230f      	movs	r3, #15
 8000c86:	18fb      	adds	r3, r7, r3
 8000c88:	781b      	ldrb	r3, [r3, #0]
}
 8000c8a:	0018      	movs	r0, r3
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	b004      	add	sp, #16
 8000c90:	bd80      	pop	{r7, pc}
	...

08000c94 <getADCvalue>:

uint16_t getADCvalue()
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
	uint16_t adcval;

	HAL_ADC_Start(&hadc);
 8000c9a:	4b0f      	ldr	r3, [pc, #60]	; (8000cd8 <getADCvalue+0x44>)
 8000c9c:	0018      	movs	r0, r3
 8000c9e:	f000 fe93 	bl	80019c8 <HAL_ADC_Start>
	if (HAL_ADC_PollForConversion(&hadc, 1000) == HAL_OK)
 8000ca2:	23fa      	movs	r3, #250	; 0xfa
 8000ca4:	009a      	lsls	r2, r3, #2
 8000ca6:	4b0c      	ldr	r3, [pc, #48]	; (8000cd8 <getADCvalue+0x44>)
 8000ca8:	0011      	movs	r1, r2
 8000caa:	0018      	movs	r0, r3
 8000cac:	f000 ff20 	bl	8001af0 <HAL_ADC_PollForConversion>
 8000cb0:	1e03      	subs	r3, r0, #0
 8000cb2:	d106      	bne.n	8000cc2 <getADCvalue+0x2e>
	{
		adcval = HAL_ADC_GetValue(&hadc);
 8000cb4:	4b08      	ldr	r3, [pc, #32]	; (8000cd8 <getADCvalue+0x44>)
 8000cb6:	0018      	movs	r0, r3
 8000cb8:	f000 ffb2 	bl	8001c20 <HAL_ADC_GetValue>
 8000cbc:	0002      	movs	r2, r0
 8000cbe:	1dbb      	adds	r3, r7, #6
 8000cc0:	801a      	strh	r2, [r3, #0]
	}
	HAL_ADC_Stop(&hadc);
 8000cc2:	4b05      	ldr	r3, [pc, #20]	; (8000cd8 <getADCvalue+0x44>)
 8000cc4:	0018      	movs	r0, r3
 8000cc6:	f000 fed3 	bl	8001a70 <HAL_ADC_Stop>

	return adcval;
 8000cca:	1dbb      	adds	r3, r7, #6
 8000ccc:	881b      	ldrh	r3, [r3, #0]
}
 8000cce:	0018      	movs	r0, r3
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	b002      	add	sp, #8
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	46c0      	nop			; (mov r8, r8)
 8000cd8:	200000b8 	.word	0x200000b8

08000cdc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ce0:	b672      	cpsid	i
}
 8000ce2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ce4:	e7fe      	b.n	8000ce4 <Error_Handler+0x8>

08000ce6 <NRF24_init>:
#include "main.h"
#include "nrf24.h"
#include "nrf24_stm32f.h"

void NRF24_init()	//NRF24 Initialization
{
 8000ce6:	b580      	push	{r7, lr}
 8000ce8:	af00      	add	r7, sp, #0
	NRF24_gpio_init();	//Init pin for CSN and CE
 8000cea:	f000 fae5 	bl	80012b8 <NRF24_gpio_init>

	NRF24_chip_disable();
 8000cee:	f000 fb29 	bl	8001344 <NRF24_chip_disable>
	NRF24_reset(NRF24_REG_ALL);	//Reset all Register
 8000cf2:	2020      	movs	r0, #32
 8000cf4:	f000 f822 	bl	8000d3c <NRF24_reset>
	NRF24_write_reg(NRF24_CONFIG, 0);	//Default Configuration (CRC disabled)
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	2000      	movs	r0, #0
 8000cfc:	f000 f923 	bl	8000f46 <NRF24_write_reg>
	NRF24_write_reg(NRF24_EN_AA, 0);	//Auto Acknowledgment disabled
 8000d00:	2100      	movs	r1, #0
 8000d02:	2001      	movs	r0, #1
 8000d04:	f000 f91f 	bl	8000f46 <NRF24_write_reg>
	NRF24_write_reg(NRF24_EN_RXADDR, 0);	//Disable all Data Pipe
 8000d08:	2100      	movs	r1, #0
 8000d0a:	2002      	movs	r0, #2
 8000d0c:	f000 f91b 	bl	8000f46 <NRF24_write_reg>
	NRF24_write_reg(NRF24_SETUP_AW, 0x03);	//Use 5 bytes Address
 8000d10:	2103      	movs	r1, #3
 8000d12:	2003      	movs	r0, #3
 8000d14:	f000 f917 	bl	8000f46 <NRF24_write_reg>
	NRF24_write_reg(NRF24_SETUP_RETR, 0);	//Auto Retransmission disabled
 8000d18:	2100      	movs	r1, #0
 8000d1a:	2004      	movs	r0, #4
 8000d1c:	f000 f913 	bl	8000f46 <NRF24_write_reg>
	NRF24_write_reg(NRF24_RF_CH, 0);		//Set RF Channel to Channel 0 (reconfigured later)
 8000d20:	2100      	movs	r1, #0
 8000d22:	2005      	movs	r0, #5
 8000d24:	f000 f90f 	bl	8000f46 <NRF24_write_reg>
	NRF24_write_reg(NRF24_RF_SETUP, 0x0E);	//Data Rate : 2 Mbps, TX Power : 0 dBm, LNA : low current
 8000d28:	210e      	movs	r1, #14
 8000d2a:	2006      	movs	r0, #6
 8000d2c:	f000 f90b 	bl	8000f46 <NRF24_write_reg>
	NRF24_chip_enable();
 8000d30:	f000 fafa 	bl	8001328 <NRF24_chip_enable>
}
 8000d34:	46c0      	nop			; (mov r8, r8)
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
	...

08000d3c <NRF24_reset>:

void NRF24_reset(uint8_t regrst)	//Reset a Register or all Register
{
 8000d3c:	b5b0      	push	{r4, r5, r7, lr}
 8000d3e:	b090      	sub	sp, #64	; 0x40
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	0002      	movs	r2, r0
 8000d44:	1dfb      	adds	r3, r7, #7
 8000d46:	701a      	strb	r2, [r3, #0]
	/* NRF24 Registers Default Value (REG 0x00 - 0x17)*/
	uint8_t reg_def[] = {0x08,0x3F,0x03,0x03,0x03,0x02,0x0E,0x00,0x00,0x00,  //REG : 0x00 - 0x09
 8000d48:	2024      	movs	r0, #36	; 0x24
 8000d4a:	183b      	adds	r3, r7, r0
 8000d4c:	4a71      	ldr	r2, [pc, #452]	; (8000f14 <NRF24_reset+0x1d8>)
 8000d4e:	ca32      	ldmia	r2!, {r1, r4, r5}
 8000d50:	c332      	stmia	r3!, {r1, r4, r5}
 8000d52:	ca32      	ldmia	r2!, {r1, r4, r5}
 8000d54:	c332      	stmia	r3!, {r1, r4, r5}
						 0x00,0x00,0xC3,0xC4,0xC5,0xC6,0x00,				 //REG : 0x0A - 0x10
						 	 	 	 	 	 	 	 	 	 	 	 	 	 //REG 0x0A,0x0B,0x10 : 5 byte
						 0x00,0x00,0x00,0x00,0x00,0x00,0x11};	    		 //REG : 0x11 - 0x17

	uint8_t rx_addr_p0_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};	//Default values for REG 0x0A (RX_ADDR_P0)
 8000d56:	231c      	movs	r3, #28
 8000d58:	18fb      	adds	r3, r7, r3
 8000d5a:	4a6f      	ldr	r2, [pc, #444]	; (8000f18 <NRF24_reset+0x1dc>)
 8000d5c:	6811      	ldr	r1, [r2, #0]
 8000d5e:	6019      	str	r1, [r3, #0]
 8000d60:	7912      	ldrb	r2, [r2, #4]
 8000d62:	711a      	strb	r2, [r3, #4]
	uint8_t rx_addr_p1_def[5] = {0xC2, 0xC2, 0xC2, 0xC2, 0xC2};	//Default values for REG 0x0B (RX_ADDR_P1)
 8000d64:	2314      	movs	r3, #20
 8000d66:	18fb      	adds	r3, r7, r3
 8000d68:	4a6c      	ldr	r2, [pc, #432]	; (8000f1c <NRF24_reset+0x1e0>)
 8000d6a:	6811      	ldr	r1, [r2, #0]
 8000d6c:	6019      	str	r1, [r3, #0]
 8000d6e:	7912      	ldrb	r2, [r2, #4]
 8000d70:	711a      	strb	r2, [r3, #4]
	uint8_t tx_addr_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};	//Default values for REG 0x10 (TX_ADDR)
 8000d72:	230c      	movs	r3, #12
 8000d74:	18fb      	adds	r3, r7, r3
 8000d76:	4a68      	ldr	r2, [pc, #416]	; (8000f18 <NRF24_reset+0x1dc>)
 8000d78:	6811      	ldr	r1, [r2, #0]
 8000d7a:	6019      	str	r1, [r3, #0]
 8000d7c:	7912      	ldrb	r2, [r2, #4]
 8000d7e:	711a      	strb	r2, [r3, #4]

	uint8_t regidx;

	if((regrst!=NRF24_RX_ADDR_P0) && (regrst!=NRF24_RX_ADDR_P1) && (regrst!=NRF24_TX_ADDR) && (regrst!=NRF24_DYNPD) && (regrst!=NRF24_FEATURE))
 8000d80:	1dfb      	adds	r3, r7, #7
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	2b0a      	cmp	r3, #10
 8000d86:	d01a      	beq.n	8000dbe <NRF24_reset+0x82>
 8000d88:	1dfb      	adds	r3, r7, #7
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	2b0b      	cmp	r3, #11
 8000d8e:	d016      	beq.n	8000dbe <NRF24_reset+0x82>
 8000d90:	1dfb      	adds	r3, r7, #7
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	2b10      	cmp	r3, #16
 8000d96:	d012      	beq.n	8000dbe <NRF24_reset+0x82>
 8000d98:	1dfb      	adds	r3, r7, #7
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	2b1c      	cmp	r3, #28
 8000d9e:	d00e      	beq.n	8000dbe <NRF24_reset+0x82>
 8000da0:	1dfb      	adds	r3, r7, #7
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	2b1d      	cmp	r3, #29
 8000da6:	d00a      	beq.n	8000dbe <NRF24_reset+0x82>
	{
		//Reset a Register between REG 0x00 - 0x17 (except 0x0A, 0x0B, and 0x10)
		NRF24_write_reg(regrst, reg_def[regrst]);
 8000da8:	1dfb      	adds	r3, r7, #7
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	183a      	adds	r2, r7, r0
 8000dae:	5cd2      	ldrb	r2, [r2, r3]
 8000db0:	1dfb      	adds	r3, r7, #7
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	0011      	movs	r1, r2
 8000db6:	0018      	movs	r0, r3
 8000db8:	f000 f8c5 	bl	8000f46 <NRF24_write_reg>
 8000dbc:	e0a5      	b.n	8000f0a <NRF24_reset+0x1ce>
	}

	else if(regrst == NRF24_RX_ADDR_P0)	//Reset for REG 0x0A (RX_ADDR_P0)
 8000dbe:	1dfb      	adds	r3, r7, #7
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	2b0a      	cmp	r3, #10
 8000dc4:	d107      	bne.n	8000dd6 <NRF24_reset+0x9a>
	{
		NRF24_write_regN(NRF24_RX_ADDR_P0, rx_addr_p0_def, 5);	//Reset 5 bytes of RX Pipe 0 Address
 8000dc6:	231c      	movs	r3, #28
 8000dc8:	18fb      	adds	r3, r7, r3
 8000dca:	2205      	movs	r2, #5
 8000dcc:	0019      	movs	r1, r3
 8000dce:	200a      	movs	r0, #10
 8000dd0:	f000 f8db 	bl	8000f8a <NRF24_write_regN>
		}

		NRF24_write_reg(NRF24_DYNPD, 0);	//Reset for REG 0x1C
		NRF24_write_reg(NRF24_FEATURE, 0);	//Reset for REG 0x1D
	}
}
 8000dd4:	e099      	b.n	8000f0a <NRF24_reset+0x1ce>
	else if(regrst == NRF24_RX_ADDR_P1)	//Reset for REG 0x0B (RX_ADDR_P1)
 8000dd6:	1dfb      	adds	r3, r7, #7
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	2b0b      	cmp	r3, #11
 8000ddc:	d107      	bne.n	8000dee <NRF24_reset+0xb2>
		NRF24_write_regN(NRF24_RX_ADDR_P1, rx_addr_p1_def, 5);	//Reset 5 bytes of RX Pipe 1 Address
 8000dde:	2314      	movs	r3, #20
 8000de0:	18fb      	adds	r3, r7, r3
 8000de2:	2205      	movs	r2, #5
 8000de4:	0019      	movs	r1, r3
 8000de6:	200b      	movs	r0, #11
 8000de8:	f000 f8cf 	bl	8000f8a <NRF24_write_regN>
}
 8000dec:	e08d      	b.n	8000f0a <NRF24_reset+0x1ce>
	else if(regrst == NRF24_TX_ADDR)	//Reset for REG 0x10 (TX_ADDR)
 8000dee:	1dfb      	adds	r3, r7, #7
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	2b10      	cmp	r3, #16
 8000df4:	d107      	bne.n	8000e06 <NRF24_reset+0xca>
		NRF24_write_regN(NRF24_TX_ADDR, tx_addr_def, 5);	//Reset 5 bytes of TX Address
 8000df6:	230c      	movs	r3, #12
 8000df8:	18fb      	adds	r3, r7, r3
 8000dfa:	2205      	movs	r2, #5
 8000dfc:	0019      	movs	r1, r3
 8000dfe:	2010      	movs	r0, #16
 8000e00:	f000 f8c3 	bl	8000f8a <NRF24_write_regN>
}
 8000e04:	e081      	b.n	8000f0a <NRF24_reset+0x1ce>
	else if((regrst==NRF24_DYNPD) || (regrst==NRF24_FEATURE))	//Reset for REG 0x1C and 0x1D
 8000e06:	1dfb      	adds	r3, r7, #7
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	2b1c      	cmp	r3, #28
 8000e0c:	d003      	beq.n	8000e16 <NRF24_reset+0xda>
 8000e0e:	1dfb      	adds	r3, r7, #7
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	2b1d      	cmp	r3, #29
 8000e14:	d106      	bne.n	8000e24 <NRF24_reset+0xe8>
		NRF24_write_reg(regrst, 0x00);
 8000e16:	1dfb      	adds	r3, r7, #7
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	0018      	movs	r0, r3
 8000e1e:	f000 f892 	bl	8000f46 <NRF24_write_reg>
 8000e22:	e072      	b.n	8000f0a <NRF24_reset+0x1ce>
		for(regidx=0;regidx<=0x09;regidx++)	//Reset for REG 0x00 - 0x09
 8000e24:	233f      	movs	r3, #63	; 0x3f
 8000e26:	18fb      	adds	r3, r7, r3
 8000e28:	2200      	movs	r2, #0
 8000e2a:	701a      	strb	r2, [r3, #0]
 8000e2c:	e012      	b.n	8000e54 <NRF24_reset+0x118>
			NRF24_write_reg(regidx, reg_def[regidx]);
 8000e2e:	213f      	movs	r1, #63	; 0x3f
 8000e30:	187b      	adds	r3, r7, r1
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	2224      	movs	r2, #36	; 0x24
 8000e36:	18ba      	adds	r2, r7, r2
 8000e38:	5cd2      	ldrb	r2, [r2, r3]
 8000e3a:	000c      	movs	r4, r1
 8000e3c:	187b      	adds	r3, r7, r1
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	0011      	movs	r1, r2
 8000e42:	0018      	movs	r0, r3
 8000e44:	f000 f87f 	bl	8000f46 <NRF24_write_reg>
		for(regidx=0;regidx<=0x09;regidx++)	//Reset for REG 0x00 - 0x09
 8000e48:	0021      	movs	r1, r4
 8000e4a:	187b      	adds	r3, r7, r1
 8000e4c:	781a      	ldrb	r2, [r3, #0]
 8000e4e:	187b      	adds	r3, r7, r1
 8000e50:	3201      	adds	r2, #1
 8000e52:	701a      	strb	r2, [r3, #0]
 8000e54:	243f      	movs	r4, #63	; 0x3f
 8000e56:	193b      	adds	r3, r7, r4
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	2b09      	cmp	r3, #9
 8000e5c:	d9e7      	bls.n	8000e2e <NRF24_reset+0xf2>
		NRF24_write_regN(NRF24_RX_ADDR_P0, rx_addr_p0_def, 5);	//Reset for REG 0x0A
 8000e5e:	231c      	movs	r3, #28
 8000e60:	18fb      	adds	r3, r7, r3
 8000e62:	2205      	movs	r2, #5
 8000e64:	0019      	movs	r1, r3
 8000e66:	200a      	movs	r0, #10
 8000e68:	f000 f88f 	bl	8000f8a <NRF24_write_regN>
		NRF24_write_regN(NRF24_RX_ADDR_P1, rx_addr_p1_def, 5);	//Reset for REG 0x0B
 8000e6c:	2314      	movs	r3, #20
 8000e6e:	18fb      	adds	r3, r7, r3
 8000e70:	2205      	movs	r2, #5
 8000e72:	0019      	movs	r1, r3
 8000e74:	200b      	movs	r0, #11
 8000e76:	f000 f888 	bl	8000f8a <NRF24_write_regN>
		for(regidx=0x0C;regidx<=0x0F;regidx++)	//Reset for REG 0x0C - 0x0F
 8000e7a:	193b      	adds	r3, r7, r4
 8000e7c:	220c      	movs	r2, #12
 8000e7e:	701a      	strb	r2, [r3, #0]
 8000e80:	e012      	b.n	8000ea8 <NRF24_reset+0x16c>
			NRF24_write_reg(regidx, reg_def[regidx]);
 8000e82:	213f      	movs	r1, #63	; 0x3f
 8000e84:	187b      	adds	r3, r7, r1
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	2224      	movs	r2, #36	; 0x24
 8000e8a:	18ba      	adds	r2, r7, r2
 8000e8c:	5cd2      	ldrb	r2, [r2, r3]
 8000e8e:	000c      	movs	r4, r1
 8000e90:	187b      	adds	r3, r7, r1
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	0011      	movs	r1, r2
 8000e96:	0018      	movs	r0, r3
 8000e98:	f000 f855 	bl	8000f46 <NRF24_write_reg>
		for(regidx=0x0C;regidx<=0x0F;regidx++)	//Reset for REG 0x0C - 0x0F
 8000e9c:	0021      	movs	r1, r4
 8000e9e:	187b      	adds	r3, r7, r1
 8000ea0:	781a      	ldrb	r2, [r3, #0]
 8000ea2:	187b      	adds	r3, r7, r1
 8000ea4:	3201      	adds	r2, #1
 8000ea6:	701a      	strb	r2, [r3, #0]
 8000ea8:	243f      	movs	r4, #63	; 0x3f
 8000eaa:	193b      	adds	r3, r7, r4
 8000eac:	781b      	ldrb	r3, [r3, #0]
 8000eae:	2b0f      	cmp	r3, #15
 8000eb0:	d9e7      	bls.n	8000e82 <NRF24_reset+0x146>
		NRF24_write_regN(NRF24_TX_ADDR, tx_addr_def, 5);	//Reset for REG 0x10
 8000eb2:	230c      	movs	r3, #12
 8000eb4:	18fb      	adds	r3, r7, r3
 8000eb6:	2205      	movs	r2, #5
 8000eb8:	0019      	movs	r1, r3
 8000eba:	2010      	movs	r0, #16
 8000ebc:	f000 f865 	bl	8000f8a <NRF24_write_regN>
		for(regidx=0x11;regidx<=0x17;regidx++)	//Reset for REG 0x11 - 0x17
 8000ec0:	193b      	adds	r3, r7, r4
 8000ec2:	2211      	movs	r2, #17
 8000ec4:	701a      	strb	r2, [r3, #0]
 8000ec6:	e012      	b.n	8000eee <NRF24_reset+0x1b2>
			NRF24_write_reg(regidx, reg_def[regidx]);
 8000ec8:	213f      	movs	r1, #63	; 0x3f
 8000eca:	187b      	adds	r3, r7, r1
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	2224      	movs	r2, #36	; 0x24
 8000ed0:	18ba      	adds	r2, r7, r2
 8000ed2:	5cd2      	ldrb	r2, [r2, r3]
 8000ed4:	000c      	movs	r4, r1
 8000ed6:	187b      	adds	r3, r7, r1
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	0011      	movs	r1, r2
 8000edc:	0018      	movs	r0, r3
 8000ede:	f000 f832 	bl	8000f46 <NRF24_write_reg>
		for(regidx=0x11;regidx<=0x17;regidx++)	//Reset for REG 0x11 - 0x17
 8000ee2:	0021      	movs	r1, r4
 8000ee4:	187b      	adds	r3, r7, r1
 8000ee6:	781a      	ldrb	r2, [r3, #0]
 8000ee8:	187b      	adds	r3, r7, r1
 8000eea:	3201      	adds	r2, #1
 8000eec:	701a      	strb	r2, [r3, #0]
 8000eee:	233f      	movs	r3, #63	; 0x3f
 8000ef0:	18fb      	adds	r3, r7, r3
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	2b17      	cmp	r3, #23
 8000ef6:	d9e7      	bls.n	8000ec8 <NRF24_reset+0x18c>
		NRF24_write_reg(NRF24_DYNPD, 0);	//Reset for REG 0x1C
 8000ef8:	2100      	movs	r1, #0
 8000efa:	201c      	movs	r0, #28
 8000efc:	f000 f823 	bl	8000f46 <NRF24_write_reg>
		NRF24_write_reg(NRF24_FEATURE, 0);	//Reset for REG 0x1D
 8000f00:	2100      	movs	r1, #0
 8000f02:	201d      	movs	r0, #29
 8000f04:	f000 f81f 	bl	8000f46 <NRF24_write_reg>
}
 8000f08:	e7ff      	b.n	8000f0a <NRF24_reset+0x1ce>
 8000f0a:	46c0      	nop			; (mov r8, r8)
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	b010      	add	sp, #64	; 0x40
 8000f10:	bdb0      	pop	{r4, r5, r7, pc}
 8000f12:	46c0      	nop			; (mov r8, r8)
 8000f14:	08003c94 	.word	0x08003c94
 8000f18:	08003cac 	.word	0x08003cac
 8000f1c:	08003cb4 	.word	0x08003cb4

08000f20 <NRF24_send_cmd>:


void NRF24_send_cmd(uint8_t cmd)	//Send a Command
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	0002      	movs	r2, r0
 8000f28:	1dfb      	adds	r3, r7, #7
 8000f2a:	701a      	strb	r2, [r3, #0]
	NRF24_chip_select();
 8000f2c:	f000 fa18 	bl	8001360 <NRF24_chip_select>

	NRF24_SPI_send(cmd);	//Send a Single byte Command via SPI
 8000f30:	1dfb      	adds	r3, r7, #7
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	0018      	movs	r0, r3
 8000f36:	f000 fa2f 	bl	8001398 <NRF24_SPI_send>

	NRF24_chip_deselect();
 8000f3a:	f000 fa1f 	bl	800137c <NRF24_chip_deselect>
}
 8000f3e:	46c0      	nop			; (mov r8, r8)
 8000f40:	46bd      	mov	sp, r7
 8000f42:	b002      	add	sp, #8
 8000f44:	bd80      	pop	{r7, pc}

08000f46 <NRF24_write_reg>:

void NRF24_write_reg(uint8_t reg, uint8_t dat)	//Write Single byte to a Register
{
 8000f46:	b590      	push	{r4, r7, lr}
 8000f48:	b085      	sub	sp, #20
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	0002      	movs	r2, r0
 8000f4e:	1dfb      	adds	r3, r7, #7
 8000f50:	701a      	strb	r2, [r3, #0]
 8000f52:	1dbb      	adds	r3, r7, #6
 8000f54:	1c0a      	adds	r2, r1, #0
 8000f56:	701a      	strb	r2, [r3, #0]
	uint8_t regbuf[2];
	regbuf[0] = reg|0x20;	//001AAAAA -> Write Register identifier
 8000f58:	1dfb      	adds	r3, r7, #7
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	2220      	movs	r2, #32
 8000f5e:	4313      	orrs	r3, r2
 8000f60:	b2da      	uxtb	r2, r3
 8000f62:	240c      	movs	r4, #12
 8000f64:	193b      	adds	r3, r7, r4
 8000f66:	701a      	strb	r2, [r3, #0]
	regbuf[1] = dat;		//Data for Register
 8000f68:	193b      	adds	r3, r7, r4
 8000f6a:	1dba      	adds	r2, r7, #6
 8000f6c:	7812      	ldrb	r2, [r2, #0]
 8000f6e:	705a      	strb	r2, [r3, #1]

	NRF24_chip_select();
 8000f70:	f000 f9f6 	bl	8001360 <NRF24_chip_select>

	NRF24_SPI_sendN(regbuf, 2);	//Send Register and Data via SPI
 8000f74:	193b      	adds	r3, r7, r4
 8000f76:	2102      	movs	r1, #2
 8000f78:	0018      	movs	r0, r3
 8000f7a:	f000 fa1f 	bl	80013bc <NRF24_SPI_sendN>

	NRF24_chip_deselect();
 8000f7e:	f000 f9fd 	bl	800137c <NRF24_chip_deselect>
}
 8000f82:	46c0      	nop			; (mov r8, r8)
 8000f84:	46bd      	mov	sp, r7
 8000f86:	b005      	add	sp, #20
 8000f88:	bd90      	pop	{r4, r7, pc}

08000f8a <NRF24_write_regN>:

void NRF24_write_regN(uint8_t reg, uint8_t *Mdat, uint8_t Ndat)	//Write Multiple byte to a Register
{
 8000f8a:	b590      	push	{r4, r7, lr}
 8000f8c:	b085      	sub	sp, #20
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	6039      	str	r1, [r7, #0]
 8000f92:	0011      	movs	r1, r2
 8000f94:	1dfb      	adds	r3, r7, #7
 8000f96:	1c02      	adds	r2, r0, #0
 8000f98:	701a      	strb	r2, [r3, #0]
 8000f9a:	1dbb      	adds	r3, r7, #6
 8000f9c:	1c0a      	adds	r2, r1, #0
 8000f9e:	701a      	strb	r2, [r3, #0]
	uint8_t regbuf;
	regbuf = reg|0x20;	//001AAAAA -> Write Register identifier
 8000fa0:	240f      	movs	r4, #15
 8000fa2:	193b      	adds	r3, r7, r4
 8000fa4:	1dfa      	adds	r2, r7, #7
 8000fa6:	7812      	ldrb	r2, [r2, #0]
 8000fa8:	2120      	movs	r1, #32
 8000faa:	430a      	orrs	r2, r1
 8000fac:	701a      	strb	r2, [r3, #0]

	NRF24_chip_select();
 8000fae:	f000 f9d7 	bl	8001360 <NRF24_chip_select>

	NRF24_SPI_send(regbuf);	//Send Register via SPI
 8000fb2:	193b      	adds	r3, r7, r4
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	0018      	movs	r0, r3
 8000fb8:	f000 f9ee 	bl	8001398 <NRF24_SPI_send>
	NRF24_SPI_sendN(Mdat, Ndat); //Send Multiple Data of Register via SPI
 8000fbc:	1dbb      	adds	r3, r7, #6
 8000fbe:	781a      	ldrb	r2, [r3, #0]
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	0011      	movs	r1, r2
 8000fc4:	0018      	movs	r0, r3
 8000fc6:	f000 f9f9 	bl	80013bc <NRF24_SPI_sendN>

	NRF24_chip_deselect();
 8000fca:	f000 f9d7 	bl	800137c <NRF24_chip_deselect>
}
 8000fce:	46c0      	nop			; (mov r8, r8)
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	b005      	add	sp, #20
 8000fd4:	bd90      	pop	{r4, r7, pc}

08000fd6 <NRF24_read_reg>:

uint8_t NRF24_read_reg(uint8_t reg)	//Read Single byte from a Register
{
 8000fd6:	b5b0      	push	{r4, r5, r7, lr}
 8000fd8:	b084      	sub	sp, #16
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	0002      	movs	r2, r0
 8000fde:	1dfb      	adds	r3, r7, #7
 8000fe0:	701a      	strb	r2, [r3, #0]
	uint8_t dat = 0;
 8000fe2:	240f      	movs	r4, #15
 8000fe4:	193b      	adds	r3, r7, r4
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	701a      	strb	r2, [r3, #0]

	NRF24_chip_select();
 8000fea:	f000 f9b9 	bl	8001360 <NRF24_chip_select>

	NRF24_SPI_send(reg); //Send Register via SPI
 8000fee:	1dfb      	adds	r3, r7, #7
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	0018      	movs	r0, r3
 8000ff4:	f000 f9d0 	bl	8001398 <NRF24_SPI_send>
	dat = NRF24_SPI_recv(); //Receive Single byte Data of Register via SPI
 8000ff8:	0025      	movs	r5, r4
 8000ffa:	193c      	adds	r4, r7, r4
 8000ffc:	f000 f9f4 	bl	80013e8 <NRF24_SPI_recv>
 8001000:	0003      	movs	r3, r0
 8001002:	7023      	strb	r3, [r4, #0]

	NRF24_chip_deselect();
 8001004:	f000 f9ba 	bl	800137c <NRF24_chip_deselect>

	return dat;
 8001008:	197b      	adds	r3, r7, r5
 800100a:	781b      	ldrb	r3, [r3, #0]
}
 800100c:	0018      	movs	r0, r3
 800100e:	46bd      	mov	sp, r7
 8001010:	b004      	add	sp, #16
 8001012:	bdb0      	pop	{r4, r5, r7, pc}

08001014 <NRF24_TXmode>:
	NRF24_chip_deselect();
}


void NRF24_TXmode(uint8_t ch, uint8_t *addr)	//Set as Transmitter
{
 8001014:	b5b0      	push	{r4, r5, r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0
 800101a:	0002      	movs	r2, r0
 800101c:	6039      	str	r1, [r7, #0]
 800101e:	1dfb      	adds	r3, r7, #7
 8001020:	701a      	strb	r2, [r3, #0]
	uint8_t config;

	NRF24_chip_disable();
 8001022:	f000 f98f 	bl	8001344 <NRF24_chip_disable>

	NRF24_write_reg(NRF24_RF_CH, ch);	//Select Channel
 8001026:	1dfb      	adds	r3, r7, #7
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	0019      	movs	r1, r3
 800102c:	2005      	movs	r0, #5
 800102e:	f7ff ff8a 	bl	8000f46 <NRF24_write_reg>
	NRF24_write_regN(NRF24_TX_ADDR, addr, 5);	//Write 5 bytes of TX Address
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	2205      	movs	r2, #5
 8001036:	0019      	movs	r1, r3
 8001038:	2010      	movs	r0, #16
 800103a:	f7ff ffa6 	bl	8000f8a <NRF24_write_regN>

	//Set TX Configuration : Enable RF Power and Disable Primary RX
	config = NRF24_read_reg(NRF24_CONFIG);
 800103e:	250f      	movs	r5, #15
 8001040:	197c      	adds	r4, r7, r5
 8001042:	2000      	movs	r0, #0
 8001044:	f7ff ffc7 	bl	8000fd6 <NRF24_read_reg>
 8001048:	0003      	movs	r3, r0
 800104a:	7023      	strb	r3, [r4, #0]
	config = (config | 0x02) & 0xFE; //PWR_UP = 1; PRIM_RX = 0
 800104c:	0029      	movs	r1, r5
 800104e:	187b      	adds	r3, r7, r1
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	2202      	movs	r2, #2
 8001054:	4313      	orrs	r3, r2
 8001056:	b2da      	uxtb	r2, r3
 8001058:	0008      	movs	r0, r1
 800105a:	187b      	adds	r3, r7, r1
 800105c:	2101      	movs	r1, #1
 800105e:	438a      	bics	r2, r1
 8001060:	701a      	strb	r2, [r3, #0]
	NRF24_write_reg(NRF24_CONFIG, config);
 8001062:	183b      	adds	r3, r7, r0
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	0019      	movs	r1, r3
 8001068:	2000      	movs	r0, #0
 800106a:	f7ff ff6c 	bl	8000f46 <NRF24_write_reg>

	NRF24_chip_enable();
 800106e:	f000 f95b 	bl	8001328 <NRF24_chip_enable>
}
 8001072:	46c0      	nop			; (mov r8, r8)
 8001074:	46bd      	mov	sp, r7
 8001076:	b004      	add	sp, #16
 8001078:	bdb0      	pop	{r4, r5, r7, pc}

0800107a <NRF24_TX>:

uint8_t NRF24_TX(uint8_t *Mdat, uint8_t datlen)	//Transmit some byte of Data
{
 800107a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800107c:	b085      	sub	sp, #20
 800107e:	af00      	add	r7, sp, #0
 8001080:	6078      	str	r0, [r7, #4]
 8001082:	000a      	movs	r2, r1
 8001084:	1cfb      	adds	r3, r7, #3
 8001086:	701a      	strb	r2, [r3, #0]
	uint8_t cmd,fifost;

	NRF24_chip_select();
 8001088:	f000 f96a 	bl	8001360 <NRF24_chip_select>

	//Send TX Payload Data
	cmd = NRF24_W_TX_PAYLOAD;
 800108c:	250f      	movs	r5, #15
 800108e:	197b      	adds	r3, r7, r5
 8001090:	22a0      	movs	r2, #160	; 0xa0
 8001092:	701a      	strb	r2, [r3, #0]
	NRF24_SPI_send(cmd);	//Command for Write Payload
 8001094:	197b      	adds	r3, r7, r5
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	0018      	movs	r0, r3
 800109a:	f000 f97d 	bl	8001398 <NRF24_SPI_send>
	NRF24_SPI_sendN(Mdat, datlen); 	//Data size = datlen
 800109e:	1cfb      	adds	r3, r7, #3
 80010a0:	781a      	ldrb	r2, [r3, #0]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	0011      	movs	r1, r2
 80010a6:	0018      	movs	r0, r3
 80010a8:	f000 f988 	bl	80013bc <NRF24_SPI_sendN>

	NRF24_chip_deselect();
 80010ac:	f000 f966 	bl	800137c <NRF24_chip_deselect>

	HAL_Delay(1);
 80010b0:	2001      	movs	r0, #1
 80010b2:	f000 fb25 	bl	8001700 <HAL_Delay>

	fifost = NRF24_read_reg(NRF24_FIFO_STATUS);
 80010b6:	260e      	movs	r6, #14
 80010b8:	19bc      	adds	r4, r7, r6
 80010ba:	2017      	movs	r0, #23
 80010bc:	f7ff ff8b 	bl	8000fd6 <NRF24_read_reg>
 80010c0:	0003      	movs	r3, r0
 80010c2:	7023      	strb	r3, [r4, #0]

	if((fifost&(1<<4))&&(!(fifost&(1<<3)))) //Check if TX FIFO is empty
 80010c4:	0031      	movs	r1, r6
 80010c6:	187b      	adds	r3, r7, r1
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	2210      	movs	r2, #16
 80010cc:	4013      	ands	r3, r2
 80010ce:	d011      	beq.n	80010f4 <NRF24_TX+0x7a>
 80010d0:	187b      	adds	r3, r7, r1
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	2208      	movs	r2, #8
 80010d6:	4013      	ands	r3, r2
 80010d8:	d10c      	bne.n	80010f4 <NRF24_TX+0x7a>
	{
		cmd = NRF24_FLUSH_TX;
 80010da:	197b      	adds	r3, r7, r5
 80010dc:	22e1      	movs	r2, #225	; 0xe1
 80010de:	701a      	strb	r2, [r3, #0]
		NRF24_send_cmd(cmd);	//Flush TX FIFO after used
 80010e0:	197b      	adds	r3, r7, r5
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	0018      	movs	r0, r3
 80010e6:	f7ff ff1b 	bl	8000f20 <NRF24_send_cmd>
		NRF24_reset(NRF24_FIFO_STATUS);	//Reset REG FIFO_STATUS
 80010ea:	2017      	movs	r0, #23
 80010ec:	f7ff fe26 	bl	8000d3c <NRF24_reset>

		return 1;
 80010f0:	2301      	movs	r3, #1
 80010f2:	e000      	b.n	80010f6 <NRF24_TX+0x7c>
	}

	return 0;
 80010f4:	2300      	movs	r3, #0
}
 80010f6:	0018      	movs	r0, r3
 80010f8:	46bd      	mov	sp, r7
 80010fa:	b005      	add	sp, #20
 80010fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001100 <NRF24_RXmode>:

void NRF24_RXmode(uint8_t ch, uint8_t npipe, uint8_t *addr, uint8_t ploadlen)	//Set as Receiver
{
 8001100:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001102:	b087      	sub	sp, #28
 8001104:	af00      	add	r7, sp, #0
 8001106:	0004      	movs	r4, r0
 8001108:	0008      	movs	r0, r1
 800110a:	603a      	str	r2, [r7, #0]
 800110c:	0019      	movs	r1, r3
 800110e:	1dfb      	adds	r3, r7, #7
 8001110:	1c22      	adds	r2, r4, #0
 8001112:	701a      	strb	r2, [r3, #0]
 8001114:	1dbb      	adds	r3, r7, #6
 8001116:	1c02      	adds	r2, r0, #0
 8001118:	701a      	strb	r2, [r3, #0]
 800111a:	1d7b      	adds	r3, r7, #5
 800111c:	1c0a      	adds	r2, r1, #0
 800111e:	701a      	strb	r2, [r3, #0]
	uint8_t en_rxaddr, config;
	uint8_t pipeNaddr[6] = {NRF24_RX_ADDR_P0,NRF24_RX_ADDR_P1,NRF24_RX_ADDR_P2,NRF24_RX_ADDR_P3,NRF24_RX_ADDR_P4,NRF24_RX_ADDR_P5};	//Pipe N Address
 8001120:	2610      	movs	r6, #16
 8001122:	19bb      	adds	r3, r7, r6
 8001124:	4a3a      	ldr	r2, [pc, #232]	; (8001210 <NRF24_RXmode+0x110>)
 8001126:	6811      	ldr	r1, [r2, #0]
 8001128:	6019      	str	r1, [r3, #0]
 800112a:	8892      	ldrh	r2, [r2, #4]
 800112c:	809a      	strh	r2, [r3, #4]
	uint8_t pipeNpload[6] = {NRF24_RX_PW_P0,NRF24_RX_PW_P1,NRF24_RX_PW_P2,NRF24_RX_PW_P3,NRF24_RX_PW_P4,NRF24_RX_PW_P5};	//Pipe N Payload Data size
 800112e:	2308      	movs	r3, #8
 8001130:	18fb      	adds	r3, r7, r3
 8001132:	4a38      	ldr	r2, [pc, #224]	; (8001214 <NRF24_RXmode+0x114>)
 8001134:	6811      	ldr	r1, [r2, #0]
 8001136:	6019      	str	r1, [r3, #0]
 8001138:	8892      	ldrh	r2, [r2, #4]
 800113a:	809a      	strh	r2, [r3, #4]

	NRF24_chip_disable();
 800113c:	f000 f902 	bl	8001344 <NRF24_chip_disable>

	NRF24_reset(NRF24_STATUS); //Reset REG STATUS
 8001140:	2007      	movs	r0, #7
 8001142:	f7ff fdfb 	bl	8000d3c <NRF24_reset>
	NRF24_write_reg(NRF24_RF_CH, ch); //Select Channel
 8001146:	1dfb      	adds	r3, r7, #7
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	0019      	movs	r1, r3
 800114c:	2005      	movs	r0, #5
 800114e:	f7ff fefa 	bl	8000f46 <NRF24_write_reg>

	//Select Data Pipe
	en_rxaddr = NRF24_read_reg(NRF24_EN_RXADDR);
 8001152:	2517      	movs	r5, #23
 8001154:	197c      	adds	r4, r7, r5
 8001156:	2002      	movs	r0, #2
 8001158:	f7ff ff3d 	bl	8000fd6 <NRF24_read_reg>
 800115c:	0003      	movs	r3, r0
 800115e:	7023      	strb	r3, [r4, #0]
	en_rxaddr = en_rxaddr | (1<<npipe); //select Data Pipe N
 8001160:	1dbb      	adds	r3, r7, #6
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	2201      	movs	r2, #1
 8001166:	409a      	lsls	r2, r3
 8001168:	0013      	movs	r3, r2
 800116a:	b25a      	sxtb	r2, r3
 800116c:	197b      	adds	r3, r7, r5
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	b25b      	sxtb	r3, r3
 8001172:	4313      	orrs	r3, r2
 8001174:	b25a      	sxtb	r2, r3
 8001176:	197b      	adds	r3, r7, r5
 8001178:	701a      	strb	r2, [r3, #0]
	NRF24_write_reg(NRF24_EN_RXADDR, en_rxaddr);
 800117a:	197b      	adds	r3, r7, r5
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	0019      	movs	r1, r3
 8001180:	2002      	movs	r0, #2
 8001182:	f7ff fee0 	bl	8000f46 <NRF24_write_reg>

	//Write Data Pipe Address
	if(npipe<2) //for Pipe 0 and 1
 8001186:	1dbb      	adds	r3, r7, #6
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	2b01      	cmp	r3, #1
 800118c:	d809      	bhi.n	80011a2 <NRF24_RXmode+0xa2>
		{
			NRF24_write_regN(pipeNaddr[npipe], addr, 5); //write Pipe N address
 800118e:	1dbb      	adds	r3, r7, #6
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	19ba      	adds	r2, r7, r6
 8001194:	5cd3      	ldrb	r3, [r2, r3]
 8001196:	6839      	ldr	r1, [r7, #0]
 8001198:	2205      	movs	r2, #5
 800119a:	0018      	movs	r0, r3
 800119c:	f7ff fef5 	bl	8000f8a <NRF24_write_regN>
 80011a0:	e010      	b.n	80011c4 <NRF24_RXmode+0xc4>
		}
	else 		//for Pipe 2-5
		{
			NRF24_write_regN(NRF24_RX_ADDR_P1, addr, 5); //first, write Pipe 1 address
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	2205      	movs	r2, #5
 80011a6:	0019      	movs	r1, r3
 80011a8:	200b      	movs	r0, #11
 80011aa:	f7ff feee 	bl	8000f8a <NRF24_write_regN>
			NRF24_write_reg(pipeNaddr[npipe], addr[0]); //then, write Pipe N address LSB
 80011ae:	1dbb      	adds	r3, r7, #6
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	2210      	movs	r2, #16
 80011b4:	18ba      	adds	r2, r7, r2
 80011b6:	5cd2      	ldrb	r2, [r2, r3]
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	0019      	movs	r1, r3
 80011be:	0010      	movs	r0, r2
 80011c0:	f7ff fec1 	bl	8000f46 <NRF24_write_reg>
		}

	//Set Pipe Payload size/length
	NRF24_write_reg(pipeNpload[npipe], ploadlen); //Pipe N Payload size (max 32 bit)
 80011c4:	1dbb      	adds	r3, r7, #6
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	2208      	movs	r2, #8
 80011ca:	18ba      	adds	r2, r7, r2
 80011cc:	5cd2      	ldrb	r2, [r2, r3]
 80011ce:	1d7b      	adds	r3, r7, #5
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	0019      	movs	r1, r3
 80011d4:	0010      	movs	r0, r2
 80011d6:	f7ff feb6 	bl	8000f46 <NRF24_write_reg>

	//Set TX Configuration : Enable RF Power and Primary RX
	config = NRF24_read_reg(NRF24_CONFIG);
 80011da:	2516      	movs	r5, #22
 80011dc:	197c      	adds	r4, r7, r5
 80011de:	2000      	movs	r0, #0
 80011e0:	f7ff fef9 	bl	8000fd6 <NRF24_read_reg>
 80011e4:	0003      	movs	r3, r0
 80011e6:	7023      	strb	r3, [r4, #0]
	config = config | 0x03; //PWR_UP = 1; PRIM_RX = 1
 80011e8:	0028      	movs	r0, r5
 80011ea:	183b      	adds	r3, r7, r0
 80011ec:	183a      	adds	r2, r7, r0
 80011ee:	7812      	ldrb	r2, [r2, #0]
 80011f0:	2103      	movs	r1, #3
 80011f2:	430a      	orrs	r2, r1
 80011f4:	701a      	strb	r2, [r3, #0]
	NRF24_write_reg(NRF24_CONFIG, config);
 80011f6:	183b      	adds	r3, r7, r0
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	0019      	movs	r1, r3
 80011fc:	2000      	movs	r0, #0
 80011fe:	f7ff fea2 	bl	8000f46 <NRF24_write_reg>

	NRF24_chip_enable();
 8001202:	f000 f891 	bl	8001328 <NRF24_chip_enable>
}
 8001206:	46c0      	nop			; (mov r8, r8)
 8001208:	46bd      	mov	sp, r7
 800120a:	b007      	add	sp, #28
 800120c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800120e:	46c0      	nop			; (mov r8, r8)
 8001210:	08003cbc 	.word	0x08003cbc
 8001214:	08003cc4 	.word	0x08003cc4

08001218 <NRF24_checkpipe>:

uint8_t NRF24_checkpipe(uint8_t npipe)	//Check if Data is available in any Pipe
{
 8001218:	b5b0      	push	{r4, r5, r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0
 800121e:	0002      	movs	r2, r0
 8001220:	1dfb      	adds	r3, r7, #7
 8001222:	701a      	strb	r2, [r3, #0]
	uint8_t status;
	status = NRF24_read_reg(NRF24_STATUS);
 8001224:	250f      	movs	r5, #15
 8001226:	197c      	adds	r4, r7, r5
 8001228:	2007      	movs	r0, #7
 800122a:	f7ff fed4 	bl	8000fd6 <NRF24_read_reg>
 800122e:	0003      	movs	r3, r0
 8001230:	7023      	strb	r3, [r4, #0]

	//Check RX_DR -> Check if Data ready in RX FIFO
	//Check if Data Pipe is ready
	if((status&(1<<6))&&(status&(npipe<<1)))
 8001232:	0029      	movs	r1, r5
 8001234:	187b      	adds	r3, r7, r1
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	2240      	movs	r2, #64	; 0x40
 800123a:	4013      	ands	r3, r2
 800123c:	d00c      	beq.n	8001258 <NRF24_checkpipe+0x40>
 800123e:	187b      	adds	r3, r7, r1
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	1dfa      	adds	r2, r7, #7
 8001244:	7812      	ldrb	r2, [r2, #0]
 8001246:	0052      	lsls	r2, r2, #1
 8001248:	4013      	ands	r3, r2
 800124a:	d005      	beq.n	8001258 <NRF24_checkpipe+0x40>
	{
		NRF24_write_reg(NRF24_STATUS, (1<<6));	//Write 1 to clear RX_DR
 800124c:	2140      	movs	r1, #64	; 0x40
 800124e:	2007      	movs	r0, #7
 8001250:	f7ff fe79 	bl	8000f46 <NRF24_write_reg>
		return 1;
 8001254:	2301      	movs	r3, #1
 8001256:	e000      	b.n	800125a <NRF24_checkpipe+0x42>
	}

	return 0;
 8001258:	2300      	movs	r3, #0
}
 800125a:	0018      	movs	r0, r3
 800125c:	46bd      	mov	sp, r7
 800125e:	b004      	add	sp, #16
 8001260:	bdb0      	pop	{r4, r5, r7, pc}

08001262 <NRF24_RX>:

void NRF24_RX(uint8_t *Mdat, uint8_t datlen)	//Receive some byte of Data
{
 8001262:	b590      	push	{r4, r7, lr}
 8001264:	b085      	sub	sp, #20
 8001266:	af00      	add	r7, sp, #0
 8001268:	6078      	str	r0, [r7, #4]
 800126a:	000a      	movs	r2, r1
 800126c:	1cfb      	adds	r3, r7, #3
 800126e:	701a      	strb	r2, [r3, #0]
	uint8_t cmd;

	NRF24_chip_select();
 8001270:	f000 f876 	bl	8001360 <NRF24_chip_select>

	//Receive TX Payload Data
	cmd = NRF24_R_RX_PAYLOAD;
 8001274:	240f      	movs	r4, #15
 8001276:	193b      	adds	r3, r7, r4
 8001278:	2261      	movs	r2, #97	; 0x61
 800127a:	701a      	strb	r2, [r3, #0]
	NRF24_SPI_send(cmd);	//Command for Read Payload
 800127c:	193b      	adds	r3, r7, r4
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	0018      	movs	r0, r3
 8001282:	f000 f889 	bl	8001398 <NRF24_SPI_send>
	NRF24_SPI_recvN(Mdat, datlen); 	//Data size = datlen
 8001286:	1cfb      	adds	r3, r7, #3
 8001288:	781a      	ldrb	r2, [r3, #0]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	0011      	movs	r1, r2
 800128e:	0018      	movs	r0, r3
 8001290:	f000 f8be 	bl	8001410 <NRF24_SPI_recvN>

	NRF24_chip_deselect();
 8001294:	f000 f872 	bl	800137c <NRF24_chip_deselect>

	HAL_Delay(1);
 8001298:	2001      	movs	r0, #1
 800129a:	f000 fa31 	bl	8001700 <HAL_Delay>

	cmd = NRF24_FLUSH_RX;
 800129e:	193b      	adds	r3, r7, r4
 80012a0:	22e2      	movs	r2, #226	; 0xe2
 80012a2:	701a      	strb	r2, [r3, #0]
	NRF24_send_cmd(cmd);	//Flush RX FIFO after used
 80012a4:	193b      	adds	r3, r7, r4
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	0018      	movs	r0, r3
 80012aa:	f7ff fe39 	bl	8000f20 <NRF24_send_cmd>
}
 80012ae:	46c0      	nop			; (mov r8, r8)
 80012b0:	46bd      	mov	sp, r7
 80012b2:	b005      	add	sp, #20
 80012b4:	bd90      	pop	{r4, r7, pc}
	...

080012b8 <NRF24_gpio_init>:

#include "main.h"
#include "nrf24_stm32f.h"

void NRF24_gpio_init() // Init Function for CSN and CE
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b086      	sub	sp, #24
 80012bc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012be:	1d3b      	adds	r3, r7, #4
 80012c0:	0018      	movs	r0, r3
 80012c2:	2314      	movs	r3, #20
 80012c4:	001a      	movs	r2, r3
 80012c6:	2100      	movs	r1, #0
 80012c8:	f002 fcbe 	bl	8003c48 <memset>

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOF_CLK_ENABLE();
 80012cc:	4b14      	ldr	r3, [pc, #80]	; (8001320 <NRF24_gpio_init+0x68>)
 80012ce:	695a      	ldr	r2, [r3, #20]
 80012d0:	4b13      	ldr	r3, [pc, #76]	; (8001320 <NRF24_gpio_init+0x68>)
 80012d2:	2180      	movs	r1, #128	; 0x80
 80012d4:	03c9      	lsls	r1, r1, #15
 80012d6:	430a      	orrs	r2, r1
 80012d8:	615a      	str	r2, [r3, #20]
 80012da:	4b11      	ldr	r3, [pc, #68]	; (8001320 <NRF24_gpio_init+0x68>)
 80012dc:	695a      	ldr	r2, [r3, #20]
 80012de:	2380      	movs	r3, #128	; 0x80
 80012e0:	03db      	lsls	r3, r3, #15
 80012e2:	4013      	ands	r3, r2
 80012e4:	603b      	str	r3, [r7, #0]
 80012e6:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(NRF24CTRL, NRF24_CSN|NRF24_CE, GPIO_PIN_RESET);
 80012e8:	4b0e      	ldr	r3, [pc, #56]	; (8001324 <NRF24_gpio_init+0x6c>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	2103      	movs	r1, #3
 80012ee:	0018      	movs	r0, r3
 80012f0:	f001 f91b 	bl	800252a <HAL_GPIO_WritePin>

	/*Configure GPIO pins : PF0 PF1 */
	GPIO_InitStruct.Pin = NRF24_CSN|NRF24_CE;
 80012f4:	1d3b      	adds	r3, r7, #4
 80012f6:	2203      	movs	r2, #3
 80012f8:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012fa:	1d3b      	adds	r3, r7, #4
 80012fc:	2201      	movs	r2, #1
 80012fe:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001300:	1d3b      	adds	r3, r7, #4
 8001302:	2200      	movs	r2, #0
 8001304:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001306:	1d3b      	adds	r3, r7, #4
 8001308:	2200      	movs	r2, #0
 800130a:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(NRF24CTRL, &GPIO_InitStruct);
 800130c:	1d3b      	adds	r3, r7, #4
 800130e:	4a05      	ldr	r2, [pc, #20]	; (8001324 <NRF24_gpio_init+0x6c>)
 8001310:	0019      	movs	r1, r3
 8001312:	0010      	movs	r0, r2
 8001314:	f000 ff7c 	bl	8002210 <HAL_GPIO_Init>
}
 8001318:	46c0      	nop			; (mov r8, r8)
 800131a:	46bd      	mov	sp, r7
 800131c:	b006      	add	sp, #24
 800131e:	bd80      	pop	{r7, pc}
 8001320:	40021000 	.word	0x40021000
 8001324:	48001400 	.word	0x48001400

08001328 <NRF24_chip_enable>:


void NRF24_chip_enable()	//NRF24-CE = 1
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24CTRL, NRF24_CE, GPIO_PIN_SET);
 800132c:	4b04      	ldr	r3, [pc, #16]	; (8001340 <NRF24_chip_enable+0x18>)
 800132e:	2201      	movs	r2, #1
 8001330:	2102      	movs	r1, #2
 8001332:	0018      	movs	r0, r3
 8001334:	f001 f8f9 	bl	800252a <HAL_GPIO_WritePin>
}
 8001338:	46c0      	nop			; (mov r8, r8)
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	46c0      	nop			; (mov r8, r8)
 8001340:	48001400 	.word	0x48001400

08001344 <NRF24_chip_disable>:

void NRF24_chip_disable()	//NRF24-CE = 0
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24CTRL, NRF24_CE, GPIO_PIN_RESET);
 8001348:	4b04      	ldr	r3, [pc, #16]	; (800135c <NRF24_chip_disable+0x18>)
 800134a:	2200      	movs	r2, #0
 800134c:	2102      	movs	r1, #2
 800134e:	0018      	movs	r0, r3
 8001350:	f001 f8eb 	bl	800252a <HAL_GPIO_WritePin>
}
 8001354:	46c0      	nop			; (mov r8, r8)
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	46c0      	nop			; (mov r8, r8)
 800135c:	48001400 	.word	0x48001400

08001360 <NRF24_chip_select>:

void NRF24_chip_select()	//NRF24-CSN = 0
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24CTRL, NRF24_CSN, GPIO_PIN_RESET);
 8001364:	4b04      	ldr	r3, [pc, #16]	; (8001378 <NRF24_chip_select+0x18>)
 8001366:	2200      	movs	r2, #0
 8001368:	2101      	movs	r1, #1
 800136a:	0018      	movs	r0, r3
 800136c:	f001 f8dd 	bl	800252a <HAL_GPIO_WritePin>
}
 8001370:	46c0      	nop			; (mov r8, r8)
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	46c0      	nop			; (mov r8, r8)
 8001378:	48001400 	.word	0x48001400

0800137c <NRF24_chip_deselect>:

void NRF24_chip_deselect()	//NRF24-CSN = 1
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24CTRL, NRF24_CSN, GPIO_PIN_SET);
 8001380:	4b04      	ldr	r3, [pc, #16]	; (8001394 <NRF24_chip_deselect+0x18>)
 8001382:	2201      	movs	r2, #1
 8001384:	2101      	movs	r1, #1
 8001386:	0018      	movs	r0, r3
 8001388:	f001 f8cf 	bl	800252a <HAL_GPIO_WritePin>
}
 800138c:	46c0      	nop			; (mov r8, r8)
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	46c0      	nop			; (mov r8, r8)
 8001394:	48001400 	.word	0x48001400

08001398 <NRF24_SPI_send>:


void NRF24_SPI_send(uint8_t dat)	//Send Single byte of SPI Data
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	0002      	movs	r2, r0
 80013a0:	1dfb      	adds	r3, r7, #7
 80013a2:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&NRF24_SPI, &dat, 1, 100);
 80013a4:	1df9      	adds	r1, r7, #7
 80013a6:	4804      	ldr	r0, [pc, #16]	; (80013b8 <NRF24_SPI_send+0x20>)
 80013a8:	2364      	movs	r3, #100	; 0x64
 80013aa:	2201      	movs	r2, #1
 80013ac:	f001 fdde 	bl	8002f6c <HAL_SPI_Transmit>
}
 80013b0:	46c0      	nop			; (mov r8, r8)
 80013b2:	46bd      	mov	sp, r7
 80013b4:	b002      	add	sp, #8
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	20000050 	.word	0x20000050

080013bc <NRF24_SPI_sendN>:

void NRF24_SPI_sendN(uint8_t *Mdat, uint8_t Ndat)	//Send Multiple byte of SPI Data
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
 80013c4:	000a      	movs	r2, r1
 80013c6:	1cfb      	adds	r3, r7, #3
 80013c8:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&NRF24_SPI, Mdat, Ndat, 1000);
 80013ca:	1cfb      	adds	r3, r7, #3
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	b29a      	uxth	r2, r3
 80013d0:	23fa      	movs	r3, #250	; 0xfa
 80013d2:	009b      	lsls	r3, r3, #2
 80013d4:	6879      	ldr	r1, [r7, #4]
 80013d6:	4803      	ldr	r0, [pc, #12]	; (80013e4 <NRF24_SPI_sendN+0x28>)
 80013d8:	f001 fdc8 	bl	8002f6c <HAL_SPI_Transmit>
}
 80013dc:	46c0      	nop			; (mov r8, r8)
 80013de:	46bd      	mov	sp, r7
 80013e0:	b002      	add	sp, #8
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	20000050 	.word	0x20000050

080013e8 <NRF24_SPI_recv>:

uint8_t NRF24_SPI_recv()	//Receive Single byte of SPI Data
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
	uint8_t dat = 0;
 80013ee:	1dfb      	adds	r3, r7, #7
 80013f0:	2200      	movs	r2, #0
 80013f2:	701a      	strb	r2, [r3, #0]

	HAL_SPI_Receive(&NRF24_SPI, &dat, 1, 100);
 80013f4:	1df9      	adds	r1, r7, #7
 80013f6:	4805      	ldr	r0, [pc, #20]	; (800140c <NRF24_SPI_recv+0x24>)
 80013f8:	2364      	movs	r3, #100	; 0x64
 80013fa:	2201      	movs	r2, #1
 80013fc:	f001 ff0e 	bl	800321c <HAL_SPI_Receive>

	return dat;
 8001400:	1dfb      	adds	r3, r7, #7
 8001402:	781b      	ldrb	r3, [r3, #0]
}
 8001404:	0018      	movs	r0, r3
 8001406:	46bd      	mov	sp, r7
 8001408:	b002      	add	sp, #8
 800140a:	bd80      	pop	{r7, pc}
 800140c:	20000050 	.word	0x20000050

08001410 <NRF24_SPI_recvN>:

void NRF24_SPI_recvN(uint8_t *Mdat, uint8_t Ndat)	//Receive Multiple byte of SPI Data
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
 8001418:	000a      	movs	r2, r1
 800141a:	1cfb      	adds	r3, r7, #3
 800141c:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Receive(&NRF24_SPI, Mdat, Ndat, 1000);
 800141e:	1cfb      	adds	r3, r7, #3
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	b29a      	uxth	r2, r3
 8001424:	23fa      	movs	r3, #250	; 0xfa
 8001426:	009b      	lsls	r3, r3, #2
 8001428:	6879      	ldr	r1, [r7, #4]
 800142a:	4803      	ldr	r0, [pc, #12]	; (8001438 <NRF24_SPI_recvN+0x28>)
 800142c:	f001 fef6 	bl	800321c <HAL_SPI_Receive>
}
 8001430:	46c0      	nop			; (mov r8, r8)
 8001432:	46bd      	mov	sp, r7
 8001434:	b002      	add	sp, #8
 8001436:	bd80      	pop	{r7, pc}
 8001438:	20000050 	.word	0x20000050

0800143c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001442:	4b0f      	ldr	r3, [pc, #60]	; (8001480 <HAL_MspInit+0x44>)
 8001444:	699a      	ldr	r2, [r3, #24]
 8001446:	4b0e      	ldr	r3, [pc, #56]	; (8001480 <HAL_MspInit+0x44>)
 8001448:	2101      	movs	r1, #1
 800144a:	430a      	orrs	r2, r1
 800144c:	619a      	str	r2, [r3, #24]
 800144e:	4b0c      	ldr	r3, [pc, #48]	; (8001480 <HAL_MspInit+0x44>)
 8001450:	699b      	ldr	r3, [r3, #24]
 8001452:	2201      	movs	r2, #1
 8001454:	4013      	ands	r3, r2
 8001456:	607b      	str	r3, [r7, #4]
 8001458:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800145a:	4b09      	ldr	r3, [pc, #36]	; (8001480 <HAL_MspInit+0x44>)
 800145c:	69da      	ldr	r2, [r3, #28]
 800145e:	4b08      	ldr	r3, [pc, #32]	; (8001480 <HAL_MspInit+0x44>)
 8001460:	2180      	movs	r1, #128	; 0x80
 8001462:	0549      	lsls	r1, r1, #21
 8001464:	430a      	orrs	r2, r1
 8001466:	61da      	str	r2, [r3, #28]
 8001468:	4b05      	ldr	r3, [pc, #20]	; (8001480 <HAL_MspInit+0x44>)
 800146a:	69da      	ldr	r2, [r3, #28]
 800146c:	2380      	movs	r3, #128	; 0x80
 800146e:	055b      	lsls	r3, r3, #21
 8001470:	4013      	ands	r3, r2
 8001472:	603b      	str	r3, [r7, #0]
 8001474:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001476:	46c0      	nop			; (mov r8, r8)
 8001478:	46bd      	mov	sp, r7
 800147a:	b002      	add	sp, #8
 800147c:	bd80      	pop	{r7, pc}
 800147e:	46c0      	nop			; (mov r8, r8)
 8001480:	40021000 	.word	0x40021000

08001484 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001484:	b590      	push	{r4, r7, lr}
 8001486:	b08b      	sub	sp, #44	; 0x2c
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800148c:	2414      	movs	r4, #20
 800148e:	193b      	adds	r3, r7, r4
 8001490:	0018      	movs	r0, r3
 8001492:	2314      	movs	r3, #20
 8001494:	001a      	movs	r2, r3
 8001496:	2100      	movs	r1, #0
 8001498:	f002 fbd6 	bl	8003c48 <memset>
  if(hadc->Instance==ADC1)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a19      	ldr	r2, [pc, #100]	; (8001508 <HAL_ADC_MspInit+0x84>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d12b      	bne.n	80014fe <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80014a6:	4b19      	ldr	r3, [pc, #100]	; (800150c <HAL_ADC_MspInit+0x88>)
 80014a8:	699a      	ldr	r2, [r3, #24]
 80014aa:	4b18      	ldr	r3, [pc, #96]	; (800150c <HAL_ADC_MspInit+0x88>)
 80014ac:	2180      	movs	r1, #128	; 0x80
 80014ae:	0089      	lsls	r1, r1, #2
 80014b0:	430a      	orrs	r2, r1
 80014b2:	619a      	str	r2, [r3, #24]
 80014b4:	4b15      	ldr	r3, [pc, #84]	; (800150c <HAL_ADC_MspInit+0x88>)
 80014b6:	699a      	ldr	r2, [r3, #24]
 80014b8:	2380      	movs	r3, #128	; 0x80
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	4013      	ands	r3, r2
 80014be:	613b      	str	r3, [r7, #16]
 80014c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014c2:	4b12      	ldr	r3, [pc, #72]	; (800150c <HAL_ADC_MspInit+0x88>)
 80014c4:	695a      	ldr	r2, [r3, #20]
 80014c6:	4b11      	ldr	r3, [pc, #68]	; (800150c <HAL_ADC_MspInit+0x88>)
 80014c8:	2180      	movs	r1, #128	; 0x80
 80014ca:	0289      	lsls	r1, r1, #10
 80014cc:	430a      	orrs	r2, r1
 80014ce:	615a      	str	r2, [r3, #20]
 80014d0:	4b0e      	ldr	r3, [pc, #56]	; (800150c <HAL_ADC_MspInit+0x88>)
 80014d2:	695a      	ldr	r2, [r3, #20]
 80014d4:	2380      	movs	r3, #128	; 0x80
 80014d6:	029b      	lsls	r3, r3, #10
 80014d8:	4013      	ands	r3, r2
 80014da:	60fb      	str	r3, [r7, #12]
 80014dc:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80014de:	193b      	adds	r3, r7, r4
 80014e0:	2201      	movs	r2, #1
 80014e2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014e4:	193b      	adds	r3, r7, r4
 80014e6:	2203      	movs	r2, #3
 80014e8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ea:	193b      	adds	r3, r7, r4
 80014ec:	2200      	movs	r2, #0
 80014ee:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014f0:	193a      	adds	r2, r7, r4
 80014f2:	2390      	movs	r3, #144	; 0x90
 80014f4:	05db      	lsls	r3, r3, #23
 80014f6:	0011      	movs	r1, r2
 80014f8:	0018      	movs	r0, r3
 80014fa:	f000 fe89 	bl	8002210 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80014fe:	46c0      	nop			; (mov r8, r8)
 8001500:	46bd      	mov	sp, r7
 8001502:	b00b      	add	sp, #44	; 0x2c
 8001504:	bd90      	pop	{r4, r7, pc}
 8001506:	46c0      	nop			; (mov r8, r8)
 8001508:	40012400 	.word	0x40012400
 800150c:	40021000 	.word	0x40021000

08001510 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001510:	b590      	push	{r4, r7, lr}
 8001512:	b08b      	sub	sp, #44	; 0x2c
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001518:	2414      	movs	r4, #20
 800151a:	193b      	adds	r3, r7, r4
 800151c:	0018      	movs	r0, r3
 800151e:	2314      	movs	r3, #20
 8001520:	001a      	movs	r2, r3
 8001522:	2100      	movs	r1, #0
 8001524:	f002 fb90 	bl	8003c48 <memset>
  if(hspi->Instance==SPI1)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a1c      	ldr	r2, [pc, #112]	; (80015a0 <HAL_SPI_MspInit+0x90>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d131      	bne.n	8001596 <HAL_SPI_MspInit+0x86>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001532:	4b1c      	ldr	r3, [pc, #112]	; (80015a4 <HAL_SPI_MspInit+0x94>)
 8001534:	699a      	ldr	r2, [r3, #24]
 8001536:	4b1b      	ldr	r3, [pc, #108]	; (80015a4 <HAL_SPI_MspInit+0x94>)
 8001538:	2180      	movs	r1, #128	; 0x80
 800153a:	0149      	lsls	r1, r1, #5
 800153c:	430a      	orrs	r2, r1
 800153e:	619a      	str	r2, [r3, #24]
 8001540:	4b18      	ldr	r3, [pc, #96]	; (80015a4 <HAL_SPI_MspInit+0x94>)
 8001542:	699a      	ldr	r2, [r3, #24]
 8001544:	2380      	movs	r3, #128	; 0x80
 8001546:	015b      	lsls	r3, r3, #5
 8001548:	4013      	ands	r3, r2
 800154a:	613b      	str	r3, [r7, #16]
 800154c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800154e:	4b15      	ldr	r3, [pc, #84]	; (80015a4 <HAL_SPI_MspInit+0x94>)
 8001550:	695a      	ldr	r2, [r3, #20]
 8001552:	4b14      	ldr	r3, [pc, #80]	; (80015a4 <HAL_SPI_MspInit+0x94>)
 8001554:	2180      	movs	r1, #128	; 0x80
 8001556:	02c9      	lsls	r1, r1, #11
 8001558:	430a      	orrs	r2, r1
 800155a:	615a      	str	r2, [r3, #20]
 800155c:	4b11      	ldr	r3, [pc, #68]	; (80015a4 <HAL_SPI_MspInit+0x94>)
 800155e:	695a      	ldr	r2, [r3, #20]
 8001560:	2380      	movs	r3, #128	; 0x80
 8001562:	02db      	lsls	r3, r3, #11
 8001564:	4013      	ands	r3, r2
 8001566:	60fb      	str	r3, [r7, #12]
 8001568:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = NRF24_SCK_Pin|NRF24_MISO_Pin|NRF24_MOSI_Pin;
 800156a:	0021      	movs	r1, r4
 800156c:	187b      	adds	r3, r7, r1
 800156e:	2238      	movs	r2, #56	; 0x38
 8001570:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001572:	187b      	adds	r3, r7, r1
 8001574:	2202      	movs	r2, #2
 8001576:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001578:	187b      	adds	r3, r7, r1
 800157a:	2200      	movs	r2, #0
 800157c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800157e:	187b      	adds	r3, r7, r1
 8001580:	2203      	movs	r2, #3
 8001582:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001584:	187b      	adds	r3, r7, r1
 8001586:	2200      	movs	r2, #0
 8001588:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800158a:	187b      	adds	r3, r7, r1
 800158c:	4a06      	ldr	r2, [pc, #24]	; (80015a8 <HAL_SPI_MspInit+0x98>)
 800158e:	0019      	movs	r1, r3
 8001590:	0010      	movs	r0, r2
 8001592:	f000 fe3d 	bl	8002210 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001596:	46c0      	nop			; (mov r8, r8)
 8001598:	46bd      	mov	sp, r7
 800159a:	b00b      	add	sp, #44	; 0x2c
 800159c:	bd90      	pop	{r4, r7, pc}
 800159e:	46c0      	nop			; (mov r8, r8)
 80015a0:	40013000 	.word	0x40013000
 80015a4:	40021000 	.word	0x40021000
 80015a8:	48000400 	.word	0x48000400

080015ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015b0:	e7fe      	b.n	80015b0 <NMI_Handler+0x4>

080015b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015b2:	b580      	push	{r7, lr}
 80015b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015b6:	e7fe      	b.n	80015b6 <HardFault_Handler+0x4>

080015b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80015bc:	46c0      	nop			; (mov r8, r8)
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}

080015c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015c2:	b580      	push	{r7, lr}
 80015c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015c6:	46c0      	nop			; (mov r8, r8)
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}

080015cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015d0:	f000 f87a 	bl	80016c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015d4:	46c0      	nop			; (mov r8, r8)
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}

080015da <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015da:	b580      	push	{r7, lr}
 80015dc:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80015de:	46c0      	nop			; (mov r8, r8)
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}

080015e4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80015e4:	480d      	ldr	r0, [pc, #52]	; (800161c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80015e6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015e8:	480d      	ldr	r0, [pc, #52]	; (8001620 <LoopForever+0x6>)
  ldr r1, =_edata
 80015ea:	490e      	ldr	r1, [pc, #56]	; (8001624 <LoopForever+0xa>)
  ldr r2, =_sidata
 80015ec:	4a0e      	ldr	r2, [pc, #56]	; (8001628 <LoopForever+0xe>)
  movs r3, #0
 80015ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015f0:	e002      	b.n	80015f8 <LoopCopyDataInit>

080015f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015f6:	3304      	adds	r3, #4

080015f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015fc:	d3f9      	bcc.n	80015f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015fe:	4a0b      	ldr	r2, [pc, #44]	; (800162c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001600:	4c0b      	ldr	r4, [pc, #44]	; (8001630 <LoopForever+0x16>)
  movs r3, #0
 8001602:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001604:	e001      	b.n	800160a <LoopFillZerobss>

08001606 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001606:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001608:	3204      	adds	r2, #4

0800160a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800160a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800160c:	d3fb      	bcc.n	8001606 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800160e:	f7ff ffe4 	bl	80015da <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001612:	f002 faf5 	bl	8003c00 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001616:	f7ff f8c5 	bl	80007a4 <main>

0800161a <LoopForever>:

LoopForever:
    b LoopForever
 800161a:	e7fe      	b.n	800161a <LoopForever>
  ldr   r0, =_estack
 800161c:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8001620:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001624:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 8001628:	08003f84 	.word	0x08003f84
  ldr r2, =_sbss
 800162c:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8001630:	200000fc 	.word	0x200000fc

08001634 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001634:	e7fe      	b.n	8001634 <ADC1_IRQHandler>
	...

08001638 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800163c:	4b07      	ldr	r3, [pc, #28]	; (800165c <HAL_Init+0x24>)
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	4b06      	ldr	r3, [pc, #24]	; (800165c <HAL_Init+0x24>)
 8001642:	2110      	movs	r1, #16
 8001644:	430a      	orrs	r2, r1
 8001646:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001648:	2003      	movs	r0, #3
 800164a:	f000 f809 	bl	8001660 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800164e:	f7ff fef5 	bl	800143c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001652:	2300      	movs	r3, #0
}
 8001654:	0018      	movs	r0, r3
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	46c0      	nop			; (mov r8, r8)
 800165c:	40022000 	.word	0x40022000

08001660 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001660:	b590      	push	{r4, r7, lr}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001668:	4b14      	ldr	r3, [pc, #80]	; (80016bc <HAL_InitTick+0x5c>)
 800166a:	681c      	ldr	r4, [r3, #0]
 800166c:	4b14      	ldr	r3, [pc, #80]	; (80016c0 <HAL_InitTick+0x60>)
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	0019      	movs	r1, r3
 8001672:	23fa      	movs	r3, #250	; 0xfa
 8001674:	0098      	lsls	r0, r3, #2
 8001676:	f7fe fd47 	bl	8000108 <__udivsi3>
 800167a:	0003      	movs	r3, r0
 800167c:	0019      	movs	r1, r3
 800167e:	0020      	movs	r0, r4
 8001680:	f7fe fd42 	bl	8000108 <__udivsi3>
 8001684:	0003      	movs	r3, r0
 8001686:	0018      	movs	r0, r3
 8001688:	f000 fdb5 	bl	80021f6 <HAL_SYSTICK_Config>
 800168c:	1e03      	subs	r3, r0, #0
 800168e:	d001      	beq.n	8001694 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001690:	2301      	movs	r3, #1
 8001692:	e00f      	b.n	80016b4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2b03      	cmp	r3, #3
 8001698:	d80b      	bhi.n	80016b2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800169a:	6879      	ldr	r1, [r7, #4]
 800169c:	2301      	movs	r3, #1
 800169e:	425b      	negs	r3, r3
 80016a0:	2200      	movs	r2, #0
 80016a2:	0018      	movs	r0, r3
 80016a4:	f000 fd92 	bl	80021cc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016a8:	4b06      	ldr	r3, [pc, #24]	; (80016c4 <HAL_InitTick+0x64>)
 80016aa:	687a      	ldr	r2, [r7, #4]
 80016ac:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80016ae:	2300      	movs	r3, #0
 80016b0:	e000      	b.n	80016b4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
}
 80016b4:	0018      	movs	r0, r3
 80016b6:	46bd      	mov	sp, r7
 80016b8:	b003      	add	sp, #12
 80016ba:	bd90      	pop	{r4, r7, pc}
 80016bc:	2000001c 	.word	0x2000001c
 80016c0:	20000024 	.word	0x20000024
 80016c4:	20000020 	.word	0x20000020

080016c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016cc:	4b05      	ldr	r3, [pc, #20]	; (80016e4 <HAL_IncTick+0x1c>)
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	001a      	movs	r2, r3
 80016d2:	4b05      	ldr	r3, [pc, #20]	; (80016e8 <HAL_IncTick+0x20>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	18d2      	adds	r2, r2, r3
 80016d8:	4b03      	ldr	r3, [pc, #12]	; (80016e8 <HAL_IncTick+0x20>)
 80016da:	601a      	str	r2, [r3, #0]
}
 80016dc:	46c0      	nop			; (mov r8, r8)
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	46c0      	nop			; (mov r8, r8)
 80016e4:	20000024 	.word	0x20000024
 80016e8:	200000f8 	.word	0x200000f8

080016ec <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
  return uwTick;
 80016f0:	4b02      	ldr	r3, [pc, #8]	; (80016fc <HAL_GetTick+0x10>)
 80016f2:	681b      	ldr	r3, [r3, #0]
}
 80016f4:	0018      	movs	r0, r3
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	46c0      	nop			; (mov r8, r8)
 80016fc:	200000f8 	.word	0x200000f8

08001700 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b084      	sub	sp, #16
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001708:	f7ff fff0 	bl	80016ec <HAL_GetTick>
 800170c:	0003      	movs	r3, r0
 800170e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	3301      	adds	r3, #1
 8001718:	d005      	beq.n	8001726 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800171a:	4b0a      	ldr	r3, [pc, #40]	; (8001744 <HAL_Delay+0x44>)
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	001a      	movs	r2, r3
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	189b      	adds	r3, r3, r2
 8001724:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001726:	46c0      	nop			; (mov r8, r8)
 8001728:	f7ff ffe0 	bl	80016ec <HAL_GetTick>
 800172c:	0002      	movs	r2, r0
 800172e:	68bb      	ldr	r3, [r7, #8]
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	68fa      	ldr	r2, [r7, #12]
 8001734:	429a      	cmp	r2, r3
 8001736:	d8f7      	bhi.n	8001728 <HAL_Delay+0x28>
  {
  }
}
 8001738:	46c0      	nop			; (mov r8, r8)
 800173a:	46c0      	nop			; (mov r8, r8)
 800173c:	46bd      	mov	sp, r7
 800173e:	b004      	add	sp, #16
 8001740:	bd80      	pop	{r7, pc}
 8001742:	46c0      	nop			; (mov r8, r8)
 8001744:	20000024 	.word	0x20000024

08001748 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b084      	sub	sp, #16
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001750:	230f      	movs	r3, #15
 8001752:	18fb      	adds	r3, r7, r3
 8001754:	2200      	movs	r2, #0
 8001756:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8001758:	2300      	movs	r3, #0
 800175a:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d101      	bne.n	8001766 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8001762:	2301      	movs	r3, #1
 8001764:	e125      	b.n	80019b2 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800176a:	2b00      	cmp	r3, #0
 800176c:	d10a      	bne.n	8001784 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2200      	movs	r2, #0
 8001772:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2234      	movs	r2, #52	; 0x34
 8001778:	2100      	movs	r1, #0
 800177a:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	0018      	movs	r0, r3
 8001780:	f7ff fe80 	bl	8001484 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001788:	2210      	movs	r2, #16
 800178a:	4013      	ands	r3, r2
 800178c:	d000      	beq.n	8001790 <HAL_ADC_Init+0x48>
 800178e:	e103      	b.n	8001998 <HAL_ADC_Init+0x250>
 8001790:	230f      	movs	r3, #15
 8001792:	18fb      	adds	r3, r7, r3
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d000      	beq.n	800179c <HAL_ADC_Init+0x54>
 800179a:	e0fd      	b.n	8001998 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	689b      	ldr	r3, [r3, #8]
 80017a2:	2204      	movs	r2, #4
 80017a4:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 80017a6:	d000      	beq.n	80017aa <HAL_ADC_Init+0x62>
 80017a8:	e0f6      	b.n	8001998 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017ae:	4a83      	ldr	r2, [pc, #524]	; (80019bc <HAL_ADC_Init+0x274>)
 80017b0:	4013      	ands	r3, r2
 80017b2:	2202      	movs	r2, #2
 80017b4:	431a      	orrs	r2, r3
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	2203      	movs	r2, #3
 80017c2:	4013      	ands	r3, r2
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	d112      	bne.n	80017ee <HAL_ADC_Init+0xa6>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	2201      	movs	r2, #1
 80017d0:	4013      	ands	r3, r2
 80017d2:	2b01      	cmp	r3, #1
 80017d4:	d009      	beq.n	80017ea <HAL_ADC_Init+0xa2>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	68da      	ldr	r2, [r3, #12]
 80017dc:	2380      	movs	r3, #128	; 0x80
 80017de:	021b      	lsls	r3, r3, #8
 80017e0:	401a      	ands	r2, r3
 80017e2:	2380      	movs	r3, #128	; 0x80
 80017e4:	021b      	lsls	r3, r3, #8
 80017e6:	429a      	cmp	r2, r3
 80017e8:	d101      	bne.n	80017ee <HAL_ADC_Init+0xa6>
 80017ea:	2301      	movs	r3, #1
 80017ec:	e000      	b.n	80017f0 <HAL_ADC_Init+0xa8>
 80017ee:	2300      	movs	r3, #0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d116      	bne.n	8001822 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	68db      	ldr	r3, [r3, #12]
 80017fa:	2218      	movs	r2, #24
 80017fc:	4393      	bics	r3, r2
 80017fe:	0019      	movs	r1, r3
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	689a      	ldr	r2, [r3, #8]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	430a      	orrs	r2, r1
 800180a:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	691b      	ldr	r3, [r3, #16]
 8001812:	009b      	lsls	r3, r3, #2
 8001814:	0899      	lsrs	r1, r3, #2
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	685a      	ldr	r2, [r3, #4]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	430a      	orrs	r2, r1
 8001820:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	68da      	ldr	r2, [r3, #12]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4964      	ldr	r1, [pc, #400]	; (80019c0 <HAL_ADC_Init+0x278>)
 800182e:	400a      	ands	r2, r1
 8001830:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	7e1b      	ldrb	r3, [r3, #24]
 8001836:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	7e5b      	ldrb	r3, [r3, #25]
 800183c:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800183e:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	7e9b      	ldrb	r3, [r3, #26]
 8001844:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001846:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800184c:	2b01      	cmp	r3, #1
 800184e:	d002      	beq.n	8001856 <HAL_ADC_Init+0x10e>
 8001850:	2380      	movs	r3, #128	; 0x80
 8001852:	015b      	lsls	r3, r3, #5
 8001854:	e000      	b.n	8001858 <HAL_ADC_Init+0x110>
 8001856:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001858:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 800185e:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	691b      	ldr	r3, [r3, #16]
 8001864:	2b02      	cmp	r3, #2
 8001866:	d101      	bne.n	800186c <HAL_ADC_Init+0x124>
 8001868:	2304      	movs	r3, #4
 800186a:	e000      	b.n	800186e <HAL_ADC_Init+0x126>
 800186c:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 800186e:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2124      	movs	r1, #36	; 0x24
 8001874:	5c5b      	ldrb	r3, [r3, r1]
 8001876:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001878:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800187a:	68ba      	ldr	r2, [r7, #8]
 800187c:	4313      	orrs	r3, r2
 800187e:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	7edb      	ldrb	r3, [r3, #27]
 8001884:	2b01      	cmp	r3, #1
 8001886:	d115      	bne.n	80018b4 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	7e9b      	ldrb	r3, [r3, #26]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d105      	bne.n	800189c <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	2280      	movs	r2, #128	; 0x80
 8001894:	0252      	lsls	r2, r2, #9
 8001896:	4313      	orrs	r3, r2
 8001898:	60bb      	str	r3, [r7, #8]
 800189a:	e00b      	b.n	80018b4 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018a0:	2220      	movs	r2, #32
 80018a2:	431a      	orrs	r2, r3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018ac:	2201      	movs	r2, #1
 80018ae:	431a      	orrs	r2, r3
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	69da      	ldr	r2, [r3, #28]
 80018b8:	23c2      	movs	r3, #194	; 0xc2
 80018ba:	33ff      	adds	r3, #255	; 0xff
 80018bc:	429a      	cmp	r2, r3
 80018be:	d007      	beq.n	80018d0 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80018c8:	4313      	orrs	r3, r2
 80018ca:	68ba      	ldr	r2, [r7, #8]
 80018cc:	4313      	orrs	r3, r2
 80018ce:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	68d9      	ldr	r1, [r3, #12]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	68ba      	ldr	r2, [r7, #8]
 80018dc:	430a      	orrs	r2, r1
 80018de:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018e4:	2380      	movs	r3, #128	; 0x80
 80018e6:	055b      	lsls	r3, r3, #21
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d01b      	beq.n	8001924 <HAL_ADC_Init+0x1dc>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f0:	2b01      	cmp	r3, #1
 80018f2:	d017      	beq.n	8001924 <HAL_ADC_Init+0x1dc>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f8:	2b02      	cmp	r3, #2
 80018fa:	d013      	beq.n	8001924 <HAL_ADC_Init+0x1dc>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001900:	2b03      	cmp	r3, #3
 8001902:	d00f      	beq.n	8001924 <HAL_ADC_Init+0x1dc>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001908:	2b04      	cmp	r3, #4
 800190a:	d00b      	beq.n	8001924 <HAL_ADC_Init+0x1dc>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001910:	2b05      	cmp	r3, #5
 8001912:	d007      	beq.n	8001924 <HAL_ADC_Init+0x1dc>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001918:	2b06      	cmp	r3, #6
 800191a:	d003      	beq.n	8001924 <HAL_ADC_Init+0x1dc>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001920:	2b07      	cmp	r3, #7
 8001922:	d112      	bne.n	800194a <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	695a      	ldr	r2, [r3, #20]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	2107      	movs	r1, #7
 8001930:	438a      	bics	r2, r1
 8001932:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	6959      	ldr	r1, [r3, #20]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800193e:	2207      	movs	r2, #7
 8001940:	401a      	ands	r2, r3
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	430a      	orrs	r2, r1
 8001948:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	4a1c      	ldr	r2, [pc, #112]	; (80019c4 <HAL_ADC_Init+0x27c>)
 8001952:	4013      	ands	r3, r2
 8001954:	68ba      	ldr	r2, [r7, #8]
 8001956:	429a      	cmp	r2, r3
 8001958:	d10b      	bne.n	8001972 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2200      	movs	r2, #0
 800195e:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001964:	2203      	movs	r2, #3
 8001966:	4393      	bics	r3, r2
 8001968:	2201      	movs	r2, #1
 800196a:	431a      	orrs	r2, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001970:	e01c      	b.n	80019ac <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001976:	2212      	movs	r2, #18
 8001978:	4393      	bics	r3, r2
 800197a:	2210      	movs	r2, #16
 800197c:	431a      	orrs	r2, r3
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001986:	2201      	movs	r2, #1
 8001988:	431a      	orrs	r2, r3
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 800198e:	230f      	movs	r3, #15
 8001990:	18fb      	adds	r3, r7, r3
 8001992:	2201      	movs	r2, #1
 8001994:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001996:	e009      	b.n	80019ac <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800199c:	2210      	movs	r2, #16
 800199e:	431a      	orrs	r2, r3
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 80019a4:	230f      	movs	r3, #15
 80019a6:	18fb      	adds	r3, r7, r3
 80019a8:	2201      	movs	r2, #1
 80019aa:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80019ac:	230f      	movs	r3, #15
 80019ae:	18fb      	adds	r3, r7, r3
 80019b0:	781b      	ldrb	r3, [r3, #0]
}
 80019b2:	0018      	movs	r0, r3
 80019b4:	46bd      	mov	sp, r7
 80019b6:	b004      	add	sp, #16
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	46c0      	nop			; (mov r8, r8)
 80019bc:	fffffefd 	.word	0xfffffefd
 80019c0:	fffe0219 	.word	0xfffe0219
 80019c4:	833fffe7 	.word	0x833fffe7

080019c8 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80019c8:	b590      	push	{r4, r7, lr}
 80019ca:	b085      	sub	sp, #20
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019d0:	230f      	movs	r3, #15
 80019d2:	18fb      	adds	r3, r7, r3
 80019d4:	2200      	movs	r2, #0
 80019d6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	2204      	movs	r2, #4
 80019e0:	4013      	ands	r3, r2
 80019e2:	d138      	bne.n	8001a56 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2234      	movs	r2, #52	; 0x34
 80019e8:	5c9b      	ldrb	r3, [r3, r2]
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d101      	bne.n	80019f2 <HAL_ADC_Start+0x2a>
 80019ee:	2302      	movs	r3, #2
 80019f0:	e038      	b.n	8001a64 <HAL_ADC_Start+0x9c>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2234      	movs	r2, #52	; 0x34
 80019f6:	2101      	movs	r1, #1
 80019f8:	5499      	strb	r1, [r3, r2]
      
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	7e5b      	ldrb	r3, [r3, #25]
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d007      	beq.n	8001a12 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8001a02:	230f      	movs	r3, #15
 8001a04:	18fc      	adds	r4, r7, r3
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	0018      	movs	r0, r3
 8001a0a:	f000 fa0b 	bl	8001e24 <ADC_Enable>
 8001a0e:	0003      	movs	r3, r0
 8001a10:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001a12:	230f      	movs	r3, #15
 8001a14:	18fb      	adds	r3, r7, r3
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d120      	bne.n	8001a5e <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a20:	4a12      	ldr	r2, [pc, #72]	; (8001a6c <HAL_ADC_Start+0xa4>)
 8001a22:	4013      	ands	r3, r2
 8001a24:	2280      	movs	r2, #128	; 0x80
 8001a26:	0052      	lsls	r2, r2, #1
 8001a28:	431a      	orrs	r2, r3
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2200      	movs	r2, #0
 8001a32:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2234      	movs	r2, #52	; 0x34
 8001a38:	2100      	movs	r1, #0
 8001a3a:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	221c      	movs	r2, #28
 8001a42:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	689a      	ldr	r2, [r3, #8]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	2104      	movs	r1, #4
 8001a50:	430a      	orrs	r2, r1
 8001a52:	609a      	str	r2, [r3, #8]
 8001a54:	e003      	b.n	8001a5e <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001a56:	230f      	movs	r3, #15
 8001a58:	18fb      	adds	r3, r7, r3
 8001a5a:	2202      	movs	r2, #2
 8001a5c:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001a5e:	230f      	movs	r3, #15
 8001a60:	18fb      	adds	r3, r7, r3
 8001a62:	781b      	ldrb	r3, [r3, #0]
}
 8001a64:	0018      	movs	r0, r3
 8001a66:	46bd      	mov	sp, r7
 8001a68:	b005      	add	sp, #20
 8001a6a:	bd90      	pop	{r4, r7, pc}
 8001a6c:	fffff0fe 	.word	0xfffff0fe

08001a70 <HAL_ADC_Stop>:
  * @brief  Stop ADC conversion of regular group, disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{ 
 8001a70:	b5b0      	push	{r4, r5, r7, lr}
 8001a72:	b084      	sub	sp, #16
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a78:	230f      	movs	r3, #15
 8001a7a:	18fb      	adds	r3, r7, r3
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2234      	movs	r2, #52	; 0x34
 8001a84:	5c9b      	ldrb	r3, [r3, r2]
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d101      	bne.n	8001a8e <HAL_ADC_Stop+0x1e>
 8001a8a:	2302      	movs	r3, #2
 8001a8c:	e029      	b.n	8001ae2 <HAL_ADC_Stop+0x72>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2234      	movs	r2, #52	; 0x34
 8001a92:	2101      	movs	r1, #1
 8001a94:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8001a96:	250f      	movs	r5, #15
 8001a98:	197c      	adds	r4, r7, r5
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	0018      	movs	r0, r3
 8001a9e:	f000 fab6 	bl	800200e <ADC_ConversionStop>
 8001aa2:	0003      	movs	r3, r0
 8001aa4:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001aa6:	197b      	adds	r3, r7, r5
 8001aa8:	781b      	ldrb	r3, [r3, #0]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d112      	bne.n	8001ad4 <HAL_ADC_Stop+0x64>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001aae:	197c      	adds	r4, r7, r5
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	0018      	movs	r0, r3
 8001ab4:	f000 fa3a 	bl	8001f2c <ADC_Disable>
 8001ab8:	0003      	movs	r3, r0
 8001aba:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001abc:	197b      	adds	r3, r7, r5
 8001abe:	781b      	ldrb	r3, [r3, #0]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d107      	bne.n	8001ad4 <HAL_ADC_Stop+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ac8:	4a08      	ldr	r2, [pc, #32]	; (8001aec <HAL_ADC_Stop+0x7c>)
 8001aca:	4013      	ands	r3, r2
 8001acc:	2201      	movs	r2, #1
 8001ace:	431a      	orrs	r2, r3
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2234      	movs	r2, #52	; 0x34
 8001ad8:	2100      	movs	r1, #0
 8001ada:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001adc:	230f      	movs	r3, #15
 8001ade:	18fb      	adds	r3, r7, r3
 8001ae0:	781b      	ldrb	r3, [r3, #0]
}
 8001ae2:	0018      	movs	r0, r3
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	b004      	add	sp, #16
 8001ae8:	bdb0      	pop	{r4, r5, r7, pc}
 8001aea:	46c0      	nop			; (mov r8, r8)
 8001aec:	fffffefe 	.word	0xfffffefe

08001af0 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b084      	sub	sp, #16
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
 8001af8:	6039      	str	r1, [r7, #0]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	695b      	ldr	r3, [r3, #20]
 8001afe:	2b08      	cmp	r3, #8
 8001b00:	d102      	bne.n	8001b08 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8001b02:	2308      	movs	r3, #8
 8001b04:	60fb      	str	r3, [r7, #12]
 8001b06:	e014      	b.n	8001b32 <HAL_ADC_PollForConversion+0x42>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	68db      	ldr	r3, [r3, #12]
 8001b0e:	2201      	movs	r2, #1
 8001b10:	4013      	ands	r3, r2
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d10b      	bne.n	8001b2e <HAL_ADC_PollForConversion+0x3e>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b1a:	2220      	movs	r2, #32
 8001b1c:	431a      	orrs	r2, r3
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2234      	movs	r2, #52	; 0x34
 8001b26:	2100      	movs	r1, #0
 8001b28:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e071      	b.n	8001c12 <HAL_ADC_PollForConversion+0x122>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8001b2e:	230c      	movs	r3, #12
 8001b30:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001b32:	f7ff fddb 	bl	80016ec <HAL_GetTick>
 8001b36:	0003      	movs	r3, r0
 8001b38:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001b3a:	e01f      	b.n	8001b7c <HAL_ADC_PollForConversion+0x8c>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	3301      	adds	r3, #1
 8001b40:	d01c      	beq.n	8001b7c <HAL_ADC_PollForConversion+0x8c>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d007      	beq.n	8001b58 <HAL_ADC_PollForConversion+0x68>
 8001b48:	f7ff fdd0 	bl	80016ec <HAL_GetTick>
 8001b4c:	0002      	movs	r2, r0
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	683a      	ldr	r2, [r7, #0]
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d211      	bcs.n	8001b7c <HAL_ADC_PollForConversion+0x8c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	68fa      	ldr	r2, [r7, #12]
 8001b60:	4013      	ands	r3, r2
 8001b62:	d10b      	bne.n	8001b7c <HAL_ADC_PollForConversion+0x8c>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b68:	2204      	movs	r2, #4
 8001b6a:	431a      	orrs	r2, r3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	639a      	str	r2, [r3, #56]	; 0x38

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2234      	movs	r2, #52	; 0x34
 8001b74:	2100      	movs	r1, #0
 8001b76:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8001b78:	2303      	movs	r3, #3
 8001b7a:	e04a      	b.n	8001c12 <HAL_ADC_PollForConversion+0x122>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	68fa      	ldr	r2, [r7, #12]
 8001b84:	4013      	ands	r3, r2
 8001b86:	d0d9      	beq.n	8001b3c <HAL_ADC_PollForConversion+0x4c>
      }
    }
  }
    
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b8c:	2280      	movs	r2, #128	; 0x80
 8001b8e:	0092      	lsls	r2, r2, #2
 8001b90:	431a      	orrs	r2, r3
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	68da      	ldr	r2, [r3, #12]
 8001b9c:	23c0      	movs	r3, #192	; 0xc0
 8001b9e:	011b      	lsls	r3, r3, #4
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	d12d      	bne.n	8001c00 <HAL_ADC_PollForConversion+0x110>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	7e9b      	ldrb	r3, [r3, #26]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d129      	bne.n	8001c00 <HAL_ADC_PollForConversion+0x110>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	2208      	movs	r2, #8
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	2b08      	cmp	r3, #8
 8001bb8:	d122      	bne.n	8001c00 <HAL_ADC_PollForConversion+0x110>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	2204      	movs	r2, #4
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	d110      	bne.n	8001be8 <HAL_ADC_PollForConversion+0xf8>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	685a      	ldr	r2, [r3, #4]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	210c      	movs	r1, #12
 8001bd2:	438a      	bics	r2, r1
 8001bd4:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bda:	4a10      	ldr	r2, [pc, #64]	; (8001c1c <HAL_ADC_PollForConversion+0x12c>)
 8001bdc:	4013      	ands	r3, r2
 8001bde:	2201      	movs	r2, #1
 8001be0:	431a      	orrs	r2, r3
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	639a      	str	r2, [r3, #56]	; 0x38
 8001be6:	e00b      	b.n	8001c00 <HAL_ADC_PollForConversion+0x110>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bec:	2220      	movs	r2, #32
 8001bee:	431a      	orrs	r2, r3
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	431a      	orrs	r2, r3
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	7e1b      	ldrb	r3, [r3, #24]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d103      	bne.n	8001c10 <HAL_ADC_PollForConversion+0x120>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	220c      	movs	r2, #12
 8001c0e:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001c10:	2300      	movs	r3, #0
}
 8001c12:	0018      	movs	r0, r3
 8001c14:	46bd      	mov	sp, r7
 8001c16:	b004      	add	sp, #16
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	46c0      	nop			; (mov r8, r8)
 8001c1c:	fffffefe 	.word	0xfffffefe

08001c20 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001c2e:	0018      	movs	r0, r3
 8001c30:	46bd      	mov	sp, r7
 8001c32:	b002      	add	sp, #8
 8001c34:	bd80      	pop	{r7, pc}
	...

08001c38 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b084      	sub	sp, #16
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
 8001c40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c42:	230f      	movs	r3, #15
 8001c44:	18fb      	adds	r3, r7, r3
 8001c46:	2200      	movs	r2, #0
 8001c48:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c52:	2380      	movs	r3, #128	; 0x80
 8001c54:	055b      	lsls	r3, r3, #21
 8001c56:	429a      	cmp	r2, r3
 8001c58:	d011      	beq.n	8001c7e <HAL_ADC_ConfigChannel+0x46>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d00d      	beq.n	8001c7e <HAL_ADC_ConfigChannel+0x46>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d009      	beq.n	8001c7e <HAL_ADC_ConfigChannel+0x46>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c6e:	2b03      	cmp	r3, #3
 8001c70:	d005      	beq.n	8001c7e <HAL_ADC_ConfigChannel+0x46>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c76:	2b04      	cmp	r3, #4
 8001c78:	d001      	beq.n	8001c7e <HAL_ADC_ConfigChannel+0x46>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2234      	movs	r2, #52	; 0x34
 8001c82:	5c9b      	ldrb	r3, [r3, r2]
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d101      	bne.n	8001c8c <HAL_ADC_ConfigChannel+0x54>
 8001c88:	2302      	movs	r3, #2
 8001c8a:	e0bb      	b.n	8001e04 <HAL_ADC_ConfigChannel+0x1cc>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2234      	movs	r2, #52	; 0x34
 8001c90:	2101      	movs	r1, #1
 8001c92:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	2204      	movs	r2, #4
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	d000      	beq.n	8001ca2 <HAL_ADC_ConfigChannel+0x6a>
 8001ca0:	e09f      	b.n	8001de2 <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	4a59      	ldr	r2, [pc, #356]	; (8001e0c <HAL_ADC_ConfigChannel+0x1d4>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d100      	bne.n	8001cae <HAL_ADC_ConfigChannel+0x76>
 8001cac:	e077      	b.n	8001d9e <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	2201      	movs	r2, #1
 8001cba:	409a      	lsls	r2, r3
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	430a      	orrs	r2, r1
 8001cc2:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cc8:	2380      	movs	r3, #128	; 0x80
 8001cca:	055b      	lsls	r3, r3, #21
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d037      	beq.n	8001d40 <HAL_ADC_ConfigChannel+0x108>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d033      	beq.n	8001d40 <HAL_ADC_ConfigChannel+0x108>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cdc:	2b02      	cmp	r3, #2
 8001cde:	d02f      	beq.n	8001d40 <HAL_ADC_ConfigChannel+0x108>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ce4:	2b03      	cmp	r3, #3
 8001ce6:	d02b      	beq.n	8001d40 <HAL_ADC_ConfigChannel+0x108>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cec:	2b04      	cmp	r3, #4
 8001cee:	d027      	beq.n	8001d40 <HAL_ADC_ConfigChannel+0x108>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cf4:	2b05      	cmp	r3, #5
 8001cf6:	d023      	beq.n	8001d40 <HAL_ADC_ConfigChannel+0x108>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cfc:	2b06      	cmp	r3, #6
 8001cfe:	d01f      	beq.n	8001d40 <HAL_ADC_ConfigChannel+0x108>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d04:	2b07      	cmp	r3, #7
 8001d06:	d01b      	beq.n	8001d40 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	689a      	ldr	r2, [r3, #8]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	695b      	ldr	r3, [r3, #20]
 8001d12:	2107      	movs	r1, #7
 8001d14:	400b      	ands	r3, r1
 8001d16:	429a      	cmp	r2, r3
 8001d18:	d012      	beq.n	8001d40 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	695a      	ldr	r2, [r3, #20]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	2107      	movs	r1, #7
 8001d26:	438a      	bics	r2, r1
 8001d28:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	6959      	ldr	r1, [r3, #20]
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	2207      	movs	r2, #7
 8001d36:	401a      	ands	r2, r3
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	430a      	orrs	r2, r1
 8001d3e:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	2b10      	cmp	r3, #16
 8001d46:	d003      	beq.n	8001d50 <HAL_ADC_ConfigChannel+0x118>
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	2b11      	cmp	r3, #17
 8001d4e:	d152      	bne.n	8001df6 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001d50:	4b2f      	ldr	r3, [pc, #188]	; (8001e10 <HAL_ADC_ConfigChannel+0x1d8>)
 8001d52:	6819      	ldr	r1, [r3, #0]
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	2b10      	cmp	r3, #16
 8001d5a:	d102      	bne.n	8001d62 <HAL_ADC_ConfigChannel+0x12a>
 8001d5c:	2380      	movs	r3, #128	; 0x80
 8001d5e:	041b      	lsls	r3, r3, #16
 8001d60:	e001      	b.n	8001d66 <HAL_ADC_ConfigChannel+0x12e>
 8001d62:	2380      	movs	r3, #128	; 0x80
 8001d64:	03db      	lsls	r3, r3, #15
 8001d66:	4a2a      	ldr	r2, [pc, #168]	; (8001e10 <HAL_ADC_ConfigChannel+0x1d8>)
 8001d68:	430b      	orrs	r3, r1
 8001d6a:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	2b10      	cmp	r3, #16
 8001d72:	d140      	bne.n	8001df6 <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001d74:	4b27      	ldr	r3, [pc, #156]	; (8001e14 <HAL_ADC_ConfigChannel+0x1dc>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4927      	ldr	r1, [pc, #156]	; (8001e18 <HAL_ADC_ConfigChannel+0x1e0>)
 8001d7a:	0018      	movs	r0, r3
 8001d7c:	f7fe f9c4 	bl	8000108 <__udivsi3>
 8001d80:	0003      	movs	r3, r0
 8001d82:	001a      	movs	r2, r3
 8001d84:	0013      	movs	r3, r2
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	189b      	adds	r3, r3, r2
 8001d8a:	005b      	lsls	r3, r3, #1
 8001d8c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001d8e:	e002      	b.n	8001d96 <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	3b01      	subs	r3, #1
 8001d94:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001d96:	68bb      	ldr	r3, [r7, #8]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d1f9      	bne.n	8001d90 <HAL_ADC_ConfigChannel+0x158>
 8001d9c:	e02b      	b.n	8001df6 <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	2101      	movs	r1, #1
 8001daa:	4099      	lsls	r1, r3
 8001dac:	000b      	movs	r3, r1
 8001dae:	43d9      	mvns	r1, r3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	400a      	ands	r2, r1
 8001db6:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	2b10      	cmp	r3, #16
 8001dbe:	d003      	beq.n	8001dc8 <HAL_ADC_ConfigChannel+0x190>
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	2b11      	cmp	r3, #17
 8001dc6:	d116      	bne.n	8001df6 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001dc8:	4b11      	ldr	r3, [pc, #68]	; (8001e10 <HAL_ADC_ConfigChannel+0x1d8>)
 8001dca:	6819      	ldr	r1, [r3, #0]
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	2b10      	cmp	r3, #16
 8001dd2:	d101      	bne.n	8001dd8 <HAL_ADC_ConfigChannel+0x1a0>
 8001dd4:	4a11      	ldr	r2, [pc, #68]	; (8001e1c <HAL_ADC_ConfigChannel+0x1e4>)
 8001dd6:	e000      	b.n	8001dda <HAL_ADC_ConfigChannel+0x1a2>
 8001dd8:	4a11      	ldr	r2, [pc, #68]	; (8001e20 <HAL_ADC_ConfigChannel+0x1e8>)
 8001dda:	4b0d      	ldr	r3, [pc, #52]	; (8001e10 <HAL_ADC_ConfigChannel+0x1d8>)
 8001ddc:	400a      	ands	r2, r1
 8001dde:	601a      	str	r2, [r3, #0]
 8001de0:	e009      	b.n	8001df6 <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001de6:	2220      	movs	r2, #32
 8001de8:	431a      	orrs	r2, r3
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8001dee:	230f      	movs	r3, #15
 8001df0:	18fb      	adds	r3, r7, r3
 8001df2:	2201      	movs	r2, #1
 8001df4:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2234      	movs	r2, #52	; 0x34
 8001dfa:	2100      	movs	r1, #0
 8001dfc:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001dfe:	230f      	movs	r3, #15
 8001e00:	18fb      	adds	r3, r7, r3
 8001e02:	781b      	ldrb	r3, [r3, #0]
}
 8001e04:	0018      	movs	r0, r3
 8001e06:	46bd      	mov	sp, r7
 8001e08:	b004      	add	sp, #16
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	00001001 	.word	0x00001001
 8001e10:	40012708 	.word	0x40012708
 8001e14:	2000001c 	.word	0x2000001c
 8001e18:	000f4240 	.word	0x000f4240
 8001e1c:	ff7fffff 	.word	0xff7fffff
 8001e20:	ffbfffff 	.word	0xffbfffff

08001e24 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b084      	sub	sp, #16
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001e30:	2300      	movs	r3, #0
 8001e32:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	2203      	movs	r2, #3
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	d112      	bne.n	8001e68 <ADC_Enable+0x44>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	2201      	movs	r2, #1
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d009      	beq.n	8001e64 <ADC_Enable+0x40>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	68da      	ldr	r2, [r3, #12]
 8001e56:	2380      	movs	r3, #128	; 0x80
 8001e58:	021b      	lsls	r3, r3, #8
 8001e5a:	401a      	ands	r2, r3
 8001e5c:	2380      	movs	r3, #128	; 0x80
 8001e5e:	021b      	lsls	r3, r3, #8
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d101      	bne.n	8001e68 <ADC_Enable+0x44>
 8001e64:	2301      	movs	r3, #1
 8001e66:	e000      	b.n	8001e6a <ADC_Enable+0x46>
 8001e68:	2300      	movs	r3, #0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d152      	bne.n	8001f14 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	4a2a      	ldr	r2, [pc, #168]	; (8001f20 <ADC_Enable+0xfc>)
 8001e76:	4013      	ands	r3, r2
 8001e78:	d00d      	beq.n	8001e96 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e7e:	2210      	movs	r2, #16
 8001e80:	431a      	orrs	r2, r3
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	431a      	orrs	r2, r3
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e03f      	b.n	8001f16 <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	689a      	ldr	r2, [r3, #8]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	2101      	movs	r1, #1
 8001ea2:	430a      	orrs	r2, r1
 8001ea4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001ea6:	4b1f      	ldr	r3, [pc, #124]	; (8001f24 <ADC_Enable+0x100>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	491f      	ldr	r1, [pc, #124]	; (8001f28 <ADC_Enable+0x104>)
 8001eac:	0018      	movs	r0, r3
 8001eae:	f7fe f92b 	bl	8000108 <__udivsi3>
 8001eb2:	0003      	movs	r3, r0
 8001eb4:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001eb6:	e002      	b.n	8001ebe <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	3b01      	subs	r3, #1
 8001ebc:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d1f9      	bne.n	8001eb8 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8001ec4:	f7ff fc12 	bl	80016ec <HAL_GetTick>
 8001ec8:	0003      	movs	r3, r0
 8001eca:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001ecc:	e01b      	b.n	8001f06 <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001ece:	f7ff fc0d 	bl	80016ec <HAL_GetTick>
 8001ed2:	0002      	movs	r2, r0
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	1ad3      	subs	r3, r2, r3
 8001ed8:	2b02      	cmp	r3, #2
 8001eda:	d914      	bls.n	8001f06 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	d00d      	beq.n	8001f06 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eee:	2210      	movs	r2, #16
 8001ef0:	431a      	orrs	r2, r3
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001efa:	2201      	movs	r2, #1
 8001efc:	431a      	orrs	r2, r3
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e007      	b.n	8001f16 <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	4013      	ands	r3, r2
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d1dc      	bne.n	8001ece <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001f14:	2300      	movs	r3, #0
}
 8001f16:	0018      	movs	r0, r3
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	b004      	add	sp, #16
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	46c0      	nop			; (mov r8, r8)
 8001f20:	80000017 	.word	0x80000017
 8001f24:	2000001c 	.word	0x2000001c
 8001f28:	000f4240 	.word	0x000f4240

08001f2c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b084      	sub	sp, #16
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001f34:	2300      	movs	r3, #0
 8001f36:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	2203      	movs	r2, #3
 8001f40:	4013      	ands	r3, r2
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d112      	bne.n	8001f6c <ADC_Disable+0x40>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	4013      	ands	r3, r2
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d009      	beq.n	8001f68 <ADC_Disable+0x3c>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	68da      	ldr	r2, [r3, #12]
 8001f5a:	2380      	movs	r3, #128	; 0x80
 8001f5c:	021b      	lsls	r3, r3, #8
 8001f5e:	401a      	ands	r2, r3
 8001f60:	2380      	movs	r3, #128	; 0x80
 8001f62:	021b      	lsls	r3, r3, #8
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d101      	bne.n	8001f6c <ADC_Disable+0x40>
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e000      	b.n	8001f6e <ADC_Disable+0x42>
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d048      	beq.n	8002004 <ADC_Disable+0xd8>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	2205      	movs	r2, #5
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	2b01      	cmp	r3, #1
 8001f7e:	d110      	bne.n	8001fa2 <ADC_Disable+0x76>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	689a      	ldr	r2, [r3, #8]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	2102      	movs	r1, #2
 8001f8c:	430a      	orrs	r2, r1
 8001f8e:	609a      	str	r2, [r3, #8]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	2203      	movs	r2, #3
 8001f96:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001f98:	f7ff fba8 	bl	80016ec <HAL_GetTick>
 8001f9c:	0003      	movs	r3, r0
 8001f9e:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001fa0:	e029      	b.n	8001ff6 <ADC_Disable+0xca>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fa6:	2210      	movs	r2, #16
 8001fa8:	431a      	orrs	r2, r3
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	639a      	str	r2, [r3, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	431a      	orrs	r2, r3
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	63da      	str	r2, [r3, #60]	; 0x3c
      return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e023      	b.n	8002006 <ADC_Disable+0xda>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001fbe:	f7ff fb95 	bl	80016ec <HAL_GetTick>
 8001fc2:	0002      	movs	r2, r0
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	1ad3      	subs	r3, r2, r3
 8001fc8:	2b02      	cmp	r3, #2
 8001fca:	d914      	bls.n	8001ff6 <ADC_Disable+0xca>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d10d      	bne.n	8001ff6 <ADC_Disable+0xca>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fde:	2210      	movs	r2, #16
 8001fe0:	431a      	orrs	r2, r3
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fea:	2201      	movs	r2, #1
 8001fec:	431a      	orrs	r2, r3
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e007      	b.n	8002006 <ADC_Disable+0xda>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	4013      	ands	r3, r2
 8002000:	2b01      	cmp	r3, #1
 8002002:	d0dc      	beq.n	8001fbe <ADC_Disable+0x92>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002004:	2300      	movs	r3, #0
}
 8002006:	0018      	movs	r0, r3
 8002008:	46bd      	mov	sp, r7
 800200a:	b004      	add	sp, #16
 800200c:	bd80      	pop	{r7, pc}

0800200e <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 800200e:	b580      	push	{r7, lr}
 8002010:	b084      	sub	sp, #16
 8002012:	af00      	add	r7, sp, #0
 8002014:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002016:	2300      	movs	r3, #0
 8002018:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	2204      	movs	r2, #4
 8002022:	4013      	ands	r3, r2
 8002024:	d03a      	beq.n	800209c <ADC_ConversionStop+0x8e>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	2204      	movs	r2, #4
 800202e:	4013      	ands	r3, r2
 8002030:	2b04      	cmp	r3, #4
 8002032:	d10d      	bne.n	8002050 <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	2202      	movs	r2, #2
 800203c:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800203e:	d107      	bne.n	8002050 <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	689a      	ldr	r2, [r3, #8]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	2110      	movs	r1, #16
 800204c:	430a      	orrs	r2, r1
 800204e:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002050:	f7ff fb4c 	bl	80016ec <HAL_GetTick>
 8002054:	0003      	movs	r3, r0
 8002056:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8002058:	e01a      	b.n	8002090 <ADC_ConversionStop+0x82>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800205a:	f7ff fb47 	bl	80016ec <HAL_GetTick>
 800205e:	0002      	movs	r2, r0
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	2b02      	cmp	r3, #2
 8002066:	d913      	bls.n	8002090 <ADC_ConversionStop+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	2204      	movs	r2, #4
 8002070:	4013      	ands	r3, r2
 8002072:	d00d      	beq.n	8002090 <ADC_ConversionStop+0x82>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002078:	2210      	movs	r2, #16
 800207a:	431a      	orrs	r2, r3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002084:	2201      	movs	r2, #1
 8002086:	431a      	orrs	r2, r3
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	e006      	b.n	800209e <ADC_ConversionStop+0x90>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	2204      	movs	r2, #4
 8002098:	4013      	ands	r3, r2
 800209a:	d1de      	bne.n	800205a <ADC_ConversionStop+0x4c>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800209c:	2300      	movs	r3, #0
}
 800209e:	0018      	movs	r0, r3
 80020a0:	46bd      	mov	sp, r7
 80020a2:	b004      	add	sp, #16
 80020a4:	bd80      	pop	{r7, pc}
	...

080020a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020a8:	b590      	push	{r4, r7, lr}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	0002      	movs	r2, r0
 80020b0:	6039      	str	r1, [r7, #0]
 80020b2:	1dfb      	adds	r3, r7, #7
 80020b4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80020b6:	1dfb      	adds	r3, r7, #7
 80020b8:	781b      	ldrb	r3, [r3, #0]
 80020ba:	2b7f      	cmp	r3, #127	; 0x7f
 80020bc:	d828      	bhi.n	8002110 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80020be:	4a2f      	ldr	r2, [pc, #188]	; (800217c <__NVIC_SetPriority+0xd4>)
 80020c0:	1dfb      	adds	r3, r7, #7
 80020c2:	781b      	ldrb	r3, [r3, #0]
 80020c4:	b25b      	sxtb	r3, r3
 80020c6:	089b      	lsrs	r3, r3, #2
 80020c8:	33c0      	adds	r3, #192	; 0xc0
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	589b      	ldr	r3, [r3, r2]
 80020ce:	1dfa      	adds	r2, r7, #7
 80020d0:	7812      	ldrb	r2, [r2, #0]
 80020d2:	0011      	movs	r1, r2
 80020d4:	2203      	movs	r2, #3
 80020d6:	400a      	ands	r2, r1
 80020d8:	00d2      	lsls	r2, r2, #3
 80020da:	21ff      	movs	r1, #255	; 0xff
 80020dc:	4091      	lsls	r1, r2
 80020de:	000a      	movs	r2, r1
 80020e0:	43d2      	mvns	r2, r2
 80020e2:	401a      	ands	r2, r3
 80020e4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	019b      	lsls	r3, r3, #6
 80020ea:	22ff      	movs	r2, #255	; 0xff
 80020ec:	401a      	ands	r2, r3
 80020ee:	1dfb      	adds	r3, r7, #7
 80020f0:	781b      	ldrb	r3, [r3, #0]
 80020f2:	0018      	movs	r0, r3
 80020f4:	2303      	movs	r3, #3
 80020f6:	4003      	ands	r3, r0
 80020f8:	00db      	lsls	r3, r3, #3
 80020fa:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80020fc:	481f      	ldr	r0, [pc, #124]	; (800217c <__NVIC_SetPriority+0xd4>)
 80020fe:	1dfb      	adds	r3, r7, #7
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	b25b      	sxtb	r3, r3
 8002104:	089b      	lsrs	r3, r3, #2
 8002106:	430a      	orrs	r2, r1
 8002108:	33c0      	adds	r3, #192	; 0xc0
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800210e:	e031      	b.n	8002174 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002110:	4a1b      	ldr	r2, [pc, #108]	; (8002180 <__NVIC_SetPriority+0xd8>)
 8002112:	1dfb      	adds	r3, r7, #7
 8002114:	781b      	ldrb	r3, [r3, #0]
 8002116:	0019      	movs	r1, r3
 8002118:	230f      	movs	r3, #15
 800211a:	400b      	ands	r3, r1
 800211c:	3b08      	subs	r3, #8
 800211e:	089b      	lsrs	r3, r3, #2
 8002120:	3306      	adds	r3, #6
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	18d3      	adds	r3, r2, r3
 8002126:	3304      	adds	r3, #4
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	1dfa      	adds	r2, r7, #7
 800212c:	7812      	ldrb	r2, [r2, #0]
 800212e:	0011      	movs	r1, r2
 8002130:	2203      	movs	r2, #3
 8002132:	400a      	ands	r2, r1
 8002134:	00d2      	lsls	r2, r2, #3
 8002136:	21ff      	movs	r1, #255	; 0xff
 8002138:	4091      	lsls	r1, r2
 800213a:	000a      	movs	r2, r1
 800213c:	43d2      	mvns	r2, r2
 800213e:	401a      	ands	r2, r3
 8002140:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	019b      	lsls	r3, r3, #6
 8002146:	22ff      	movs	r2, #255	; 0xff
 8002148:	401a      	ands	r2, r3
 800214a:	1dfb      	adds	r3, r7, #7
 800214c:	781b      	ldrb	r3, [r3, #0]
 800214e:	0018      	movs	r0, r3
 8002150:	2303      	movs	r3, #3
 8002152:	4003      	ands	r3, r0
 8002154:	00db      	lsls	r3, r3, #3
 8002156:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002158:	4809      	ldr	r0, [pc, #36]	; (8002180 <__NVIC_SetPriority+0xd8>)
 800215a:	1dfb      	adds	r3, r7, #7
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	001c      	movs	r4, r3
 8002160:	230f      	movs	r3, #15
 8002162:	4023      	ands	r3, r4
 8002164:	3b08      	subs	r3, #8
 8002166:	089b      	lsrs	r3, r3, #2
 8002168:	430a      	orrs	r2, r1
 800216a:	3306      	adds	r3, #6
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	18c3      	adds	r3, r0, r3
 8002170:	3304      	adds	r3, #4
 8002172:	601a      	str	r2, [r3, #0]
}
 8002174:	46c0      	nop			; (mov r8, r8)
 8002176:	46bd      	mov	sp, r7
 8002178:	b003      	add	sp, #12
 800217a:	bd90      	pop	{r4, r7, pc}
 800217c:	e000e100 	.word	0xe000e100
 8002180:	e000ed00 	.word	0xe000ed00

08002184 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	1e5a      	subs	r2, r3, #1
 8002190:	2380      	movs	r3, #128	; 0x80
 8002192:	045b      	lsls	r3, r3, #17
 8002194:	429a      	cmp	r2, r3
 8002196:	d301      	bcc.n	800219c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002198:	2301      	movs	r3, #1
 800219a:	e010      	b.n	80021be <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800219c:	4b0a      	ldr	r3, [pc, #40]	; (80021c8 <SysTick_Config+0x44>)
 800219e:	687a      	ldr	r2, [r7, #4]
 80021a0:	3a01      	subs	r2, #1
 80021a2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021a4:	2301      	movs	r3, #1
 80021a6:	425b      	negs	r3, r3
 80021a8:	2103      	movs	r1, #3
 80021aa:	0018      	movs	r0, r3
 80021ac:	f7ff ff7c 	bl	80020a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021b0:	4b05      	ldr	r3, [pc, #20]	; (80021c8 <SysTick_Config+0x44>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021b6:	4b04      	ldr	r3, [pc, #16]	; (80021c8 <SysTick_Config+0x44>)
 80021b8:	2207      	movs	r2, #7
 80021ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021bc:	2300      	movs	r3, #0
}
 80021be:	0018      	movs	r0, r3
 80021c0:	46bd      	mov	sp, r7
 80021c2:	b002      	add	sp, #8
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	46c0      	nop			; (mov r8, r8)
 80021c8:	e000e010 	.word	0xe000e010

080021cc <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b084      	sub	sp, #16
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	60b9      	str	r1, [r7, #8]
 80021d4:	607a      	str	r2, [r7, #4]
 80021d6:	210f      	movs	r1, #15
 80021d8:	187b      	adds	r3, r7, r1
 80021da:	1c02      	adds	r2, r0, #0
 80021dc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80021de:	68ba      	ldr	r2, [r7, #8]
 80021e0:	187b      	adds	r3, r7, r1
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	b25b      	sxtb	r3, r3
 80021e6:	0011      	movs	r1, r2
 80021e8:	0018      	movs	r0, r3
 80021ea:	f7ff ff5d 	bl	80020a8 <__NVIC_SetPriority>
}
 80021ee:	46c0      	nop			; (mov r8, r8)
 80021f0:	46bd      	mov	sp, r7
 80021f2:	b004      	add	sp, #16
 80021f4:	bd80      	pop	{r7, pc}

080021f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021f6:	b580      	push	{r7, lr}
 80021f8:	b082      	sub	sp, #8
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	0018      	movs	r0, r3
 8002202:	f7ff ffbf 	bl	8002184 <SysTick_Config>
 8002206:	0003      	movs	r3, r0
}
 8002208:	0018      	movs	r0, r3
 800220a:	46bd      	mov	sp, r7
 800220c:	b002      	add	sp, #8
 800220e:	bd80      	pop	{r7, pc}

08002210 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b086      	sub	sp, #24
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800221a:	2300      	movs	r3, #0
 800221c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800221e:	e14f      	b.n	80024c0 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	2101      	movs	r1, #1
 8002226:	697a      	ldr	r2, [r7, #20]
 8002228:	4091      	lsls	r1, r2
 800222a:	000a      	movs	r2, r1
 800222c:	4013      	ands	r3, r2
 800222e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d100      	bne.n	8002238 <HAL_GPIO_Init+0x28>
 8002236:	e140      	b.n	80024ba <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	2203      	movs	r2, #3
 800223e:	4013      	ands	r3, r2
 8002240:	2b01      	cmp	r3, #1
 8002242:	d005      	beq.n	8002250 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	2203      	movs	r2, #3
 800224a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800224c:	2b02      	cmp	r3, #2
 800224e:	d130      	bne.n	80022b2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	005b      	lsls	r3, r3, #1
 800225a:	2203      	movs	r2, #3
 800225c:	409a      	lsls	r2, r3
 800225e:	0013      	movs	r3, r2
 8002260:	43da      	mvns	r2, r3
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	4013      	ands	r3, r2
 8002266:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	68da      	ldr	r2, [r3, #12]
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	005b      	lsls	r3, r3, #1
 8002270:	409a      	lsls	r2, r3
 8002272:	0013      	movs	r3, r2
 8002274:	693a      	ldr	r2, [r7, #16]
 8002276:	4313      	orrs	r3, r2
 8002278:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	693a      	ldr	r2, [r7, #16]
 800227e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002286:	2201      	movs	r2, #1
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	409a      	lsls	r2, r3
 800228c:	0013      	movs	r3, r2
 800228e:	43da      	mvns	r2, r3
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	4013      	ands	r3, r2
 8002294:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	091b      	lsrs	r3, r3, #4
 800229c:	2201      	movs	r2, #1
 800229e:	401a      	ands	r2, r3
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	409a      	lsls	r2, r3
 80022a4:	0013      	movs	r3, r2
 80022a6:	693a      	ldr	r2, [r7, #16]
 80022a8:	4313      	orrs	r3, r2
 80022aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	693a      	ldr	r2, [r7, #16]
 80022b0:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	2203      	movs	r2, #3
 80022b8:	4013      	ands	r3, r2
 80022ba:	2b03      	cmp	r3, #3
 80022bc:	d017      	beq.n	80022ee <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	68db      	ldr	r3, [r3, #12]
 80022c2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	005b      	lsls	r3, r3, #1
 80022c8:	2203      	movs	r2, #3
 80022ca:	409a      	lsls	r2, r3
 80022cc:	0013      	movs	r3, r2
 80022ce:	43da      	mvns	r2, r3
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	4013      	ands	r3, r2
 80022d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	689a      	ldr	r2, [r3, #8]
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	005b      	lsls	r3, r3, #1
 80022de:	409a      	lsls	r2, r3
 80022e0:	0013      	movs	r3, r2
 80022e2:	693a      	ldr	r2, [r7, #16]
 80022e4:	4313      	orrs	r3, r2
 80022e6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	693a      	ldr	r2, [r7, #16]
 80022ec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	2203      	movs	r2, #3
 80022f4:	4013      	ands	r3, r2
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	d123      	bne.n	8002342 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	08da      	lsrs	r2, r3, #3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	3208      	adds	r2, #8
 8002302:	0092      	lsls	r2, r2, #2
 8002304:	58d3      	ldr	r3, [r2, r3]
 8002306:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	2207      	movs	r2, #7
 800230c:	4013      	ands	r3, r2
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	220f      	movs	r2, #15
 8002312:	409a      	lsls	r2, r3
 8002314:	0013      	movs	r3, r2
 8002316:	43da      	mvns	r2, r3
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	4013      	ands	r3, r2
 800231c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	691a      	ldr	r2, [r3, #16]
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	2107      	movs	r1, #7
 8002326:	400b      	ands	r3, r1
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	409a      	lsls	r2, r3
 800232c:	0013      	movs	r3, r2
 800232e:	693a      	ldr	r2, [r7, #16]
 8002330:	4313      	orrs	r3, r2
 8002332:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	08da      	lsrs	r2, r3, #3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	3208      	adds	r2, #8
 800233c:	0092      	lsls	r2, r2, #2
 800233e:	6939      	ldr	r1, [r7, #16]
 8002340:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	005b      	lsls	r3, r3, #1
 800234c:	2203      	movs	r2, #3
 800234e:	409a      	lsls	r2, r3
 8002350:	0013      	movs	r3, r2
 8002352:	43da      	mvns	r2, r3
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	4013      	ands	r3, r2
 8002358:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	2203      	movs	r2, #3
 8002360:	401a      	ands	r2, r3
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	005b      	lsls	r3, r3, #1
 8002366:	409a      	lsls	r2, r3
 8002368:	0013      	movs	r3, r2
 800236a:	693a      	ldr	r2, [r7, #16]
 800236c:	4313      	orrs	r3, r2
 800236e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	693a      	ldr	r2, [r7, #16]
 8002374:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	685a      	ldr	r2, [r3, #4]
 800237a:	23c0      	movs	r3, #192	; 0xc0
 800237c:	029b      	lsls	r3, r3, #10
 800237e:	4013      	ands	r3, r2
 8002380:	d100      	bne.n	8002384 <HAL_GPIO_Init+0x174>
 8002382:	e09a      	b.n	80024ba <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002384:	4b54      	ldr	r3, [pc, #336]	; (80024d8 <HAL_GPIO_Init+0x2c8>)
 8002386:	699a      	ldr	r2, [r3, #24]
 8002388:	4b53      	ldr	r3, [pc, #332]	; (80024d8 <HAL_GPIO_Init+0x2c8>)
 800238a:	2101      	movs	r1, #1
 800238c:	430a      	orrs	r2, r1
 800238e:	619a      	str	r2, [r3, #24]
 8002390:	4b51      	ldr	r3, [pc, #324]	; (80024d8 <HAL_GPIO_Init+0x2c8>)
 8002392:	699b      	ldr	r3, [r3, #24]
 8002394:	2201      	movs	r2, #1
 8002396:	4013      	ands	r3, r2
 8002398:	60bb      	str	r3, [r7, #8]
 800239a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800239c:	4a4f      	ldr	r2, [pc, #316]	; (80024dc <HAL_GPIO_Init+0x2cc>)
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	089b      	lsrs	r3, r3, #2
 80023a2:	3302      	adds	r3, #2
 80023a4:	009b      	lsls	r3, r3, #2
 80023a6:	589b      	ldr	r3, [r3, r2]
 80023a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	2203      	movs	r2, #3
 80023ae:	4013      	ands	r3, r2
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	220f      	movs	r2, #15
 80023b4:	409a      	lsls	r2, r3
 80023b6:	0013      	movs	r3, r2
 80023b8:	43da      	mvns	r2, r3
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	4013      	ands	r3, r2
 80023be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80023c0:	687a      	ldr	r2, [r7, #4]
 80023c2:	2390      	movs	r3, #144	; 0x90
 80023c4:	05db      	lsls	r3, r3, #23
 80023c6:	429a      	cmp	r2, r3
 80023c8:	d013      	beq.n	80023f2 <HAL_GPIO_Init+0x1e2>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4a44      	ldr	r2, [pc, #272]	; (80024e0 <HAL_GPIO_Init+0x2d0>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d00d      	beq.n	80023ee <HAL_GPIO_Init+0x1de>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4a43      	ldr	r2, [pc, #268]	; (80024e4 <HAL_GPIO_Init+0x2d4>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d007      	beq.n	80023ea <HAL_GPIO_Init+0x1da>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	4a42      	ldr	r2, [pc, #264]	; (80024e8 <HAL_GPIO_Init+0x2d8>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d101      	bne.n	80023e6 <HAL_GPIO_Init+0x1d6>
 80023e2:	2303      	movs	r3, #3
 80023e4:	e006      	b.n	80023f4 <HAL_GPIO_Init+0x1e4>
 80023e6:	2305      	movs	r3, #5
 80023e8:	e004      	b.n	80023f4 <HAL_GPIO_Init+0x1e4>
 80023ea:	2302      	movs	r3, #2
 80023ec:	e002      	b.n	80023f4 <HAL_GPIO_Init+0x1e4>
 80023ee:	2301      	movs	r3, #1
 80023f0:	e000      	b.n	80023f4 <HAL_GPIO_Init+0x1e4>
 80023f2:	2300      	movs	r3, #0
 80023f4:	697a      	ldr	r2, [r7, #20]
 80023f6:	2103      	movs	r1, #3
 80023f8:	400a      	ands	r2, r1
 80023fa:	0092      	lsls	r2, r2, #2
 80023fc:	4093      	lsls	r3, r2
 80023fe:	693a      	ldr	r2, [r7, #16]
 8002400:	4313      	orrs	r3, r2
 8002402:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002404:	4935      	ldr	r1, [pc, #212]	; (80024dc <HAL_GPIO_Init+0x2cc>)
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	089b      	lsrs	r3, r3, #2
 800240a:	3302      	adds	r3, #2
 800240c:	009b      	lsls	r3, r3, #2
 800240e:	693a      	ldr	r2, [r7, #16]
 8002410:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002412:	4b36      	ldr	r3, [pc, #216]	; (80024ec <HAL_GPIO_Init+0x2dc>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	43da      	mvns	r2, r3
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	4013      	ands	r3, r2
 8002420:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	685a      	ldr	r2, [r3, #4]
 8002426:	2380      	movs	r3, #128	; 0x80
 8002428:	025b      	lsls	r3, r3, #9
 800242a:	4013      	ands	r3, r2
 800242c:	d003      	beq.n	8002436 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800242e:	693a      	ldr	r2, [r7, #16]
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	4313      	orrs	r3, r2
 8002434:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002436:	4b2d      	ldr	r3, [pc, #180]	; (80024ec <HAL_GPIO_Init+0x2dc>)
 8002438:	693a      	ldr	r2, [r7, #16]
 800243a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800243c:	4b2b      	ldr	r3, [pc, #172]	; (80024ec <HAL_GPIO_Init+0x2dc>)
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	43da      	mvns	r2, r3
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	4013      	ands	r3, r2
 800244a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	685a      	ldr	r2, [r3, #4]
 8002450:	2380      	movs	r3, #128	; 0x80
 8002452:	029b      	lsls	r3, r3, #10
 8002454:	4013      	ands	r3, r2
 8002456:	d003      	beq.n	8002460 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8002458:	693a      	ldr	r2, [r7, #16]
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	4313      	orrs	r3, r2
 800245e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002460:	4b22      	ldr	r3, [pc, #136]	; (80024ec <HAL_GPIO_Init+0x2dc>)
 8002462:	693a      	ldr	r2, [r7, #16]
 8002464:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002466:	4b21      	ldr	r3, [pc, #132]	; (80024ec <HAL_GPIO_Init+0x2dc>)
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	43da      	mvns	r2, r3
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	4013      	ands	r3, r2
 8002474:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	685a      	ldr	r2, [r3, #4]
 800247a:	2380      	movs	r3, #128	; 0x80
 800247c:	035b      	lsls	r3, r3, #13
 800247e:	4013      	ands	r3, r2
 8002480:	d003      	beq.n	800248a <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8002482:	693a      	ldr	r2, [r7, #16]
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	4313      	orrs	r3, r2
 8002488:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800248a:	4b18      	ldr	r3, [pc, #96]	; (80024ec <HAL_GPIO_Init+0x2dc>)
 800248c:	693a      	ldr	r2, [r7, #16]
 800248e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002490:	4b16      	ldr	r3, [pc, #88]	; (80024ec <HAL_GPIO_Init+0x2dc>)
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	43da      	mvns	r2, r3
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	4013      	ands	r3, r2
 800249e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	685a      	ldr	r2, [r3, #4]
 80024a4:	2380      	movs	r3, #128	; 0x80
 80024a6:	039b      	lsls	r3, r3, #14
 80024a8:	4013      	ands	r3, r2
 80024aa:	d003      	beq.n	80024b4 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80024ac:	693a      	ldr	r2, [r7, #16]
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	4313      	orrs	r3, r2
 80024b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80024b4:	4b0d      	ldr	r3, [pc, #52]	; (80024ec <HAL_GPIO_Init+0x2dc>)
 80024b6:	693a      	ldr	r2, [r7, #16]
 80024b8:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	3301      	adds	r3, #1
 80024be:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	40da      	lsrs	r2, r3
 80024c8:	1e13      	subs	r3, r2, #0
 80024ca:	d000      	beq.n	80024ce <HAL_GPIO_Init+0x2be>
 80024cc:	e6a8      	b.n	8002220 <HAL_GPIO_Init+0x10>
  } 
}
 80024ce:	46c0      	nop			; (mov r8, r8)
 80024d0:	46c0      	nop			; (mov r8, r8)
 80024d2:	46bd      	mov	sp, r7
 80024d4:	b006      	add	sp, #24
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	40021000 	.word	0x40021000
 80024dc:	40010000 	.word	0x40010000
 80024e0:	48000400 	.word	0x48000400
 80024e4:	48000800 	.word	0x48000800
 80024e8:	48000c00 	.word	0x48000c00
 80024ec:	40010400 	.word	0x40010400

080024f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b084      	sub	sp, #16
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	000a      	movs	r2, r1
 80024fa:	1cbb      	adds	r3, r7, #2
 80024fc:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	691b      	ldr	r3, [r3, #16]
 8002502:	1cba      	adds	r2, r7, #2
 8002504:	8812      	ldrh	r2, [r2, #0]
 8002506:	4013      	ands	r3, r2
 8002508:	d004      	beq.n	8002514 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800250a:	230f      	movs	r3, #15
 800250c:	18fb      	adds	r3, r7, r3
 800250e:	2201      	movs	r2, #1
 8002510:	701a      	strb	r2, [r3, #0]
 8002512:	e003      	b.n	800251c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002514:	230f      	movs	r3, #15
 8002516:	18fb      	adds	r3, r7, r3
 8002518:	2200      	movs	r2, #0
 800251a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800251c:	230f      	movs	r3, #15
 800251e:	18fb      	adds	r3, r7, r3
 8002520:	781b      	ldrb	r3, [r3, #0]
  }
 8002522:	0018      	movs	r0, r3
 8002524:	46bd      	mov	sp, r7
 8002526:	b004      	add	sp, #16
 8002528:	bd80      	pop	{r7, pc}

0800252a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800252a:	b580      	push	{r7, lr}
 800252c:	b082      	sub	sp, #8
 800252e:	af00      	add	r7, sp, #0
 8002530:	6078      	str	r0, [r7, #4]
 8002532:	0008      	movs	r0, r1
 8002534:	0011      	movs	r1, r2
 8002536:	1cbb      	adds	r3, r7, #2
 8002538:	1c02      	adds	r2, r0, #0
 800253a:	801a      	strh	r2, [r3, #0]
 800253c:	1c7b      	adds	r3, r7, #1
 800253e:	1c0a      	adds	r2, r1, #0
 8002540:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002542:	1c7b      	adds	r3, r7, #1
 8002544:	781b      	ldrb	r3, [r3, #0]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d004      	beq.n	8002554 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800254a:	1cbb      	adds	r3, r7, #2
 800254c:	881a      	ldrh	r2, [r3, #0]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002552:	e003      	b.n	800255c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002554:	1cbb      	adds	r3, r7, #2
 8002556:	881a      	ldrh	r2, [r3, #0]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800255c:	46c0      	nop			; (mov r8, r8)
 800255e:	46bd      	mov	sp, r7
 8002560:	b002      	add	sp, #8
 8002562:	bd80      	pop	{r7, pc}

08002564 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b088      	sub	sp, #32
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d101      	bne.n	8002576 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e301      	b.n	8002b7a <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	2201      	movs	r2, #1
 800257c:	4013      	ands	r3, r2
 800257e:	d100      	bne.n	8002582 <HAL_RCC_OscConfig+0x1e>
 8002580:	e08d      	b.n	800269e <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002582:	4bc3      	ldr	r3, [pc, #780]	; (8002890 <HAL_RCC_OscConfig+0x32c>)
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	220c      	movs	r2, #12
 8002588:	4013      	ands	r3, r2
 800258a:	2b04      	cmp	r3, #4
 800258c:	d00e      	beq.n	80025ac <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800258e:	4bc0      	ldr	r3, [pc, #768]	; (8002890 <HAL_RCC_OscConfig+0x32c>)
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	220c      	movs	r2, #12
 8002594:	4013      	ands	r3, r2
 8002596:	2b08      	cmp	r3, #8
 8002598:	d116      	bne.n	80025c8 <HAL_RCC_OscConfig+0x64>
 800259a:	4bbd      	ldr	r3, [pc, #756]	; (8002890 <HAL_RCC_OscConfig+0x32c>)
 800259c:	685a      	ldr	r2, [r3, #4]
 800259e:	2380      	movs	r3, #128	; 0x80
 80025a0:	025b      	lsls	r3, r3, #9
 80025a2:	401a      	ands	r2, r3
 80025a4:	2380      	movs	r3, #128	; 0x80
 80025a6:	025b      	lsls	r3, r3, #9
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d10d      	bne.n	80025c8 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025ac:	4bb8      	ldr	r3, [pc, #736]	; (8002890 <HAL_RCC_OscConfig+0x32c>)
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	2380      	movs	r3, #128	; 0x80
 80025b2:	029b      	lsls	r3, r3, #10
 80025b4:	4013      	ands	r3, r2
 80025b6:	d100      	bne.n	80025ba <HAL_RCC_OscConfig+0x56>
 80025b8:	e070      	b.n	800269c <HAL_RCC_OscConfig+0x138>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d000      	beq.n	80025c4 <HAL_RCC_OscConfig+0x60>
 80025c2:	e06b      	b.n	800269c <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	e2d8      	b.n	8002b7a <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d107      	bne.n	80025e0 <HAL_RCC_OscConfig+0x7c>
 80025d0:	4baf      	ldr	r3, [pc, #700]	; (8002890 <HAL_RCC_OscConfig+0x32c>)
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	4bae      	ldr	r3, [pc, #696]	; (8002890 <HAL_RCC_OscConfig+0x32c>)
 80025d6:	2180      	movs	r1, #128	; 0x80
 80025d8:	0249      	lsls	r1, r1, #9
 80025da:	430a      	orrs	r2, r1
 80025dc:	601a      	str	r2, [r3, #0]
 80025de:	e02f      	b.n	8002640 <HAL_RCC_OscConfig+0xdc>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d10c      	bne.n	8002602 <HAL_RCC_OscConfig+0x9e>
 80025e8:	4ba9      	ldr	r3, [pc, #676]	; (8002890 <HAL_RCC_OscConfig+0x32c>)
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	4ba8      	ldr	r3, [pc, #672]	; (8002890 <HAL_RCC_OscConfig+0x32c>)
 80025ee:	49a9      	ldr	r1, [pc, #676]	; (8002894 <HAL_RCC_OscConfig+0x330>)
 80025f0:	400a      	ands	r2, r1
 80025f2:	601a      	str	r2, [r3, #0]
 80025f4:	4ba6      	ldr	r3, [pc, #664]	; (8002890 <HAL_RCC_OscConfig+0x32c>)
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	4ba5      	ldr	r3, [pc, #660]	; (8002890 <HAL_RCC_OscConfig+0x32c>)
 80025fa:	49a7      	ldr	r1, [pc, #668]	; (8002898 <HAL_RCC_OscConfig+0x334>)
 80025fc:	400a      	ands	r2, r1
 80025fe:	601a      	str	r2, [r3, #0]
 8002600:	e01e      	b.n	8002640 <HAL_RCC_OscConfig+0xdc>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	2b05      	cmp	r3, #5
 8002608:	d10e      	bne.n	8002628 <HAL_RCC_OscConfig+0xc4>
 800260a:	4ba1      	ldr	r3, [pc, #644]	; (8002890 <HAL_RCC_OscConfig+0x32c>)
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	4ba0      	ldr	r3, [pc, #640]	; (8002890 <HAL_RCC_OscConfig+0x32c>)
 8002610:	2180      	movs	r1, #128	; 0x80
 8002612:	02c9      	lsls	r1, r1, #11
 8002614:	430a      	orrs	r2, r1
 8002616:	601a      	str	r2, [r3, #0]
 8002618:	4b9d      	ldr	r3, [pc, #628]	; (8002890 <HAL_RCC_OscConfig+0x32c>)
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	4b9c      	ldr	r3, [pc, #624]	; (8002890 <HAL_RCC_OscConfig+0x32c>)
 800261e:	2180      	movs	r1, #128	; 0x80
 8002620:	0249      	lsls	r1, r1, #9
 8002622:	430a      	orrs	r2, r1
 8002624:	601a      	str	r2, [r3, #0]
 8002626:	e00b      	b.n	8002640 <HAL_RCC_OscConfig+0xdc>
 8002628:	4b99      	ldr	r3, [pc, #612]	; (8002890 <HAL_RCC_OscConfig+0x32c>)
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	4b98      	ldr	r3, [pc, #608]	; (8002890 <HAL_RCC_OscConfig+0x32c>)
 800262e:	4999      	ldr	r1, [pc, #612]	; (8002894 <HAL_RCC_OscConfig+0x330>)
 8002630:	400a      	ands	r2, r1
 8002632:	601a      	str	r2, [r3, #0]
 8002634:	4b96      	ldr	r3, [pc, #600]	; (8002890 <HAL_RCC_OscConfig+0x32c>)
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	4b95      	ldr	r3, [pc, #596]	; (8002890 <HAL_RCC_OscConfig+0x32c>)
 800263a:	4997      	ldr	r1, [pc, #604]	; (8002898 <HAL_RCC_OscConfig+0x334>)
 800263c:	400a      	ands	r2, r1
 800263e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d014      	beq.n	8002672 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002648:	f7ff f850 	bl	80016ec <HAL_GetTick>
 800264c:	0003      	movs	r3, r0
 800264e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002650:	e008      	b.n	8002664 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002652:	f7ff f84b 	bl	80016ec <HAL_GetTick>
 8002656:	0002      	movs	r2, r0
 8002658:	69bb      	ldr	r3, [r7, #24]
 800265a:	1ad3      	subs	r3, r2, r3
 800265c:	2b64      	cmp	r3, #100	; 0x64
 800265e:	d901      	bls.n	8002664 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8002660:	2303      	movs	r3, #3
 8002662:	e28a      	b.n	8002b7a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002664:	4b8a      	ldr	r3, [pc, #552]	; (8002890 <HAL_RCC_OscConfig+0x32c>)
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	2380      	movs	r3, #128	; 0x80
 800266a:	029b      	lsls	r3, r3, #10
 800266c:	4013      	ands	r3, r2
 800266e:	d0f0      	beq.n	8002652 <HAL_RCC_OscConfig+0xee>
 8002670:	e015      	b.n	800269e <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002672:	f7ff f83b 	bl	80016ec <HAL_GetTick>
 8002676:	0003      	movs	r3, r0
 8002678:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800267a:	e008      	b.n	800268e <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800267c:	f7ff f836 	bl	80016ec <HAL_GetTick>
 8002680:	0002      	movs	r2, r0
 8002682:	69bb      	ldr	r3, [r7, #24]
 8002684:	1ad3      	subs	r3, r2, r3
 8002686:	2b64      	cmp	r3, #100	; 0x64
 8002688:	d901      	bls.n	800268e <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800268a:	2303      	movs	r3, #3
 800268c:	e275      	b.n	8002b7a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800268e:	4b80      	ldr	r3, [pc, #512]	; (8002890 <HAL_RCC_OscConfig+0x32c>)
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	2380      	movs	r3, #128	; 0x80
 8002694:	029b      	lsls	r3, r3, #10
 8002696:	4013      	ands	r3, r2
 8002698:	d1f0      	bne.n	800267c <HAL_RCC_OscConfig+0x118>
 800269a:	e000      	b.n	800269e <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800269c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	2202      	movs	r2, #2
 80026a4:	4013      	ands	r3, r2
 80026a6:	d100      	bne.n	80026aa <HAL_RCC_OscConfig+0x146>
 80026a8:	e069      	b.n	800277e <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80026aa:	4b79      	ldr	r3, [pc, #484]	; (8002890 <HAL_RCC_OscConfig+0x32c>)
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	220c      	movs	r2, #12
 80026b0:	4013      	ands	r3, r2
 80026b2:	d00b      	beq.n	80026cc <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80026b4:	4b76      	ldr	r3, [pc, #472]	; (8002890 <HAL_RCC_OscConfig+0x32c>)
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	220c      	movs	r2, #12
 80026ba:	4013      	ands	r3, r2
 80026bc:	2b08      	cmp	r3, #8
 80026be:	d11c      	bne.n	80026fa <HAL_RCC_OscConfig+0x196>
 80026c0:	4b73      	ldr	r3, [pc, #460]	; (8002890 <HAL_RCC_OscConfig+0x32c>)
 80026c2:	685a      	ldr	r2, [r3, #4]
 80026c4:	2380      	movs	r3, #128	; 0x80
 80026c6:	025b      	lsls	r3, r3, #9
 80026c8:	4013      	ands	r3, r2
 80026ca:	d116      	bne.n	80026fa <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026cc:	4b70      	ldr	r3, [pc, #448]	; (8002890 <HAL_RCC_OscConfig+0x32c>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	2202      	movs	r2, #2
 80026d2:	4013      	ands	r3, r2
 80026d4:	d005      	beq.n	80026e2 <HAL_RCC_OscConfig+0x17e>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	68db      	ldr	r3, [r3, #12]
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d001      	beq.n	80026e2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e24b      	b.n	8002b7a <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026e2:	4b6b      	ldr	r3, [pc, #428]	; (8002890 <HAL_RCC_OscConfig+0x32c>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	22f8      	movs	r2, #248	; 0xf8
 80026e8:	4393      	bics	r3, r2
 80026ea:	0019      	movs	r1, r3
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	691b      	ldr	r3, [r3, #16]
 80026f0:	00da      	lsls	r2, r3, #3
 80026f2:	4b67      	ldr	r3, [pc, #412]	; (8002890 <HAL_RCC_OscConfig+0x32c>)
 80026f4:	430a      	orrs	r2, r1
 80026f6:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026f8:	e041      	b.n	800277e <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	68db      	ldr	r3, [r3, #12]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d024      	beq.n	800274c <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002702:	4b63      	ldr	r3, [pc, #396]	; (8002890 <HAL_RCC_OscConfig+0x32c>)
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	4b62      	ldr	r3, [pc, #392]	; (8002890 <HAL_RCC_OscConfig+0x32c>)
 8002708:	2101      	movs	r1, #1
 800270a:	430a      	orrs	r2, r1
 800270c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800270e:	f7fe ffed 	bl	80016ec <HAL_GetTick>
 8002712:	0003      	movs	r3, r0
 8002714:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002716:	e008      	b.n	800272a <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002718:	f7fe ffe8 	bl	80016ec <HAL_GetTick>
 800271c:	0002      	movs	r2, r0
 800271e:	69bb      	ldr	r3, [r7, #24]
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	2b02      	cmp	r3, #2
 8002724:	d901      	bls.n	800272a <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8002726:	2303      	movs	r3, #3
 8002728:	e227      	b.n	8002b7a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800272a:	4b59      	ldr	r3, [pc, #356]	; (8002890 <HAL_RCC_OscConfig+0x32c>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	2202      	movs	r2, #2
 8002730:	4013      	ands	r3, r2
 8002732:	d0f1      	beq.n	8002718 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002734:	4b56      	ldr	r3, [pc, #344]	; (8002890 <HAL_RCC_OscConfig+0x32c>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	22f8      	movs	r2, #248	; 0xf8
 800273a:	4393      	bics	r3, r2
 800273c:	0019      	movs	r1, r3
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	691b      	ldr	r3, [r3, #16]
 8002742:	00da      	lsls	r2, r3, #3
 8002744:	4b52      	ldr	r3, [pc, #328]	; (8002890 <HAL_RCC_OscConfig+0x32c>)
 8002746:	430a      	orrs	r2, r1
 8002748:	601a      	str	r2, [r3, #0]
 800274a:	e018      	b.n	800277e <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800274c:	4b50      	ldr	r3, [pc, #320]	; (8002890 <HAL_RCC_OscConfig+0x32c>)
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	4b4f      	ldr	r3, [pc, #316]	; (8002890 <HAL_RCC_OscConfig+0x32c>)
 8002752:	2101      	movs	r1, #1
 8002754:	438a      	bics	r2, r1
 8002756:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002758:	f7fe ffc8 	bl	80016ec <HAL_GetTick>
 800275c:	0003      	movs	r3, r0
 800275e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002760:	e008      	b.n	8002774 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002762:	f7fe ffc3 	bl	80016ec <HAL_GetTick>
 8002766:	0002      	movs	r2, r0
 8002768:	69bb      	ldr	r3, [r7, #24]
 800276a:	1ad3      	subs	r3, r2, r3
 800276c:	2b02      	cmp	r3, #2
 800276e:	d901      	bls.n	8002774 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8002770:	2303      	movs	r3, #3
 8002772:	e202      	b.n	8002b7a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002774:	4b46      	ldr	r3, [pc, #280]	; (8002890 <HAL_RCC_OscConfig+0x32c>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	2202      	movs	r2, #2
 800277a:	4013      	ands	r3, r2
 800277c:	d1f1      	bne.n	8002762 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	2208      	movs	r2, #8
 8002784:	4013      	ands	r3, r2
 8002786:	d036      	beq.n	80027f6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	69db      	ldr	r3, [r3, #28]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d019      	beq.n	80027c4 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002790:	4b3f      	ldr	r3, [pc, #252]	; (8002890 <HAL_RCC_OscConfig+0x32c>)
 8002792:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002794:	4b3e      	ldr	r3, [pc, #248]	; (8002890 <HAL_RCC_OscConfig+0x32c>)
 8002796:	2101      	movs	r1, #1
 8002798:	430a      	orrs	r2, r1
 800279a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800279c:	f7fe ffa6 	bl	80016ec <HAL_GetTick>
 80027a0:	0003      	movs	r3, r0
 80027a2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027a4:	e008      	b.n	80027b8 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027a6:	f7fe ffa1 	bl	80016ec <HAL_GetTick>
 80027aa:	0002      	movs	r2, r0
 80027ac:	69bb      	ldr	r3, [r7, #24]
 80027ae:	1ad3      	subs	r3, r2, r3
 80027b0:	2b02      	cmp	r3, #2
 80027b2:	d901      	bls.n	80027b8 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80027b4:	2303      	movs	r3, #3
 80027b6:	e1e0      	b.n	8002b7a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027b8:	4b35      	ldr	r3, [pc, #212]	; (8002890 <HAL_RCC_OscConfig+0x32c>)
 80027ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027bc:	2202      	movs	r2, #2
 80027be:	4013      	ands	r3, r2
 80027c0:	d0f1      	beq.n	80027a6 <HAL_RCC_OscConfig+0x242>
 80027c2:	e018      	b.n	80027f6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027c4:	4b32      	ldr	r3, [pc, #200]	; (8002890 <HAL_RCC_OscConfig+0x32c>)
 80027c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027c8:	4b31      	ldr	r3, [pc, #196]	; (8002890 <HAL_RCC_OscConfig+0x32c>)
 80027ca:	2101      	movs	r1, #1
 80027cc:	438a      	bics	r2, r1
 80027ce:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027d0:	f7fe ff8c 	bl	80016ec <HAL_GetTick>
 80027d4:	0003      	movs	r3, r0
 80027d6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027d8:	e008      	b.n	80027ec <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027da:	f7fe ff87 	bl	80016ec <HAL_GetTick>
 80027de:	0002      	movs	r2, r0
 80027e0:	69bb      	ldr	r3, [r7, #24]
 80027e2:	1ad3      	subs	r3, r2, r3
 80027e4:	2b02      	cmp	r3, #2
 80027e6:	d901      	bls.n	80027ec <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80027e8:	2303      	movs	r3, #3
 80027ea:	e1c6      	b.n	8002b7a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027ec:	4b28      	ldr	r3, [pc, #160]	; (8002890 <HAL_RCC_OscConfig+0x32c>)
 80027ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f0:	2202      	movs	r2, #2
 80027f2:	4013      	ands	r3, r2
 80027f4:	d1f1      	bne.n	80027da <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	2204      	movs	r2, #4
 80027fc:	4013      	ands	r3, r2
 80027fe:	d100      	bne.n	8002802 <HAL_RCC_OscConfig+0x29e>
 8002800:	e0b4      	b.n	800296c <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002802:	201f      	movs	r0, #31
 8002804:	183b      	adds	r3, r7, r0
 8002806:	2200      	movs	r2, #0
 8002808:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800280a:	4b21      	ldr	r3, [pc, #132]	; (8002890 <HAL_RCC_OscConfig+0x32c>)
 800280c:	69da      	ldr	r2, [r3, #28]
 800280e:	2380      	movs	r3, #128	; 0x80
 8002810:	055b      	lsls	r3, r3, #21
 8002812:	4013      	ands	r3, r2
 8002814:	d110      	bne.n	8002838 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002816:	4b1e      	ldr	r3, [pc, #120]	; (8002890 <HAL_RCC_OscConfig+0x32c>)
 8002818:	69da      	ldr	r2, [r3, #28]
 800281a:	4b1d      	ldr	r3, [pc, #116]	; (8002890 <HAL_RCC_OscConfig+0x32c>)
 800281c:	2180      	movs	r1, #128	; 0x80
 800281e:	0549      	lsls	r1, r1, #21
 8002820:	430a      	orrs	r2, r1
 8002822:	61da      	str	r2, [r3, #28]
 8002824:	4b1a      	ldr	r3, [pc, #104]	; (8002890 <HAL_RCC_OscConfig+0x32c>)
 8002826:	69da      	ldr	r2, [r3, #28]
 8002828:	2380      	movs	r3, #128	; 0x80
 800282a:	055b      	lsls	r3, r3, #21
 800282c:	4013      	ands	r3, r2
 800282e:	60fb      	str	r3, [r7, #12]
 8002830:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002832:	183b      	adds	r3, r7, r0
 8002834:	2201      	movs	r2, #1
 8002836:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002838:	4b18      	ldr	r3, [pc, #96]	; (800289c <HAL_RCC_OscConfig+0x338>)
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	2380      	movs	r3, #128	; 0x80
 800283e:	005b      	lsls	r3, r3, #1
 8002840:	4013      	ands	r3, r2
 8002842:	d11a      	bne.n	800287a <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002844:	4b15      	ldr	r3, [pc, #84]	; (800289c <HAL_RCC_OscConfig+0x338>)
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	4b14      	ldr	r3, [pc, #80]	; (800289c <HAL_RCC_OscConfig+0x338>)
 800284a:	2180      	movs	r1, #128	; 0x80
 800284c:	0049      	lsls	r1, r1, #1
 800284e:	430a      	orrs	r2, r1
 8002850:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002852:	f7fe ff4b 	bl	80016ec <HAL_GetTick>
 8002856:	0003      	movs	r3, r0
 8002858:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800285a:	e008      	b.n	800286e <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800285c:	f7fe ff46 	bl	80016ec <HAL_GetTick>
 8002860:	0002      	movs	r2, r0
 8002862:	69bb      	ldr	r3, [r7, #24]
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	2b64      	cmp	r3, #100	; 0x64
 8002868:	d901      	bls.n	800286e <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 800286a:	2303      	movs	r3, #3
 800286c:	e185      	b.n	8002b7a <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800286e:	4b0b      	ldr	r3, [pc, #44]	; (800289c <HAL_RCC_OscConfig+0x338>)
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	2380      	movs	r3, #128	; 0x80
 8002874:	005b      	lsls	r3, r3, #1
 8002876:	4013      	ands	r3, r2
 8002878:	d0f0      	beq.n	800285c <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	2b01      	cmp	r3, #1
 8002880:	d10e      	bne.n	80028a0 <HAL_RCC_OscConfig+0x33c>
 8002882:	4b03      	ldr	r3, [pc, #12]	; (8002890 <HAL_RCC_OscConfig+0x32c>)
 8002884:	6a1a      	ldr	r2, [r3, #32]
 8002886:	4b02      	ldr	r3, [pc, #8]	; (8002890 <HAL_RCC_OscConfig+0x32c>)
 8002888:	2101      	movs	r1, #1
 800288a:	430a      	orrs	r2, r1
 800288c:	621a      	str	r2, [r3, #32]
 800288e:	e035      	b.n	80028fc <HAL_RCC_OscConfig+0x398>
 8002890:	40021000 	.word	0x40021000
 8002894:	fffeffff 	.word	0xfffeffff
 8002898:	fffbffff 	.word	0xfffbffff
 800289c:	40007000 	.word	0x40007000
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d10c      	bne.n	80028c2 <HAL_RCC_OscConfig+0x35e>
 80028a8:	4bb6      	ldr	r3, [pc, #728]	; (8002b84 <HAL_RCC_OscConfig+0x620>)
 80028aa:	6a1a      	ldr	r2, [r3, #32]
 80028ac:	4bb5      	ldr	r3, [pc, #724]	; (8002b84 <HAL_RCC_OscConfig+0x620>)
 80028ae:	2101      	movs	r1, #1
 80028b0:	438a      	bics	r2, r1
 80028b2:	621a      	str	r2, [r3, #32]
 80028b4:	4bb3      	ldr	r3, [pc, #716]	; (8002b84 <HAL_RCC_OscConfig+0x620>)
 80028b6:	6a1a      	ldr	r2, [r3, #32]
 80028b8:	4bb2      	ldr	r3, [pc, #712]	; (8002b84 <HAL_RCC_OscConfig+0x620>)
 80028ba:	2104      	movs	r1, #4
 80028bc:	438a      	bics	r2, r1
 80028be:	621a      	str	r2, [r3, #32]
 80028c0:	e01c      	b.n	80028fc <HAL_RCC_OscConfig+0x398>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	2b05      	cmp	r3, #5
 80028c8:	d10c      	bne.n	80028e4 <HAL_RCC_OscConfig+0x380>
 80028ca:	4bae      	ldr	r3, [pc, #696]	; (8002b84 <HAL_RCC_OscConfig+0x620>)
 80028cc:	6a1a      	ldr	r2, [r3, #32]
 80028ce:	4bad      	ldr	r3, [pc, #692]	; (8002b84 <HAL_RCC_OscConfig+0x620>)
 80028d0:	2104      	movs	r1, #4
 80028d2:	430a      	orrs	r2, r1
 80028d4:	621a      	str	r2, [r3, #32]
 80028d6:	4bab      	ldr	r3, [pc, #684]	; (8002b84 <HAL_RCC_OscConfig+0x620>)
 80028d8:	6a1a      	ldr	r2, [r3, #32]
 80028da:	4baa      	ldr	r3, [pc, #680]	; (8002b84 <HAL_RCC_OscConfig+0x620>)
 80028dc:	2101      	movs	r1, #1
 80028de:	430a      	orrs	r2, r1
 80028e0:	621a      	str	r2, [r3, #32]
 80028e2:	e00b      	b.n	80028fc <HAL_RCC_OscConfig+0x398>
 80028e4:	4ba7      	ldr	r3, [pc, #668]	; (8002b84 <HAL_RCC_OscConfig+0x620>)
 80028e6:	6a1a      	ldr	r2, [r3, #32]
 80028e8:	4ba6      	ldr	r3, [pc, #664]	; (8002b84 <HAL_RCC_OscConfig+0x620>)
 80028ea:	2101      	movs	r1, #1
 80028ec:	438a      	bics	r2, r1
 80028ee:	621a      	str	r2, [r3, #32]
 80028f0:	4ba4      	ldr	r3, [pc, #656]	; (8002b84 <HAL_RCC_OscConfig+0x620>)
 80028f2:	6a1a      	ldr	r2, [r3, #32]
 80028f4:	4ba3      	ldr	r3, [pc, #652]	; (8002b84 <HAL_RCC_OscConfig+0x620>)
 80028f6:	2104      	movs	r1, #4
 80028f8:	438a      	bics	r2, r1
 80028fa:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d014      	beq.n	800292e <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002904:	f7fe fef2 	bl	80016ec <HAL_GetTick>
 8002908:	0003      	movs	r3, r0
 800290a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800290c:	e009      	b.n	8002922 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800290e:	f7fe feed 	bl	80016ec <HAL_GetTick>
 8002912:	0002      	movs	r2, r0
 8002914:	69bb      	ldr	r3, [r7, #24]
 8002916:	1ad3      	subs	r3, r2, r3
 8002918:	4a9b      	ldr	r2, [pc, #620]	; (8002b88 <HAL_RCC_OscConfig+0x624>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d901      	bls.n	8002922 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 800291e:	2303      	movs	r3, #3
 8002920:	e12b      	b.n	8002b7a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002922:	4b98      	ldr	r3, [pc, #608]	; (8002b84 <HAL_RCC_OscConfig+0x620>)
 8002924:	6a1b      	ldr	r3, [r3, #32]
 8002926:	2202      	movs	r2, #2
 8002928:	4013      	ands	r3, r2
 800292a:	d0f0      	beq.n	800290e <HAL_RCC_OscConfig+0x3aa>
 800292c:	e013      	b.n	8002956 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800292e:	f7fe fedd 	bl	80016ec <HAL_GetTick>
 8002932:	0003      	movs	r3, r0
 8002934:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002936:	e009      	b.n	800294c <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002938:	f7fe fed8 	bl	80016ec <HAL_GetTick>
 800293c:	0002      	movs	r2, r0
 800293e:	69bb      	ldr	r3, [r7, #24]
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	4a91      	ldr	r2, [pc, #580]	; (8002b88 <HAL_RCC_OscConfig+0x624>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d901      	bls.n	800294c <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8002948:	2303      	movs	r3, #3
 800294a:	e116      	b.n	8002b7a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800294c:	4b8d      	ldr	r3, [pc, #564]	; (8002b84 <HAL_RCC_OscConfig+0x620>)
 800294e:	6a1b      	ldr	r3, [r3, #32]
 8002950:	2202      	movs	r2, #2
 8002952:	4013      	ands	r3, r2
 8002954:	d1f0      	bne.n	8002938 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002956:	231f      	movs	r3, #31
 8002958:	18fb      	adds	r3, r7, r3
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	2b01      	cmp	r3, #1
 800295e:	d105      	bne.n	800296c <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002960:	4b88      	ldr	r3, [pc, #544]	; (8002b84 <HAL_RCC_OscConfig+0x620>)
 8002962:	69da      	ldr	r2, [r3, #28]
 8002964:	4b87      	ldr	r3, [pc, #540]	; (8002b84 <HAL_RCC_OscConfig+0x620>)
 8002966:	4989      	ldr	r1, [pc, #548]	; (8002b8c <HAL_RCC_OscConfig+0x628>)
 8002968:	400a      	ands	r2, r1
 800296a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	2210      	movs	r2, #16
 8002972:	4013      	ands	r3, r2
 8002974:	d063      	beq.n	8002a3e <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	695b      	ldr	r3, [r3, #20]
 800297a:	2b01      	cmp	r3, #1
 800297c:	d12a      	bne.n	80029d4 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800297e:	4b81      	ldr	r3, [pc, #516]	; (8002b84 <HAL_RCC_OscConfig+0x620>)
 8002980:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002982:	4b80      	ldr	r3, [pc, #512]	; (8002b84 <HAL_RCC_OscConfig+0x620>)
 8002984:	2104      	movs	r1, #4
 8002986:	430a      	orrs	r2, r1
 8002988:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800298a:	4b7e      	ldr	r3, [pc, #504]	; (8002b84 <HAL_RCC_OscConfig+0x620>)
 800298c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800298e:	4b7d      	ldr	r3, [pc, #500]	; (8002b84 <HAL_RCC_OscConfig+0x620>)
 8002990:	2101      	movs	r1, #1
 8002992:	430a      	orrs	r2, r1
 8002994:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002996:	f7fe fea9 	bl	80016ec <HAL_GetTick>
 800299a:	0003      	movs	r3, r0
 800299c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800299e:	e008      	b.n	80029b2 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80029a0:	f7fe fea4 	bl	80016ec <HAL_GetTick>
 80029a4:	0002      	movs	r2, r0
 80029a6:	69bb      	ldr	r3, [r7, #24]
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	2b02      	cmp	r3, #2
 80029ac:	d901      	bls.n	80029b2 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80029ae:	2303      	movs	r3, #3
 80029b0:	e0e3      	b.n	8002b7a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80029b2:	4b74      	ldr	r3, [pc, #464]	; (8002b84 <HAL_RCC_OscConfig+0x620>)
 80029b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029b6:	2202      	movs	r2, #2
 80029b8:	4013      	ands	r3, r2
 80029ba:	d0f1      	beq.n	80029a0 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80029bc:	4b71      	ldr	r3, [pc, #452]	; (8002b84 <HAL_RCC_OscConfig+0x620>)
 80029be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029c0:	22f8      	movs	r2, #248	; 0xf8
 80029c2:	4393      	bics	r3, r2
 80029c4:	0019      	movs	r1, r3
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	699b      	ldr	r3, [r3, #24]
 80029ca:	00da      	lsls	r2, r3, #3
 80029cc:	4b6d      	ldr	r3, [pc, #436]	; (8002b84 <HAL_RCC_OscConfig+0x620>)
 80029ce:	430a      	orrs	r2, r1
 80029d0:	635a      	str	r2, [r3, #52]	; 0x34
 80029d2:	e034      	b.n	8002a3e <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	695b      	ldr	r3, [r3, #20]
 80029d8:	3305      	adds	r3, #5
 80029da:	d111      	bne.n	8002a00 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80029dc:	4b69      	ldr	r3, [pc, #420]	; (8002b84 <HAL_RCC_OscConfig+0x620>)
 80029de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029e0:	4b68      	ldr	r3, [pc, #416]	; (8002b84 <HAL_RCC_OscConfig+0x620>)
 80029e2:	2104      	movs	r1, #4
 80029e4:	438a      	bics	r2, r1
 80029e6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80029e8:	4b66      	ldr	r3, [pc, #408]	; (8002b84 <HAL_RCC_OscConfig+0x620>)
 80029ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029ec:	22f8      	movs	r2, #248	; 0xf8
 80029ee:	4393      	bics	r3, r2
 80029f0:	0019      	movs	r1, r3
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	699b      	ldr	r3, [r3, #24]
 80029f6:	00da      	lsls	r2, r3, #3
 80029f8:	4b62      	ldr	r3, [pc, #392]	; (8002b84 <HAL_RCC_OscConfig+0x620>)
 80029fa:	430a      	orrs	r2, r1
 80029fc:	635a      	str	r2, [r3, #52]	; 0x34
 80029fe:	e01e      	b.n	8002a3e <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002a00:	4b60      	ldr	r3, [pc, #384]	; (8002b84 <HAL_RCC_OscConfig+0x620>)
 8002a02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a04:	4b5f      	ldr	r3, [pc, #380]	; (8002b84 <HAL_RCC_OscConfig+0x620>)
 8002a06:	2104      	movs	r1, #4
 8002a08:	430a      	orrs	r2, r1
 8002a0a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002a0c:	4b5d      	ldr	r3, [pc, #372]	; (8002b84 <HAL_RCC_OscConfig+0x620>)
 8002a0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a10:	4b5c      	ldr	r3, [pc, #368]	; (8002b84 <HAL_RCC_OscConfig+0x620>)
 8002a12:	2101      	movs	r1, #1
 8002a14:	438a      	bics	r2, r1
 8002a16:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a18:	f7fe fe68 	bl	80016ec <HAL_GetTick>
 8002a1c:	0003      	movs	r3, r0
 8002a1e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002a20:	e008      	b.n	8002a34 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002a22:	f7fe fe63 	bl	80016ec <HAL_GetTick>
 8002a26:	0002      	movs	r2, r0
 8002a28:	69bb      	ldr	r3, [r7, #24]
 8002a2a:	1ad3      	subs	r3, r2, r3
 8002a2c:	2b02      	cmp	r3, #2
 8002a2e:	d901      	bls.n	8002a34 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8002a30:	2303      	movs	r3, #3
 8002a32:	e0a2      	b.n	8002b7a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002a34:	4b53      	ldr	r3, [pc, #332]	; (8002b84 <HAL_RCC_OscConfig+0x620>)
 8002a36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a38:	2202      	movs	r2, #2
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	d1f1      	bne.n	8002a22 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6a1b      	ldr	r3, [r3, #32]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d100      	bne.n	8002a48 <HAL_RCC_OscConfig+0x4e4>
 8002a46:	e097      	b.n	8002b78 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a48:	4b4e      	ldr	r3, [pc, #312]	; (8002b84 <HAL_RCC_OscConfig+0x620>)
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	220c      	movs	r2, #12
 8002a4e:	4013      	ands	r3, r2
 8002a50:	2b08      	cmp	r3, #8
 8002a52:	d100      	bne.n	8002a56 <HAL_RCC_OscConfig+0x4f2>
 8002a54:	e06b      	b.n	8002b2e <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6a1b      	ldr	r3, [r3, #32]
 8002a5a:	2b02      	cmp	r3, #2
 8002a5c:	d14c      	bne.n	8002af8 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a5e:	4b49      	ldr	r3, [pc, #292]	; (8002b84 <HAL_RCC_OscConfig+0x620>)
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	4b48      	ldr	r3, [pc, #288]	; (8002b84 <HAL_RCC_OscConfig+0x620>)
 8002a64:	494a      	ldr	r1, [pc, #296]	; (8002b90 <HAL_RCC_OscConfig+0x62c>)
 8002a66:	400a      	ands	r2, r1
 8002a68:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a6a:	f7fe fe3f 	bl	80016ec <HAL_GetTick>
 8002a6e:	0003      	movs	r3, r0
 8002a70:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a72:	e008      	b.n	8002a86 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a74:	f7fe fe3a 	bl	80016ec <HAL_GetTick>
 8002a78:	0002      	movs	r2, r0
 8002a7a:	69bb      	ldr	r3, [r7, #24]
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	2b02      	cmp	r3, #2
 8002a80:	d901      	bls.n	8002a86 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8002a82:	2303      	movs	r3, #3
 8002a84:	e079      	b.n	8002b7a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a86:	4b3f      	ldr	r3, [pc, #252]	; (8002b84 <HAL_RCC_OscConfig+0x620>)
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	2380      	movs	r3, #128	; 0x80
 8002a8c:	049b      	lsls	r3, r3, #18
 8002a8e:	4013      	ands	r3, r2
 8002a90:	d1f0      	bne.n	8002a74 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a92:	4b3c      	ldr	r3, [pc, #240]	; (8002b84 <HAL_RCC_OscConfig+0x620>)
 8002a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a96:	220f      	movs	r2, #15
 8002a98:	4393      	bics	r3, r2
 8002a9a:	0019      	movs	r1, r3
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002aa0:	4b38      	ldr	r3, [pc, #224]	; (8002b84 <HAL_RCC_OscConfig+0x620>)
 8002aa2:	430a      	orrs	r2, r1
 8002aa4:	62da      	str	r2, [r3, #44]	; 0x2c
 8002aa6:	4b37      	ldr	r3, [pc, #220]	; (8002b84 <HAL_RCC_OscConfig+0x620>)
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	4a3a      	ldr	r2, [pc, #232]	; (8002b94 <HAL_RCC_OscConfig+0x630>)
 8002aac:	4013      	ands	r3, r2
 8002aae:	0019      	movs	r1, r3
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab8:	431a      	orrs	r2, r3
 8002aba:	4b32      	ldr	r3, [pc, #200]	; (8002b84 <HAL_RCC_OscConfig+0x620>)
 8002abc:	430a      	orrs	r2, r1
 8002abe:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ac0:	4b30      	ldr	r3, [pc, #192]	; (8002b84 <HAL_RCC_OscConfig+0x620>)
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	4b2f      	ldr	r3, [pc, #188]	; (8002b84 <HAL_RCC_OscConfig+0x620>)
 8002ac6:	2180      	movs	r1, #128	; 0x80
 8002ac8:	0449      	lsls	r1, r1, #17
 8002aca:	430a      	orrs	r2, r1
 8002acc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ace:	f7fe fe0d 	bl	80016ec <HAL_GetTick>
 8002ad2:	0003      	movs	r3, r0
 8002ad4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ad6:	e008      	b.n	8002aea <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ad8:	f7fe fe08 	bl	80016ec <HAL_GetTick>
 8002adc:	0002      	movs	r2, r0
 8002ade:	69bb      	ldr	r3, [r7, #24]
 8002ae0:	1ad3      	subs	r3, r2, r3
 8002ae2:	2b02      	cmp	r3, #2
 8002ae4:	d901      	bls.n	8002aea <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8002ae6:	2303      	movs	r3, #3
 8002ae8:	e047      	b.n	8002b7a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002aea:	4b26      	ldr	r3, [pc, #152]	; (8002b84 <HAL_RCC_OscConfig+0x620>)
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	2380      	movs	r3, #128	; 0x80
 8002af0:	049b      	lsls	r3, r3, #18
 8002af2:	4013      	ands	r3, r2
 8002af4:	d0f0      	beq.n	8002ad8 <HAL_RCC_OscConfig+0x574>
 8002af6:	e03f      	b.n	8002b78 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002af8:	4b22      	ldr	r3, [pc, #136]	; (8002b84 <HAL_RCC_OscConfig+0x620>)
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	4b21      	ldr	r3, [pc, #132]	; (8002b84 <HAL_RCC_OscConfig+0x620>)
 8002afe:	4924      	ldr	r1, [pc, #144]	; (8002b90 <HAL_RCC_OscConfig+0x62c>)
 8002b00:	400a      	ands	r2, r1
 8002b02:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b04:	f7fe fdf2 	bl	80016ec <HAL_GetTick>
 8002b08:	0003      	movs	r3, r0
 8002b0a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b0c:	e008      	b.n	8002b20 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b0e:	f7fe fded 	bl	80016ec <HAL_GetTick>
 8002b12:	0002      	movs	r2, r0
 8002b14:	69bb      	ldr	r3, [r7, #24]
 8002b16:	1ad3      	subs	r3, r2, r3
 8002b18:	2b02      	cmp	r3, #2
 8002b1a:	d901      	bls.n	8002b20 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8002b1c:	2303      	movs	r3, #3
 8002b1e:	e02c      	b.n	8002b7a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b20:	4b18      	ldr	r3, [pc, #96]	; (8002b84 <HAL_RCC_OscConfig+0x620>)
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	2380      	movs	r3, #128	; 0x80
 8002b26:	049b      	lsls	r3, r3, #18
 8002b28:	4013      	ands	r3, r2
 8002b2a:	d1f0      	bne.n	8002b0e <HAL_RCC_OscConfig+0x5aa>
 8002b2c:	e024      	b.n	8002b78 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6a1b      	ldr	r3, [r3, #32]
 8002b32:	2b01      	cmp	r3, #1
 8002b34:	d101      	bne.n	8002b3a <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e01f      	b.n	8002b7a <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002b3a:	4b12      	ldr	r3, [pc, #72]	; (8002b84 <HAL_RCC_OscConfig+0x620>)
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002b40:	4b10      	ldr	r3, [pc, #64]	; (8002b84 <HAL_RCC_OscConfig+0x620>)
 8002b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b44:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b46:	697a      	ldr	r2, [r7, #20]
 8002b48:	2380      	movs	r3, #128	; 0x80
 8002b4a:	025b      	lsls	r3, r3, #9
 8002b4c:	401a      	ands	r2, r3
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b52:	429a      	cmp	r2, r3
 8002b54:	d10e      	bne.n	8002b74 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	220f      	movs	r2, #15
 8002b5a:	401a      	ands	r2, r3
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d107      	bne.n	8002b74 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002b64:	697a      	ldr	r2, [r7, #20]
 8002b66:	23f0      	movs	r3, #240	; 0xf0
 8002b68:	039b      	lsls	r3, r3, #14
 8002b6a:	401a      	ands	r2, r3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d001      	beq.n	8002b78 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e000      	b.n	8002b7a <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8002b78:	2300      	movs	r3, #0
}
 8002b7a:	0018      	movs	r0, r3
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	b008      	add	sp, #32
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	46c0      	nop			; (mov r8, r8)
 8002b84:	40021000 	.word	0x40021000
 8002b88:	00001388 	.word	0x00001388
 8002b8c:	efffffff 	.word	0xefffffff
 8002b90:	feffffff 	.word	0xfeffffff
 8002b94:	ffc2ffff 	.word	0xffc2ffff

08002b98 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b084      	sub	sp, #16
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
 8002ba0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d101      	bne.n	8002bac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e0b3      	b.n	8002d14 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002bac:	4b5b      	ldr	r3, [pc, #364]	; (8002d1c <HAL_RCC_ClockConfig+0x184>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	683a      	ldr	r2, [r7, #0]
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	d911      	bls.n	8002bde <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bba:	4b58      	ldr	r3, [pc, #352]	; (8002d1c <HAL_RCC_ClockConfig+0x184>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	4393      	bics	r3, r2
 8002bc2:	0019      	movs	r1, r3
 8002bc4:	4b55      	ldr	r3, [pc, #340]	; (8002d1c <HAL_RCC_ClockConfig+0x184>)
 8002bc6:	683a      	ldr	r2, [r7, #0]
 8002bc8:	430a      	orrs	r2, r1
 8002bca:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bcc:	4b53      	ldr	r3, [pc, #332]	; (8002d1c <HAL_RCC_ClockConfig+0x184>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	683a      	ldr	r2, [r7, #0]
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d001      	beq.n	8002bde <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e09a      	b.n	8002d14 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	2202      	movs	r2, #2
 8002be4:	4013      	ands	r3, r2
 8002be6:	d015      	beq.n	8002c14 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	2204      	movs	r2, #4
 8002bee:	4013      	ands	r3, r2
 8002bf0:	d006      	beq.n	8002c00 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002bf2:	4b4b      	ldr	r3, [pc, #300]	; (8002d20 <HAL_RCC_ClockConfig+0x188>)
 8002bf4:	685a      	ldr	r2, [r3, #4]
 8002bf6:	4b4a      	ldr	r3, [pc, #296]	; (8002d20 <HAL_RCC_ClockConfig+0x188>)
 8002bf8:	21e0      	movs	r1, #224	; 0xe0
 8002bfa:	00c9      	lsls	r1, r1, #3
 8002bfc:	430a      	orrs	r2, r1
 8002bfe:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c00:	4b47      	ldr	r3, [pc, #284]	; (8002d20 <HAL_RCC_ClockConfig+0x188>)
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	22f0      	movs	r2, #240	; 0xf0
 8002c06:	4393      	bics	r3, r2
 8002c08:	0019      	movs	r1, r3
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	689a      	ldr	r2, [r3, #8]
 8002c0e:	4b44      	ldr	r3, [pc, #272]	; (8002d20 <HAL_RCC_ClockConfig+0x188>)
 8002c10:	430a      	orrs	r2, r1
 8002c12:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	2201      	movs	r2, #1
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	d040      	beq.n	8002ca0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	d107      	bne.n	8002c36 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c26:	4b3e      	ldr	r3, [pc, #248]	; (8002d20 <HAL_RCC_ClockConfig+0x188>)
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	2380      	movs	r3, #128	; 0x80
 8002c2c:	029b      	lsls	r3, r3, #10
 8002c2e:	4013      	ands	r3, r2
 8002c30:	d114      	bne.n	8002c5c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e06e      	b.n	8002d14 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	2b02      	cmp	r3, #2
 8002c3c:	d107      	bne.n	8002c4e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c3e:	4b38      	ldr	r3, [pc, #224]	; (8002d20 <HAL_RCC_ClockConfig+0x188>)
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	2380      	movs	r3, #128	; 0x80
 8002c44:	049b      	lsls	r3, r3, #18
 8002c46:	4013      	ands	r3, r2
 8002c48:	d108      	bne.n	8002c5c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e062      	b.n	8002d14 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c4e:	4b34      	ldr	r3, [pc, #208]	; (8002d20 <HAL_RCC_ClockConfig+0x188>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	2202      	movs	r2, #2
 8002c54:	4013      	ands	r3, r2
 8002c56:	d101      	bne.n	8002c5c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e05b      	b.n	8002d14 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c5c:	4b30      	ldr	r3, [pc, #192]	; (8002d20 <HAL_RCC_ClockConfig+0x188>)
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	2203      	movs	r2, #3
 8002c62:	4393      	bics	r3, r2
 8002c64:	0019      	movs	r1, r3
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	685a      	ldr	r2, [r3, #4]
 8002c6a:	4b2d      	ldr	r3, [pc, #180]	; (8002d20 <HAL_RCC_ClockConfig+0x188>)
 8002c6c:	430a      	orrs	r2, r1
 8002c6e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c70:	f7fe fd3c 	bl	80016ec <HAL_GetTick>
 8002c74:	0003      	movs	r3, r0
 8002c76:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c78:	e009      	b.n	8002c8e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c7a:	f7fe fd37 	bl	80016ec <HAL_GetTick>
 8002c7e:	0002      	movs	r2, r0
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	1ad3      	subs	r3, r2, r3
 8002c84:	4a27      	ldr	r2, [pc, #156]	; (8002d24 <HAL_RCC_ClockConfig+0x18c>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d901      	bls.n	8002c8e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	e042      	b.n	8002d14 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c8e:	4b24      	ldr	r3, [pc, #144]	; (8002d20 <HAL_RCC_ClockConfig+0x188>)
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	220c      	movs	r2, #12
 8002c94:	401a      	ands	r2, r3
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d1ec      	bne.n	8002c7a <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ca0:	4b1e      	ldr	r3, [pc, #120]	; (8002d1c <HAL_RCC_ClockConfig+0x184>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	683a      	ldr	r2, [r7, #0]
 8002caa:	429a      	cmp	r2, r3
 8002cac:	d211      	bcs.n	8002cd2 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cae:	4b1b      	ldr	r3, [pc, #108]	; (8002d1c <HAL_RCC_ClockConfig+0x184>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	4393      	bics	r3, r2
 8002cb6:	0019      	movs	r1, r3
 8002cb8:	4b18      	ldr	r3, [pc, #96]	; (8002d1c <HAL_RCC_ClockConfig+0x184>)
 8002cba:	683a      	ldr	r2, [r7, #0]
 8002cbc:	430a      	orrs	r2, r1
 8002cbe:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cc0:	4b16      	ldr	r3, [pc, #88]	; (8002d1c <HAL_RCC_ClockConfig+0x184>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	683a      	ldr	r2, [r7, #0]
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	d001      	beq.n	8002cd2 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e020      	b.n	8002d14 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	2204      	movs	r2, #4
 8002cd8:	4013      	ands	r3, r2
 8002cda:	d009      	beq.n	8002cf0 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002cdc:	4b10      	ldr	r3, [pc, #64]	; (8002d20 <HAL_RCC_ClockConfig+0x188>)
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	4a11      	ldr	r2, [pc, #68]	; (8002d28 <HAL_RCC_ClockConfig+0x190>)
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	0019      	movs	r1, r3
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	68da      	ldr	r2, [r3, #12]
 8002cea:	4b0d      	ldr	r3, [pc, #52]	; (8002d20 <HAL_RCC_ClockConfig+0x188>)
 8002cec:	430a      	orrs	r2, r1
 8002cee:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002cf0:	f000 f820 	bl	8002d34 <HAL_RCC_GetSysClockFreq>
 8002cf4:	0001      	movs	r1, r0
 8002cf6:	4b0a      	ldr	r3, [pc, #40]	; (8002d20 <HAL_RCC_ClockConfig+0x188>)
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	091b      	lsrs	r3, r3, #4
 8002cfc:	220f      	movs	r2, #15
 8002cfe:	4013      	ands	r3, r2
 8002d00:	4a0a      	ldr	r2, [pc, #40]	; (8002d2c <HAL_RCC_ClockConfig+0x194>)
 8002d02:	5cd3      	ldrb	r3, [r2, r3]
 8002d04:	000a      	movs	r2, r1
 8002d06:	40da      	lsrs	r2, r3
 8002d08:	4b09      	ldr	r3, [pc, #36]	; (8002d30 <HAL_RCC_ClockConfig+0x198>)
 8002d0a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002d0c:	2003      	movs	r0, #3
 8002d0e:	f7fe fca7 	bl	8001660 <HAL_InitTick>
  
  return HAL_OK;
 8002d12:	2300      	movs	r3, #0
}
 8002d14:	0018      	movs	r0, r3
 8002d16:	46bd      	mov	sp, r7
 8002d18:	b004      	add	sp, #16
 8002d1a:	bd80      	pop	{r7, pc}
 8002d1c:	40022000 	.word	0x40022000
 8002d20:	40021000 	.word	0x40021000
 8002d24:	00001388 	.word	0x00001388
 8002d28:	fffff8ff 	.word	0xfffff8ff
 8002d2c:	08003f6c 	.word	0x08003f6c
 8002d30:	2000001c 	.word	0x2000001c

08002d34 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d34:	b590      	push	{r4, r7, lr}
 8002d36:	b08f      	sub	sp, #60	; 0x3c
 8002d38:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002d3a:	2314      	movs	r3, #20
 8002d3c:	18fb      	adds	r3, r7, r3
 8002d3e:	4a2b      	ldr	r2, [pc, #172]	; (8002dec <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d40:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002d42:	c313      	stmia	r3!, {r0, r1, r4}
 8002d44:	6812      	ldr	r2, [r2, #0]
 8002d46:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002d48:	1d3b      	adds	r3, r7, #4
 8002d4a:	4a29      	ldr	r2, [pc, #164]	; (8002df0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002d4c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002d4e:	c313      	stmia	r3!, {r0, r1, r4}
 8002d50:	6812      	ldr	r2, [r2, #0]
 8002d52:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002d54:	2300      	movs	r3, #0
 8002d56:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d58:	2300      	movs	r3, #0
 8002d5a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	637b      	str	r3, [r7, #52]	; 0x34
 8002d60:	2300      	movs	r3, #0
 8002d62:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002d64:	2300      	movs	r3, #0
 8002d66:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002d68:	4b22      	ldr	r3, [pc, #136]	; (8002df4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d70:	220c      	movs	r2, #12
 8002d72:	4013      	ands	r3, r2
 8002d74:	2b04      	cmp	r3, #4
 8002d76:	d002      	beq.n	8002d7e <HAL_RCC_GetSysClockFreq+0x4a>
 8002d78:	2b08      	cmp	r3, #8
 8002d7a:	d003      	beq.n	8002d84 <HAL_RCC_GetSysClockFreq+0x50>
 8002d7c:	e02d      	b.n	8002dda <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002d7e:	4b1e      	ldr	r3, [pc, #120]	; (8002df8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002d80:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002d82:	e02d      	b.n	8002de0 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d86:	0c9b      	lsrs	r3, r3, #18
 8002d88:	220f      	movs	r2, #15
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	2214      	movs	r2, #20
 8002d8e:	18ba      	adds	r2, r7, r2
 8002d90:	5cd3      	ldrb	r3, [r2, r3]
 8002d92:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002d94:	4b17      	ldr	r3, [pc, #92]	; (8002df4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d98:	220f      	movs	r2, #15
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	1d3a      	adds	r2, r7, #4
 8002d9e:	5cd3      	ldrb	r3, [r2, r3]
 8002da0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002da2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002da4:	2380      	movs	r3, #128	; 0x80
 8002da6:	025b      	lsls	r3, r3, #9
 8002da8:	4013      	ands	r3, r2
 8002daa:	d009      	beq.n	8002dc0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002dac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002dae:	4812      	ldr	r0, [pc, #72]	; (8002df8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002db0:	f7fd f9aa 	bl	8000108 <__udivsi3>
 8002db4:	0003      	movs	r3, r0
 8002db6:	001a      	movs	r2, r3
 8002db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dba:	4353      	muls	r3, r2
 8002dbc:	637b      	str	r3, [r7, #52]	; 0x34
 8002dbe:	e009      	b.n	8002dd4 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002dc0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002dc2:	000a      	movs	r2, r1
 8002dc4:	0152      	lsls	r2, r2, #5
 8002dc6:	1a52      	subs	r2, r2, r1
 8002dc8:	0193      	lsls	r3, r2, #6
 8002dca:	1a9b      	subs	r3, r3, r2
 8002dcc:	00db      	lsls	r3, r3, #3
 8002dce:	185b      	adds	r3, r3, r1
 8002dd0:	021b      	lsls	r3, r3, #8
 8002dd2:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8002dd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dd6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002dd8:	e002      	b.n	8002de0 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002dda:	4b07      	ldr	r3, [pc, #28]	; (8002df8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002ddc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002dde:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002de2:	0018      	movs	r0, r3
 8002de4:	46bd      	mov	sp, r7
 8002de6:	b00f      	add	sp, #60	; 0x3c
 8002de8:	bd90      	pop	{r4, r7, pc}
 8002dea:	46c0      	nop			; (mov r8, r8)
 8002dec:	08003ccc 	.word	0x08003ccc
 8002df0:	08003cdc 	.word	0x08003cdc
 8002df4:	40021000 	.word	0x40021000
 8002df8:	007a1200 	.word	0x007a1200

08002dfc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b084      	sub	sp, #16
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d101      	bne.n	8002e0e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e0a8      	b.n	8002f60 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d109      	bne.n	8002e2a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	685a      	ldr	r2, [r3, #4]
 8002e1a:	2382      	movs	r3, #130	; 0x82
 8002e1c:	005b      	lsls	r3, r3, #1
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	d009      	beq.n	8002e36 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2200      	movs	r2, #0
 8002e26:	61da      	str	r2, [r3, #28]
 8002e28:	e005      	b.n	8002e36 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2200      	movs	r2, #0
 8002e34:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	225d      	movs	r2, #93	; 0x5d
 8002e40:	5c9b      	ldrb	r3, [r3, r2]
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d107      	bne.n	8002e58 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	225c      	movs	r2, #92	; 0x5c
 8002e4c:	2100      	movs	r1, #0
 8002e4e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	0018      	movs	r0, r3
 8002e54:	f7fe fb5c 	bl	8001510 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	225d      	movs	r2, #93	; 0x5d
 8002e5c:	2102      	movs	r1, #2
 8002e5e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	2140      	movs	r1, #64	; 0x40
 8002e6c:	438a      	bics	r2, r1
 8002e6e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	68da      	ldr	r2, [r3, #12]
 8002e74:	23e0      	movs	r3, #224	; 0xe0
 8002e76:	00db      	lsls	r3, r3, #3
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d902      	bls.n	8002e82 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	60fb      	str	r3, [r7, #12]
 8002e80:	e002      	b.n	8002e88 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002e82:	2380      	movs	r3, #128	; 0x80
 8002e84:	015b      	lsls	r3, r3, #5
 8002e86:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	68da      	ldr	r2, [r3, #12]
 8002e8c:	23f0      	movs	r3, #240	; 0xf0
 8002e8e:	011b      	lsls	r3, r3, #4
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d008      	beq.n	8002ea6 <HAL_SPI_Init+0xaa>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	68da      	ldr	r2, [r3, #12]
 8002e98:	23e0      	movs	r3, #224	; 0xe0
 8002e9a:	00db      	lsls	r3, r3, #3
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d002      	beq.n	8002ea6 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	685a      	ldr	r2, [r3, #4]
 8002eaa:	2382      	movs	r3, #130	; 0x82
 8002eac:	005b      	lsls	r3, r3, #1
 8002eae:	401a      	ands	r2, r3
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6899      	ldr	r1, [r3, #8]
 8002eb4:	2384      	movs	r3, #132	; 0x84
 8002eb6:	021b      	lsls	r3, r3, #8
 8002eb8:	400b      	ands	r3, r1
 8002eba:	431a      	orrs	r2, r3
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	691b      	ldr	r3, [r3, #16]
 8002ec0:	2102      	movs	r1, #2
 8002ec2:	400b      	ands	r3, r1
 8002ec4:	431a      	orrs	r2, r3
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	695b      	ldr	r3, [r3, #20]
 8002eca:	2101      	movs	r1, #1
 8002ecc:	400b      	ands	r3, r1
 8002ece:	431a      	orrs	r2, r3
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6999      	ldr	r1, [r3, #24]
 8002ed4:	2380      	movs	r3, #128	; 0x80
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	400b      	ands	r3, r1
 8002eda:	431a      	orrs	r2, r3
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	69db      	ldr	r3, [r3, #28]
 8002ee0:	2138      	movs	r1, #56	; 0x38
 8002ee2:	400b      	ands	r3, r1
 8002ee4:	431a      	orrs	r2, r3
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6a1b      	ldr	r3, [r3, #32]
 8002eea:	2180      	movs	r1, #128	; 0x80
 8002eec:	400b      	ands	r3, r1
 8002eee:	431a      	orrs	r2, r3
 8002ef0:	0011      	movs	r1, r2
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ef6:	2380      	movs	r3, #128	; 0x80
 8002ef8:	019b      	lsls	r3, r3, #6
 8002efa:	401a      	ands	r2, r3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	430a      	orrs	r2, r1
 8002f02:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	699b      	ldr	r3, [r3, #24]
 8002f08:	0c1b      	lsrs	r3, r3, #16
 8002f0a:	2204      	movs	r2, #4
 8002f0c:	401a      	ands	r2, r3
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f12:	2110      	movs	r1, #16
 8002f14:	400b      	ands	r3, r1
 8002f16:	431a      	orrs	r2, r3
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f1c:	2108      	movs	r1, #8
 8002f1e:	400b      	ands	r3, r1
 8002f20:	431a      	orrs	r2, r3
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	68d9      	ldr	r1, [r3, #12]
 8002f26:	23f0      	movs	r3, #240	; 0xf0
 8002f28:	011b      	lsls	r3, r3, #4
 8002f2a:	400b      	ands	r3, r1
 8002f2c:	431a      	orrs	r2, r3
 8002f2e:	0011      	movs	r1, r2
 8002f30:	68fa      	ldr	r2, [r7, #12]
 8002f32:	2380      	movs	r3, #128	; 0x80
 8002f34:	015b      	lsls	r3, r3, #5
 8002f36:	401a      	ands	r2, r3
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	430a      	orrs	r2, r1
 8002f3e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	69da      	ldr	r2, [r3, #28]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4907      	ldr	r1, [pc, #28]	; (8002f68 <HAL_SPI_Init+0x16c>)
 8002f4c:	400a      	ands	r2, r1
 8002f4e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2200      	movs	r2, #0
 8002f54:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	225d      	movs	r2, #93	; 0x5d
 8002f5a:	2101      	movs	r1, #1
 8002f5c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f5e:	2300      	movs	r3, #0
}
 8002f60:	0018      	movs	r0, r3
 8002f62:	46bd      	mov	sp, r7
 8002f64:	b004      	add	sp, #16
 8002f66:	bd80      	pop	{r7, pc}
 8002f68:	fffff7ff 	.word	0xfffff7ff

08002f6c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b088      	sub	sp, #32
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	60f8      	str	r0, [r7, #12]
 8002f74:	60b9      	str	r1, [r7, #8]
 8002f76:	603b      	str	r3, [r7, #0]
 8002f78:	1dbb      	adds	r3, r7, #6
 8002f7a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002f7c:	231f      	movs	r3, #31
 8002f7e:	18fb      	adds	r3, r7, r3
 8002f80:	2200      	movs	r2, #0
 8002f82:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	225c      	movs	r2, #92	; 0x5c
 8002f88:	5c9b      	ldrb	r3, [r3, r2]
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d101      	bne.n	8002f92 <HAL_SPI_Transmit+0x26>
 8002f8e:	2302      	movs	r3, #2
 8002f90:	e140      	b.n	8003214 <HAL_SPI_Transmit+0x2a8>
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	225c      	movs	r2, #92	; 0x5c
 8002f96:	2101      	movs	r1, #1
 8002f98:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002f9a:	f7fe fba7 	bl	80016ec <HAL_GetTick>
 8002f9e:	0003      	movs	r3, r0
 8002fa0:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002fa2:	2316      	movs	r3, #22
 8002fa4:	18fb      	adds	r3, r7, r3
 8002fa6:	1dba      	adds	r2, r7, #6
 8002fa8:	8812      	ldrh	r2, [r2, #0]
 8002faa:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	225d      	movs	r2, #93	; 0x5d
 8002fb0:	5c9b      	ldrb	r3, [r3, r2]
 8002fb2:	b2db      	uxtb	r3, r3
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d004      	beq.n	8002fc2 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8002fb8:	231f      	movs	r3, #31
 8002fba:	18fb      	adds	r3, r7, r3
 8002fbc:	2202      	movs	r2, #2
 8002fbe:	701a      	strb	r2, [r3, #0]
    goto error;
 8002fc0:	e11d      	b.n	80031fe <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d003      	beq.n	8002fd0 <HAL_SPI_Transmit+0x64>
 8002fc8:	1dbb      	adds	r3, r7, #6
 8002fca:	881b      	ldrh	r3, [r3, #0]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d104      	bne.n	8002fda <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8002fd0:	231f      	movs	r3, #31
 8002fd2:	18fb      	adds	r3, r7, r3
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	701a      	strb	r2, [r3, #0]
    goto error;
 8002fd8:	e111      	b.n	80031fe <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	225d      	movs	r2, #93	; 0x5d
 8002fde:	2103      	movs	r1, #3
 8002fe0:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	68ba      	ldr	r2, [r7, #8]
 8002fec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	1dba      	adds	r2, r7, #6
 8002ff2:	8812      	ldrh	r2, [r2, #0]
 8002ff4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	1dba      	adds	r2, r7, #6
 8002ffa:	8812      	ldrh	r2, [r2, #0]
 8002ffc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2200      	movs	r2, #0
 8003002:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2244      	movs	r2, #68	; 0x44
 8003008:	2100      	movs	r1, #0
 800300a:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2246      	movs	r2, #70	; 0x46
 8003010:	2100      	movs	r1, #0
 8003012:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2200      	movs	r2, #0
 8003018:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2200      	movs	r2, #0
 800301e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	689a      	ldr	r2, [r3, #8]
 8003024:	2380      	movs	r3, #128	; 0x80
 8003026:	021b      	lsls	r3, r3, #8
 8003028:	429a      	cmp	r2, r3
 800302a:	d110      	bne.n	800304e <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	2140      	movs	r1, #64	; 0x40
 8003038:	438a      	bics	r2, r1
 800303a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	2180      	movs	r1, #128	; 0x80
 8003048:	01c9      	lsls	r1, r1, #7
 800304a:	430a      	orrs	r2, r1
 800304c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	2240      	movs	r2, #64	; 0x40
 8003056:	4013      	ands	r3, r2
 8003058:	2b40      	cmp	r3, #64	; 0x40
 800305a:	d007      	beq.n	800306c <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	2140      	movs	r1, #64	; 0x40
 8003068:	430a      	orrs	r2, r1
 800306a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	68da      	ldr	r2, [r3, #12]
 8003070:	23e0      	movs	r3, #224	; 0xe0
 8003072:	00db      	lsls	r3, r3, #3
 8003074:	429a      	cmp	r2, r3
 8003076:	d94e      	bls.n	8003116 <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d004      	beq.n	800308a <HAL_SPI_Transmit+0x11e>
 8003080:	2316      	movs	r3, #22
 8003082:	18fb      	adds	r3, r7, r3
 8003084:	881b      	ldrh	r3, [r3, #0]
 8003086:	2b01      	cmp	r3, #1
 8003088:	d13f      	bne.n	800310a <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800308e:	881a      	ldrh	r2, [r3, #0]
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800309a:	1c9a      	adds	r2, r3, #2
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030a4:	b29b      	uxth	r3, r3
 80030a6:	3b01      	subs	r3, #1
 80030a8:	b29a      	uxth	r2, r3
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80030ae:	e02c      	b.n	800310a <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	2202      	movs	r2, #2
 80030b8:	4013      	ands	r3, r2
 80030ba:	2b02      	cmp	r3, #2
 80030bc:	d112      	bne.n	80030e4 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030c2:	881a      	ldrh	r2, [r3, #0]
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030ce:	1c9a      	adds	r2, r3, #2
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030d8:	b29b      	uxth	r3, r3
 80030da:	3b01      	subs	r3, #1
 80030dc:	b29a      	uxth	r2, r3
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80030e2:	e012      	b.n	800310a <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80030e4:	f7fe fb02 	bl	80016ec <HAL_GetTick>
 80030e8:	0002      	movs	r2, r0
 80030ea:	69bb      	ldr	r3, [r7, #24]
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	683a      	ldr	r2, [r7, #0]
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d802      	bhi.n	80030fa <HAL_SPI_Transmit+0x18e>
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	3301      	adds	r3, #1
 80030f8:	d102      	bne.n	8003100 <HAL_SPI_Transmit+0x194>
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d104      	bne.n	800310a <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8003100:	231f      	movs	r3, #31
 8003102:	18fb      	adds	r3, r7, r3
 8003104:	2203      	movs	r2, #3
 8003106:	701a      	strb	r2, [r3, #0]
          goto error;
 8003108:	e079      	b.n	80031fe <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800310e:	b29b      	uxth	r3, r3
 8003110:	2b00      	cmp	r3, #0
 8003112:	d1cd      	bne.n	80030b0 <HAL_SPI_Transmit+0x144>
 8003114:	e04f      	b.n	80031b6 <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d004      	beq.n	8003128 <HAL_SPI_Transmit+0x1bc>
 800311e:	2316      	movs	r3, #22
 8003120:	18fb      	adds	r3, r7, r3
 8003122:	881b      	ldrh	r3, [r3, #0]
 8003124:	2b01      	cmp	r3, #1
 8003126:	d141      	bne.n	80031ac <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	330c      	adds	r3, #12
 8003132:	7812      	ldrb	r2, [r2, #0]
 8003134:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800313a:	1c5a      	adds	r2, r3, #1
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003144:	b29b      	uxth	r3, r3
 8003146:	3b01      	subs	r3, #1
 8003148:	b29a      	uxth	r2, r3
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 800314e:	e02d      	b.n	80031ac <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	2202      	movs	r2, #2
 8003158:	4013      	ands	r3, r2
 800315a:	2b02      	cmp	r3, #2
 800315c:	d113      	bne.n	8003186 <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	330c      	adds	r3, #12
 8003168:	7812      	ldrb	r2, [r2, #0]
 800316a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003170:	1c5a      	adds	r2, r3, #1
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800317a:	b29b      	uxth	r3, r3
 800317c:	3b01      	subs	r3, #1
 800317e:	b29a      	uxth	r2, r3
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003184:	e012      	b.n	80031ac <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003186:	f7fe fab1 	bl	80016ec <HAL_GetTick>
 800318a:	0002      	movs	r2, r0
 800318c:	69bb      	ldr	r3, [r7, #24]
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	683a      	ldr	r2, [r7, #0]
 8003192:	429a      	cmp	r2, r3
 8003194:	d802      	bhi.n	800319c <HAL_SPI_Transmit+0x230>
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	3301      	adds	r3, #1
 800319a:	d102      	bne.n	80031a2 <HAL_SPI_Transmit+0x236>
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d104      	bne.n	80031ac <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 80031a2:	231f      	movs	r3, #31
 80031a4:	18fb      	adds	r3, r7, r3
 80031a6:	2203      	movs	r2, #3
 80031a8:	701a      	strb	r2, [r3, #0]
          goto error;
 80031aa:	e028      	b.n	80031fe <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031b0:	b29b      	uxth	r3, r3
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d1cc      	bne.n	8003150 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80031b6:	69ba      	ldr	r2, [r7, #24]
 80031b8:	6839      	ldr	r1, [r7, #0]
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	0018      	movs	r0, r3
 80031be:	f000 fcd9 	bl	8003b74 <SPI_EndRxTxTransaction>
 80031c2:	1e03      	subs	r3, r0, #0
 80031c4:	d002      	beq.n	80031cc <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2220      	movs	r2, #32
 80031ca:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d10a      	bne.n	80031ea <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80031d4:	2300      	movs	r3, #0
 80031d6:	613b      	str	r3, [r7, #16]
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	68db      	ldr	r3, [r3, #12]
 80031de:	613b      	str	r3, [r7, #16]
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	613b      	str	r3, [r7, #16]
 80031e8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d004      	beq.n	80031fc <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 80031f2:	231f      	movs	r3, #31
 80031f4:	18fb      	adds	r3, r7, r3
 80031f6:	2201      	movs	r2, #1
 80031f8:	701a      	strb	r2, [r3, #0]
 80031fa:	e000      	b.n	80031fe <HAL_SPI_Transmit+0x292>
  }

error:
 80031fc:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	225d      	movs	r2, #93	; 0x5d
 8003202:	2101      	movs	r1, #1
 8003204:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	225c      	movs	r2, #92	; 0x5c
 800320a:	2100      	movs	r1, #0
 800320c:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800320e:	231f      	movs	r3, #31
 8003210:	18fb      	adds	r3, r7, r3
 8003212:	781b      	ldrb	r3, [r3, #0]
}
 8003214:	0018      	movs	r0, r3
 8003216:	46bd      	mov	sp, r7
 8003218:	b008      	add	sp, #32
 800321a:	bd80      	pop	{r7, pc}

0800321c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800321c:	b590      	push	{r4, r7, lr}
 800321e:	b089      	sub	sp, #36	; 0x24
 8003220:	af02      	add	r7, sp, #8
 8003222:	60f8      	str	r0, [r7, #12]
 8003224:	60b9      	str	r1, [r7, #8]
 8003226:	603b      	str	r3, [r7, #0]
 8003228:	1dbb      	adds	r3, r7, #6
 800322a:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800322c:	2317      	movs	r3, #23
 800322e:	18fb      	adds	r3, r7, r3
 8003230:	2200      	movs	r2, #0
 8003232:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	685a      	ldr	r2, [r3, #4]
 8003238:	2382      	movs	r3, #130	; 0x82
 800323a:	005b      	lsls	r3, r3, #1
 800323c:	429a      	cmp	r2, r3
 800323e:	d113      	bne.n	8003268 <HAL_SPI_Receive+0x4c>
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d10f      	bne.n	8003268 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	225d      	movs	r2, #93	; 0x5d
 800324c:	2104      	movs	r1, #4
 800324e:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003250:	1dbb      	adds	r3, r7, #6
 8003252:	881c      	ldrh	r4, [r3, #0]
 8003254:	68ba      	ldr	r2, [r7, #8]
 8003256:	68b9      	ldr	r1, [r7, #8]
 8003258:	68f8      	ldr	r0, [r7, #12]
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	9300      	str	r3, [sp, #0]
 800325e:	0023      	movs	r3, r4
 8003260:	f000 f928 	bl	80034b4 <HAL_SPI_TransmitReceive>
 8003264:	0003      	movs	r3, r0
 8003266:	e11c      	b.n	80034a2 <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	225c      	movs	r2, #92	; 0x5c
 800326c:	5c9b      	ldrb	r3, [r3, r2]
 800326e:	2b01      	cmp	r3, #1
 8003270:	d101      	bne.n	8003276 <HAL_SPI_Receive+0x5a>
 8003272:	2302      	movs	r3, #2
 8003274:	e115      	b.n	80034a2 <HAL_SPI_Receive+0x286>
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	225c      	movs	r2, #92	; 0x5c
 800327a:	2101      	movs	r1, #1
 800327c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800327e:	f7fe fa35 	bl	80016ec <HAL_GetTick>
 8003282:	0003      	movs	r3, r0
 8003284:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	225d      	movs	r2, #93	; 0x5d
 800328a:	5c9b      	ldrb	r3, [r3, r2]
 800328c:	b2db      	uxtb	r3, r3
 800328e:	2b01      	cmp	r3, #1
 8003290:	d004      	beq.n	800329c <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 8003292:	2317      	movs	r3, #23
 8003294:	18fb      	adds	r3, r7, r3
 8003296:	2202      	movs	r2, #2
 8003298:	701a      	strb	r2, [r3, #0]
    goto error;
 800329a:	e0f7      	b.n	800348c <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d003      	beq.n	80032aa <HAL_SPI_Receive+0x8e>
 80032a2:	1dbb      	adds	r3, r7, #6
 80032a4:	881b      	ldrh	r3, [r3, #0]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d104      	bne.n	80032b4 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 80032aa:	2317      	movs	r3, #23
 80032ac:	18fb      	adds	r3, r7, r3
 80032ae:	2201      	movs	r2, #1
 80032b0:	701a      	strb	r2, [r3, #0]
    goto error;
 80032b2:	e0eb      	b.n	800348c <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	225d      	movs	r2, #93	; 0x5d
 80032b8:	2104      	movs	r1, #4
 80032ba:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2200      	movs	r2, #0
 80032c0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	68ba      	ldr	r2, [r7, #8]
 80032c6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	1dba      	adds	r2, r7, #6
 80032cc:	2144      	movs	r1, #68	; 0x44
 80032ce:	8812      	ldrh	r2, [r2, #0]
 80032d0:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	1dba      	adds	r2, r7, #6
 80032d6:	2146      	movs	r1, #70	; 0x46
 80032d8:	8812      	ldrh	r2, [r2, #0]
 80032da:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2200      	movs	r2, #0
 80032e0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2200      	movs	r2, #0
 80032e6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2200      	movs	r2, #0
 80032ec:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2200      	movs	r2, #0
 80032f2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2200      	movs	r2, #0
 80032f8:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	68da      	ldr	r2, [r3, #12]
 80032fe:	23e0      	movs	r3, #224	; 0xe0
 8003300:	00db      	lsls	r3, r3, #3
 8003302:	429a      	cmp	r2, r3
 8003304:	d908      	bls.n	8003318 <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	685a      	ldr	r2, [r3, #4]
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4966      	ldr	r1, [pc, #408]	; (80034ac <HAL_SPI_Receive+0x290>)
 8003312:	400a      	ands	r2, r1
 8003314:	605a      	str	r2, [r3, #4]
 8003316:	e008      	b.n	800332a <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	685a      	ldr	r2, [r3, #4]
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	2180      	movs	r1, #128	; 0x80
 8003324:	0149      	lsls	r1, r1, #5
 8003326:	430a      	orrs	r2, r1
 8003328:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	689a      	ldr	r2, [r3, #8]
 800332e:	2380      	movs	r3, #128	; 0x80
 8003330:	021b      	lsls	r3, r3, #8
 8003332:	429a      	cmp	r2, r3
 8003334:	d10f      	bne.n	8003356 <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	2140      	movs	r1, #64	; 0x40
 8003342:	438a      	bics	r2, r1
 8003344:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4957      	ldr	r1, [pc, #348]	; (80034b0 <HAL_SPI_Receive+0x294>)
 8003352:	400a      	ands	r2, r1
 8003354:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	2240      	movs	r2, #64	; 0x40
 800335e:	4013      	ands	r3, r2
 8003360:	2b40      	cmp	r3, #64	; 0x40
 8003362:	d007      	beq.n	8003374 <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	2140      	movs	r1, #64	; 0x40
 8003370:	430a      	orrs	r2, r1
 8003372:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	68da      	ldr	r2, [r3, #12]
 8003378:	23e0      	movs	r3, #224	; 0xe0
 800337a:	00db      	lsls	r3, r3, #3
 800337c:	429a      	cmp	r2, r3
 800337e:	d900      	bls.n	8003382 <HAL_SPI_Receive+0x166>
 8003380:	e069      	b.n	8003456 <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003382:	e031      	b.n	80033e8 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	2201      	movs	r2, #1
 800338c:	4013      	ands	r3, r2
 800338e:	2b01      	cmp	r3, #1
 8003390:	d117      	bne.n	80033c2 <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	330c      	adds	r3, #12
 8003398:	001a      	movs	r2, r3
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339e:	7812      	ldrb	r2, [r2, #0]
 80033a0:	b2d2      	uxtb	r2, r2
 80033a2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a8:	1c5a      	adds	r2, r3, #1
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2246      	movs	r2, #70	; 0x46
 80033b2:	5a9b      	ldrh	r3, [r3, r2]
 80033b4:	b29b      	uxth	r3, r3
 80033b6:	3b01      	subs	r3, #1
 80033b8:	b299      	uxth	r1, r3
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	2246      	movs	r2, #70	; 0x46
 80033be:	5299      	strh	r1, [r3, r2]
 80033c0:	e012      	b.n	80033e8 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80033c2:	f7fe f993 	bl	80016ec <HAL_GetTick>
 80033c6:	0002      	movs	r2, r0
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	1ad3      	subs	r3, r2, r3
 80033cc:	683a      	ldr	r2, [r7, #0]
 80033ce:	429a      	cmp	r2, r3
 80033d0:	d802      	bhi.n	80033d8 <HAL_SPI_Receive+0x1bc>
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	3301      	adds	r3, #1
 80033d6:	d102      	bne.n	80033de <HAL_SPI_Receive+0x1c2>
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d104      	bne.n	80033e8 <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 80033de:	2317      	movs	r3, #23
 80033e0:	18fb      	adds	r3, r7, r3
 80033e2:	2203      	movs	r2, #3
 80033e4:	701a      	strb	r2, [r3, #0]
          goto error;
 80033e6:	e051      	b.n	800348c <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2246      	movs	r2, #70	; 0x46
 80033ec:	5a9b      	ldrh	r3, [r3, r2]
 80033ee:	b29b      	uxth	r3, r3
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d1c7      	bne.n	8003384 <HAL_SPI_Receive+0x168>
 80033f4:	e035      	b.n	8003462 <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	2201      	movs	r2, #1
 80033fe:	4013      	ands	r3, r2
 8003400:	2b01      	cmp	r3, #1
 8003402:	d115      	bne.n	8003430 <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	68da      	ldr	r2, [r3, #12]
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340e:	b292      	uxth	r2, r2
 8003410:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003416:	1c9a      	adds	r2, r3, #2
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2246      	movs	r2, #70	; 0x46
 8003420:	5a9b      	ldrh	r3, [r3, r2]
 8003422:	b29b      	uxth	r3, r3
 8003424:	3b01      	subs	r3, #1
 8003426:	b299      	uxth	r1, r3
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2246      	movs	r2, #70	; 0x46
 800342c:	5299      	strh	r1, [r3, r2]
 800342e:	e012      	b.n	8003456 <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003430:	f7fe f95c 	bl	80016ec <HAL_GetTick>
 8003434:	0002      	movs	r2, r0
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	683a      	ldr	r2, [r7, #0]
 800343c:	429a      	cmp	r2, r3
 800343e:	d802      	bhi.n	8003446 <HAL_SPI_Receive+0x22a>
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	3301      	adds	r3, #1
 8003444:	d102      	bne.n	800344c <HAL_SPI_Receive+0x230>
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d104      	bne.n	8003456 <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 800344c:	2317      	movs	r3, #23
 800344e:	18fb      	adds	r3, r7, r3
 8003450:	2203      	movs	r2, #3
 8003452:	701a      	strb	r2, [r3, #0]
          goto error;
 8003454:	e01a      	b.n	800348c <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2246      	movs	r2, #70	; 0x46
 800345a:	5a9b      	ldrh	r3, [r3, r2]
 800345c:	b29b      	uxth	r3, r3
 800345e:	2b00      	cmp	r3, #0
 8003460:	d1c9      	bne.n	80033f6 <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003462:	693a      	ldr	r2, [r7, #16]
 8003464:	6839      	ldr	r1, [r7, #0]
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	0018      	movs	r0, r3
 800346a:	f000 fb25 	bl	8003ab8 <SPI_EndRxTransaction>
 800346e:	1e03      	subs	r3, r0, #0
 8003470:	d002      	beq.n	8003478 <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2220      	movs	r2, #32
 8003476:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800347c:	2b00      	cmp	r3, #0
 800347e:	d004      	beq.n	800348a <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 8003480:	2317      	movs	r3, #23
 8003482:	18fb      	adds	r3, r7, r3
 8003484:	2201      	movs	r2, #1
 8003486:	701a      	strb	r2, [r3, #0]
 8003488:	e000      	b.n	800348c <HAL_SPI_Receive+0x270>
  }

error :
 800348a:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	225d      	movs	r2, #93	; 0x5d
 8003490:	2101      	movs	r1, #1
 8003492:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	225c      	movs	r2, #92	; 0x5c
 8003498:	2100      	movs	r1, #0
 800349a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800349c:	2317      	movs	r3, #23
 800349e:	18fb      	adds	r3, r7, r3
 80034a0:	781b      	ldrb	r3, [r3, #0]
}
 80034a2:	0018      	movs	r0, r3
 80034a4:	46bd      	mov	sp, r7
 80034a6:	b007      	add	sp, #28
 80034a8:	bd90      	pop	{r4, r7, pc}
 80034aa:	46c0      	nop			; (mov r8, r8)
 80034ac:	ffffefff 	.word	0xffffefff
 80034b0:	ffffbfff 	.word	0xffffbfff

080034b4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b08a      	sub	sp, #40	; 0x28
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	60f8      	str	r0, [r7, #12]
 80034bc:	60b9      	str	r1, [r7, #8]
 80034be:	607a      	str	r2, [r7, #4]
 80034c0:	001a      	movs	r2, r3
 80034c2:	1cbb      	adds	r3, r7, #2
 80034c4:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80034c6:	2301      	movs	r3, #1
 80034c8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80034ca:	2323      	movs	r3, #35	; 0x23
 80034cc:	18fb      	adds	r3, r7, r3
 80034ce:	2200      	movs	r2, #0
 80034d0:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	225c      	movs	r2, #92	; 0x5c
 80034d6:	5c9b      	ldrb	r3, [r3, r2]
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d101      	bne.n	80034e0 <HAL_SPI_TransmitReceive+0x2c>
 80034dc:	2302      	movs	r3, #2
 80034de:	e1b5      	b.n	800384c <HAL_SPI_TransmitReceive+0x398>
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	225c      	movs	r2, #92	; 0x5c
 80034e4:	2101      	movs	r1, #1
 80034e6:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80034e8:	f7fe f900 	bl	80016ec <HAL_GetTick>
 80034ec:	0003      	movs	r3, r0
 80034ee:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80034f0:	201b      	movs	r0, #27
 80034f2:	183b      	adds	r3, r7, r0
 80034f4:	68fa      	ldr	r2, [r7, #12]
 80034f6:	215d      	movs	r1, #93	; 0x5d
 80034f8:	5c52      	ldrb	r2, [r2, r1]
 80034fa:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003502:	2312      	movs	r3, #18
 8003504:	18fb      	adds	r3, r7, r3
 8003506:	1cba      	adds	r2, r7, #2
 8003508:	8812      	ldrh	r2, [r2, #0]
 800350a:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800350c:	183b      	adds	r3, r7, r0
 800350e:	781b      	ldrb	r3, [r3, #0]
 8003510:	2b01      	cmp	r3, #1
 8003512:	d011      	beq.n	8003538 <HAL_SPI_TransmitReceive+0x84>
 8003514:	697a      	ldr	r2, [r7, #20]
 8003516:	2382      	movs	r3, #130	; 0x82
 8003518:	005b      	lsls	r3, r3, #1
 800351a:	429a      	cmp	r2, r3
 800351c:	d107      	bne.n	800352e <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d103      	bne.n	800352e <HAL_SPI_TransmitReceive+0x7a>
 8003526:	183b      	adds	r3, r7, r0
 8003528:	781b      	ldrb	r3, [r3, #0]
 800352a:	2b04      	cmp	r3, #4
 800352c:	d004      	beq.n	8003538 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 800352e:	2323      	movs	r3, #35	; 0x23
 8003530:	18fb      	adds	r3, r7, r3
 8003532:	2202      	movs	r2, #2
 8003534:	701a      	strb	r2, [r3, #0]
    goto error;
 8003536:	e17e      	b.n	8003836 <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d006      	beq.n	800354c <HAL_SPI_TransmitReceive+0x98>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d003      	beq.n	800354c <HAL_SPI_TransmitReceive+0x98>
 8003544:	1cbb      	adds	r3, r7, #2
 8003546:	881b      	ldrh	r3, [r3, #0]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d104      	bne.n	8003556 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 800354c:	2323      	movs	r3, #35	; 0x23
 800354e:	18fb      	adds	r3, r7, r3
 8003550:	2201      	movs	r2, #1
 8003552:	701a      	strb	r2, [r3, #0]
    goto error;
 8003554:	e16f      	b.n	8003836 <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	225d      	movs	r2, #93	; 0x5d
 800355a:	5c9b      	ldrb	r3, [r3, r2]
 800355c:	b2db      	uxtb	r3, r3
 800355e:	2b04      	cmp	r3, #4
 8003560:	d003      	beq.n	800356a <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	225d      	movs	r2, #93	; 0x5d
 8003566:	2105      	movs	r1, #5
 8003568:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2200      	movs	r2, #0
 800356e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	687a      	ldr	r2, [r7, #4]
 8003574:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	1cba      	adds	r2, r7, #2
 800357a:	2146      	movs	r1, #70	; 0x46
 800357c:	8812      	ldrh	r2, [r2, #0]
 800357e:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	1cba      	adds	r2, r7, #2
 8003584:	2144      	movs	r1, #68	; 0x44
 8003586:	8812      	ldrh	r2, [r2, #0]
 8003588:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	68ba      	ldr	r2, [r7, #8]
 800358e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	1cba      	adds	r2, r7, #2
 8003594:	8812      	ldrh	r2, [r2, #0]
 8003596:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	1cba      	adds	r2, r7, #2
 800359c:	8812      	ldrh	r2, [r2, #0]
 800359e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2200      	movs	r2, #0
 80035a4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2200      	movs	r2, #0
 80035aa:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	68da      	ldr	r2, [r3, #12]
 80035b0:	23e0      	movs	r3, #224	; 0xe0
 80035b2:	00db      	lsls	r3, r3, #3
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d908      	bls.n	80035ca <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	685a      	ldr	r2, [r3, #4]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	49a4      	ldr	r1, [pc, #656]	; (8003854 <HAL_SPI_TransmitReceive+0x3a0>)
 80035c4:	400a      	ands	r2, r1
 80035c6:	605a      	str	r2, [r3, #4]
 80035c8:	e008      	b.n	80035dc <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	685a      	ldr	r2, [r3, #4]
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	2180      	movs	r1, #128	; 0x80
 80035d6:	0149      	lsls	r1, r1, #5
 80035d8:	430a      	orrs	r2, r1
 80035da:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	2240      	movs	r2, #64	; 0x40
 80035e4:	4013      	ands	r3, r2
 80035e6:	2b40      	cmp	r3, #64	; 0x40
 80035e8:	d007      	beq.n	80035fa <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	2140      	movs	r1, #64	; 0x40
 80035f6:	430a      	orrs	r2, r1
 80035f8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	68da      	ldr	r2, [r3, #12]
 80035fe:	23e0      	movs	r3, #224	; 0xe0
 8003600:	00db      	lsls	r3, r3, #3
 8003602:	429a      	cmp	r2, r3
 8003604:	d800      	bhi.n	8003608 <HAL_SPI_TransmitReceive+0x154>
 8003606:	e07f      	b.n	8003708 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d005      	beq.n	800361c <HAL_SPI_TransmitReceive+0x168>
 8003610:	2312      	movs	r3, #18
 8003612:	18fb      	adds	r3, r7, r3
 8003614:	881b      	ldrh	r3, [r3, #0]
 8003616:	2b01      	cmp	r3, #1
 8003618:	d000      	beq.n	800361c <HAL_SPI_TransmitReceive+0x168>
 800361a:	e069      	b.n	80036f0 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003620:	881a      	ldrh	r2, [r3, #0]
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800362c:	1c9a      	adds	r2, r3, #2
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003636:	b29b      	uxth	r3, r3
 8003638:	3b01      	subs	r3, #1
 800363a:	b29a      	uxth	r2, r3
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003640:	e056      	b.n	80036f0 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	2202      	movs	r2, #2
 800364a:	4013      	ands	r3, r2
 800364c:	2b02      	cmp	r3, #2
 800364e:	d11b      	bne.n	8003688 <HAL_SPI_TransmitReceive+0x1d4>
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003654:	b29b      	uxth	r3, r3
 8003656:	2b00      	cmp	r3, #0
 8003658:	d016      	beq.n	8003688 <HAL_SPI_TransmitReceive+0x1d4>
 800365a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800365c:	2b01      	cmp	r3, #1
 800365e:	d113      	bne.n	8003688 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003664:	881a      	ldrh	r2, [r3, #0]
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003670:	1c9a      	adds	r2, r3, #2
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800367a:	b29b      	uxth	r3, r3
 800367c:	3b01      	subs	r3, #1
 800367e:	b29a      	uxth	r2, r3
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003684:	2300      	movs	r3, #0
 8003686:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	2201      	movs	r2, #1
 8003690:	4013      	ands	r3, r2
 8003692:	2b01      	cmp	r3, #1
 8003694:	d11c      	bne.n	80036d0 <HAL_SPI_TransmitReceive+0x21c>
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2246      	movs	r2, #70	; 0x46
 800369a:	5a9b      	ldrh	r3, [r3, r2]
 800369c:	b29b      	uxth	r3, r3
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d016      	beq.n	80036d0 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	68da      	ldr	r2, [r3, #12]
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ac:	b292      	uxth	r2, r2
 80036ae:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b4:	1c9a      	adds	r2, r3, #2
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2246      	movs	r2, #70	; 0x46
 80036be:	5a9b      	ldrh	r3, [r3, r2]
 80036c0:	b29b      	uxth	r3, r3
 80036c2:	3b01      	subs	r3, #1
 80036c4:	b299      	uxth	r1, r3
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2246      	movs	r2, #70	; 0x46
 80036ca:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80036cc:	2301      	movs	r3, #1
 80036ce:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80036d0:	f7fe f80c 	bl	80016ec <HAL_GetTick>
 80036d4:	0002      	movs	r2, r0
 80036d6:	69fb      	ldr	r3, [r7, #28]
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036dc:	429a      	cmp	r2, r3
 80036de:	d807      	bhi.n	80036f0 <HAL_SPI_TransmitReceive+0x23c>
 80036e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036e2:	3301      	adds	r3, #1
 80036e4:	d004      	beq.n	80036f0 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 80036e6:	2323      	movs	r3, #35	; 0x23
 80036e8:	18fb      	adds	r3, r7, r3
 80036ea:	2203      	movs	r2, #3
 80036ec:	701a      	strb	r2, [r3, #0]
        goto error;
 80036ee:	e0a2      	b.n	8003836 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036f4:	b29b      	uxth	r3, r3
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d1a3      	bne.n	8003642 <HAL_SPI_TransmitReceive+0x18e>
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2246      	movs	r2, #70	; 0x46
 80036fe:	5a9b      	ldrh	r3, [r3, r2]
 8003700:	b29b      	uxth	r3, r3
 8003702:	2b00      	cmp	r3, #0
 8003704:	d19d      	bne.n	8003642 <HAL_SPI_TransmitReceive+0x18e>
 8003706:	e085      	b.n	8003814 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d005      	beq.n	800371c <HAL_SPI_TransmitReceive+0x268>
 8003710:	2312      	movs	r3, #18
 8003712:	18fb      	adds	r3, r7, r3
 8003714:	881b      	ldrh	r3, [r3, #0]
 8003716:	2b01      	cmp	r3, #1
 8003718:	d000      	beq.n	800371c <HAL_SPI_TransmitReceive+0x268>
 800371a:	e070      	b.n	80037fe <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	330c      	adds	r3, #12
 8003726:	7812      	ldrb	r2, [r2, #0]
 8003728:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800372e:	1c5a      	adds	r2, r3, #1
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003738:	b29b      	uxth	r3, r3
 800373a:	3b01      	subs	r3, #1
 800373c:	b29a      	uxth	r2, r3
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003742:	e05c      	b.n	80037fe <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	2202      	movs	r2, #2
 800374c:	4013      	ands	r3, r2
 800374e:	2b02      	cmp	r3, #2
 8003750:	d11c      	bne.n	800378c <HAL_SPI_TransmitReceive+0x2d8>
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003756:	b29b      	uxth	r3, r3
 8003758:	2b00      	cmp	r3, #0
 800375a:	d017      	beq.n	800378c <HAL_SPI_TransmitReceive+0x2d8>
 800375c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800375e:	2b01      	cmp	r3, #1
 8003760:	d114      	bne.n	800378c <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	330c      	adds	r3, #12
 800376c:	7812      	ldrb	r2, [r2, #0]
 800376e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003774:	1c5a      	adds	r2, r3, #1
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800377e:	b29b      	uxth	r3, r3
 8003780:	3b01      	subs	r3, #1
 8003782:	b29a      	uxth	r2, r3
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003788:	2300      	movs	r3, #0
 800378a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	2201      	movs	r2, #1
 8003794:	4013      	ands	r3, r2
 8003796:	2b01      	cmp	r3, #1
 8003798:	d11e      	bne.n	80037d8 <HAL_SPI_TransmitReceive+0x324>
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2246      	movs	r2, #70	; 0x46
 800379e:	5a9b      	ldrh	r3, [r3, r2]
 80037a0:	b29b      	uxth	r3, r3
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d018      	beq.n	80037d8 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	330c      	adds	r3, #12
 80037ac:	001a      	movs	r2, r3
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b2:	7812      	ldrb	r2, [r2, #0]
 80037b4:	b2d2      	uxtb	r2, r2
 80037b6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037bc:	1c5a      	adds	r2, r3, #1
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2246      	movs	r2, #70	; 0x46
 80037c6:	5a9b      	ldrh	r3, [r3, r2]
 80037c8:	b29b      	uxth	r3, r3
 80037ca:	3b01      	subs	r3, #1
 80037cc:	b299      	uxth	r1, r3
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2246      	movs	r2, #70	; 0x46
 80037d2:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80037d4:	2301      	movs	r3, #1
 80037d6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80037d8:	f7fd ff88 	bl	80016ec <HAL_GetTick>
 80037dc:	0002      	movs	r2, r0
 80037de:	69fb      	ldr	r3, [r7, #28]
 80037e0:	1ad3      	subs	r3, r2, r3
 80037e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d802      	bhi.n	80037ee <HAL_SPI_TransmitReceive+0x33a>
 80037e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ea:	3301      	adds	r3, #1
 80037ec:	d102      	bne.n	80037f4 <HAL_SPI_TransmitReceive+0x340>
 80037ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d104      	bne.n	80037fe <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 80037f4:	2323      	movs	r3, #35	; 0x23
 80037f6:	18fb      	adds	r3, r7, r3
 80037f8:	2203      	movs	r2, #3
 80037fa:	701a      	strb	r2, [r3, #0]
        goto error;
 80037fc:	e01b      	b.n	8003836 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003802:	b29b      	uxth	r3, r3
 8003804:	2b00      	cmp	r3, #0
 8003806:	d19d      	bne.n	8003744 <HAL_SPI_TransmitReceive+0x290>
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2246      	movs	r2, #70	; 0x46
 800380c:	5a9b      	ldrh	r3, [r3, r2]
 800380e:	b29b      	uxth	r3, r3
 8003810:	2b00      	cmp	r3, #0
 8003812:	d197      	bne.n	8003744 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003814:	69fa      	ldr	r2, [r7, #28]
 8003816:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	0018      	movs	r0, r3
 800381c:	f000 f9aa 	bl	8003b74 <SPI_EndRxTxTransaction>
 8003820:	1e03      	subs	r3, r0, #0
 8003822:	d007      	beq.n	8003834 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 8003824:	2323      	movs	r3, #35	; 0x23
 8003826:	18fb      	adds	r3, r7, r3
 8003828:	2201      	movs	r2, #1
 800382a:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2220      	movs	r2, #32
 8003830:	661a      	str	r2, [r3, #96]	; 0x60
 8003832:	e000      	b.n	8003836 <HAL_SPI_TransmitReceive+0x382>
  }

error :
 8003834:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	225d      	movs	r2, #93	; 0x5d
 800383a:	2101      	movs	r1, #1
 800383c:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	225c      	movs	r2, #92	; 0x5c
 8003842:	2100      	movs	r1, #0
 8003844:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003846:	2323      	movs	r3, #35	; 0x23
 8003848:	18fb      	adds	r3, r7, r3
 800384a:	781b      	ldrb	r3, [r3, #0]
}
 800384c:	0018      	movs	r0, r3
 800384e:	46bd      	mov	sp, r7
 8003850:	b00a      	add	sp, #40	; 0x28
 8003852:	bd80      	pop	{r7, pc}
 8003854:	ffffefff 	.word	0xffffefff

08003858 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b088      	sub	sp, #32
 800385c:	af00      	add	r7, sp, #0
 800385e:	60f8      	str	r0, [r7, #12]
 8003860:	60b9      	str	r1, [r7, #8]
 8003862:	603b      	str	r3, [r7, #0]
 8003864:	1dfb      	adds	r3, r7, #7
 8003866:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003868:	f7fd ff40 	bl	80016ec <HAL_GetTick>
 800386c:	0002      	movs	r2, r0
 800386e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003870:	1a9b      	subs	r3, r3, r2
 8003872:	683a      	ldr	r2, [r7, #0]
 8003874:	18d3      	adds	r3, r2, r3
 8003876:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003878:	f7fd ff38 	bl	80016ec <HAL_GetTick>
 800387c:	0003      	movs	r3, r0
 800387e:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003880:	4b3a      	ldr	r3, [pc, #232]	; (800396c <SPI_WaitFlagStateUntilTimeout+0x114>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	015b      	lsls	r3, r3, #5
 8003886:	0d1b      	lsrs	r3, r3, #20
 8003888:	69fa      	ldr	r2, [r7, #28]
 800388a:	4353      	muls	r3, r2
 800388c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800388e:	e058      	b.n	8003942 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	3301      	adds	r3, #1
 8003894:	d055      	beq.n	8003942 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003896:	f7fd ff29 	bl	80016ec <HAL_GetTick>
 800389a:	0002      	movs	r2, r0
 800389c:	69bb      	ldr	r3, [r7, #24]
 800389e:	1ad3      	subs	r3, r2, r3
 80038a0:	69fa      	ldr	r2, [r7, #28]
 80038a2:	429a      	cmp	r2, r3
 80038a4:	d902      	bls.n	80038ac <SPI_WaitFlagStateUntilTimeout+0x54>
 80038a6:	69fb      	ldr	r3, [r7, #28]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d142      	bne.n	8003932 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	685a      	ldr	r2, [r3, #4]
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	21e0      	movs	r1, #224	; 0xe0
 80038b8:	438a      	bics	r2, r1
 80038ba:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	685a      	ldr	r2, [r3, #4]
 80038c0:	2382      	movs	r3, #130	; 0x82
 80038c2:	005b      	lsls	r3, r3, #1
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d113      	bne.n	80038f0 <SPI_WaitFlagStateUntilTimeout+0x98>
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	689a      	ldr	r2, [r3, #8]
 80038cc:	2380      	movs	r3, #128	; 0x80
 80038ce:	021b      	lsls	r3, r3, #8
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d005      	beq.n	80038e0 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	689a      	ldr	r2, [r3, #8]
 80038d8:	2380      	movs	r3, #128	; 0x80
 80038da:	00db      	lsls	r3, r3, #3
 80038dc:	429a      	cmp	r2, r3
 80038de:	d107      	bne.n	80038f0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	2140      	movs	r1, #64	; 0x40
 80038ec:	438a      	bics	r2, r1
 80038ee:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80038f4:	2380      	movs	r3, #128	; 0x80
 80038f6:	019b      	lsls	r3, r3, #6
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d110      	bne.n	800391e <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	491a      	ldr	r1, [pc, #104]	; (8003970 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8003908:	400a      	ands	r2, r1
 800390a:	601a      	str	r2, [r3, #0]
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	2180      	movs	r1, #128	; 0x80
 8003918:	0189      	lsls	r1, r1, #6
 800391a:	430a      	orrs	r2, r1
 800391c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	225d      	movs	r2, #93	; 0x5d
 8003922:	2101      	movs	r1, #1
 8003924:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	225c      	movs	r2, #92	; 0x5c
 800392a:	2100      	movs	r1, #0
 800392c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800392e:	2303      	movs	r3, #3
 8003930:	e017      	b.n	8003962 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d101      	bne.n	800393c <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8003938:	2300      	movs	r3, #0
 800393a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	3b01      	subs	r3, #1
 8003940:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	68ba      	ldr	r2, [r7, #8]
 800394a:	4013      	ands	r3, r2
 800394c:	68ba      	ldr	r2, [r7, #8]
 800394e:	1ad3      	subs	r3, r2, r3
 8003950:	425a      	negs	r2, r3
 8003952:	4153      	adcs	r3, r2
 8003954:	b2db      	uxtb	r3, r3
 8003956:	001a      	movs	r2, r3
 8003958:	1dfb      	adds	r3, r7, #7
 800395a:	781b      	ldrb	r3, [r3, #0]
 800395c:	429a      	cmp	r2, r3
 800395e:	d197      	bne.n	8003890 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003960:	2300      	movs	r3, #0
}
 8003962:	0018      	movs	r0, r3
 8003964:	46bd      	mov	sp, r7
 8003966:	b008      	add	sp, #32
 8003968:	bd80      	pop	{r7, pc}
 800396a:	46c0      	nop			; (mov r8, r8)
 800396c:	2000001c 	.word	0x2000001c
 8003970:	ffffdfff 	.word	0xffffdfff

08003974 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b08a      	sub	sp, #40	; 0x28
 8003978:	af00      	add	r7, sp, #0
 800397a:	60f8      	str	r0, [r7, #12]
 800397c:	60b9      	str	r1, [r7, #8]
 800397e:	607a      	str	r2, [r7, #4]
 8003980:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003982:	2317      	movs	r3, #23
 8003984:	18fb      	adds	r3, r7, r3
 8003986:	2200      	movs	r2, #0
 8003988:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800398a:	f7fd feaf 	bl	80016ec <HAL_GetTick>
 800398e:	0002      	movs	r2, r0
 8003990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003992:	1a9b      	subs	r3, r3, r2
 8003994:	683a      	ldr	r2, [r7, #0]
 8003996:	18d3      	adds	r3, r2, r3
 8003998:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800399a:	f7fd fea7 	bl	80016ec <HAL_GetTick>
 800399e:	0003      	movs	r3, r0
 80039a0:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	330c      	adds	r3, #12
 80039a8:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80039aa:	4b41      	ldr	r3, [pc, #260]	; (8003ab0 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	0013      	movs	r3, r2
 80039b0:	009b      	lsls	r3, r3, #2
 80039b2:	189b      	adds	r3, r3, r2
 80039b4:	00da      	lsls	r2, r3, #3
 80039b6:	1ad3      	subs	r3, r2, r3
 80039b8:	0d1b      	lsrs	r3, r3, #20
 80039ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039bc:	4353      	muls	r3, r2
 80039be:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80039c0:	e068      	b.n	8003a94 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80039c2:	68ba      	ldr	r2, [r7, #8]
 80039c4:	23c0      	movs	r3, #192	; 0xc0
 80039c6:	00db      	lsls	r3, r3, #3
 80039c8:	429a      	cmp	r2, r3
 80039ca:	d10a      	bne.n	80039e2 <SPI_WaitFifoStateUntilTimeout+0x6e>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d107      	bne.n	80039e2 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80039d2:	69fb      	ldr	r3, [r7, #28]
 80039d4:	781b      	ldrb	r3, [r3, #0]
 80039d6:	b2da      	uxtb	r2, r3
 80039d8:	2117      	movs	r1, #23
 80039da:	187b      	adds	r3, r7, r1
 80039dc:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80039de:	187b      	adds	r3, r7, r1
 80039e0:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	3301      	adds	r3, #1
 80039e6:	d055      	beq.n	8003a94 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80039e8:	f7fd fe80 	bl	80016ec <HAL_GetTick>
 80039ec:	0002      	movs	r2, r0
 80039ee:	6a3b      	ldr	r3, [r7, #32]
 80039f0:	1ad3      	subs	r3, r2, r3
 80039f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d902      	bls.n	80039fe <SPI_WaitFifoStateUntilTimeout+0x8a>
 80039f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d142      	bne.n	8003a84 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	685a      	ldr	r2, [r3, #4]
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	21e0      	movs	r1, #224	; 0xe0
 8003a0a:	438a      	bics	r2, r1
 8003a0c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	685a      	ldr	r2, [r3, #4]
 8003a12:	2382      	movs	r3, #130	; 0x82
 8003a14:	005b      	lsls	r3, r3, #1
 8003a16:	429a      	cmp	r2, r3
 8003a18:	d113      	bne.n	8003a42 <SPI_WaitFifoStateUntilTimeout+0xce>
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	689a      	ldr	r2, [r3, #8]
 8003a1e:	2380      	movs	r3, #128	; 0x80
 8003a20:	021b      	lsls	r3, r3, #8
 8003a22:	429a      	cmp	r2, r3
 8003a24:	d005      	beq.n	8003a32 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	689a      	ldr	r2, [r3, #8]
 8003a2a:	2380      	movs	r3, #128	; 0x80
 8003a2c:	00db      	lsls	r3, r3, #3
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	d107      	bne.n	8003a42 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	2140      	movs	r1, #64	; 0x40
 8003a3e:	438a      	bics	r2, r1
 8003a40:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a46:	2380      	movs	r3, #128	; 0x80
 8003a48:	019b      	lsls	r3, r3, #6
 8003a4a:	429a      	cmp	r2, r3
 8003a4c:	d110      	bne.n	8003a70 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4916      	ldr	r1, [pc, #88]	; (8003ab4 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8003a5a:	400a      	ands	r2, r1
 8003a5c:	601a      	str	r2, [r3, #0]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	2180      	movs	r1, #128	; 0x80
 8003a6a:	0189      	lsls	r1, r1, #6
 8003a6c:	430a      	orrs	r2, r1
 8003a6e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	225d      	movs	r2, #93	; 0x5d
 8003a74:	2101      	movs	r1, #1
 8003a76:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	225c      	movs	r2, #92	; 0x5c
 8003a7c:	2100      	movs	r1, #0
 8003a7e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003a80:	2303      	movs	r3, #3
 8003a82:	e010      	b.n	8003aa6 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003a84:	69bb      	ldr	r3, [r7, #24]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d101      	bne.n	8003a8e <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8003a8e:	69bb      	ldr	r3, [r7, #24]
 8003a90:	3b01      	subs	r3, #1
 8003a92:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	68ba      	ldr	r2, [r7, #8]
 8003a9c:	4013      	ands	r3, r2
 8003a9e:	687a      	ldr	r2, [r7, #4]
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d18e      	bne.n	80039c2 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8003aa4:	2300      	movs	r3, #0
}
 8003aa6:	0018      	movs	r0, r3
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	b00a      	add	sp, #40	; 0x28
 8003aac:	bd80      	pop	{r7, pc}
 8003aae:	46c0      	nop			; (mov r8, r8)
 8003ab0:	2000001c 	.word	0x2000001c
 8003ab4:	ffffdfff 	.word	0xffffdfff

08003ab8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b086      	sub	sp, #24
 8003abc:	af02      	add	r7, sp, #8
 8003abe:	60f8      	str	r0, [r7, #12]
 8003ac0:	60b9      	str	r1, [r7, #8]
 8003ac2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	685a      	ldr	r2, [r3, #4]
 8003ac8:	2382      	movs	r3, #130	; 0x82
 8003aca:	005b      	lsls	r3, r3, #1
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d113      	bne.n	8003af8 <SPI_EndRxTransaction+0x40>
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	689a      	ldr	r2, [r3, #8]
 8003ad4:	2380      	movs	r3, #128	; 0x80
 8003ad6:	021b      	lsls	r3, r3, #8
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d005      	beq.n	8003ae8 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	689a      	ldr	r2, [r3, #8]
 8003ae0:	2380      	movs	r3, #128	; 0x80
 8003ae2:	00db      	lsls	r3, r3, #3
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d107      	bne.n	8003af8 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	2140      	movs	r1, #64	; 0x40
 8003af4:	438a      	bics	r2, r1
 8003af6:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003af8:	68ba      	ldr	r2, [r7, #8]
 8003afa:	68f8      	ldr	r0, [r7, #12]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	9300      	str	r3, [sp, #0]
 8003b00:	0013      	movs	r3, r2
 8003b02:	2200      	movs	r2, #0
 8003b04:	2180      	movs	r1, #128	; 0x80
 8003b06:	f7ff fea7 	bl	8003858 <SPI_WaitFlagStateUntilTimeout>
 8003b0a:	1e03      	subs	r3, r0, #0
 8003b0c:	d007      	beq.n	8003b1e <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b12:	2220      	movs	r2, #32
 8003b14:	431a      	orrs	r2, r3
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	e026      	b.n	8003b6c <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	685a      	ldr	r2, [r3, #4]
 8003b22:	2382      	movs	r3, #130	; 0x82
 8003b24:	005b      	lsls	r3, r3, #1
 8003b26:	429a      	cmp	r2, r3
 8003b28:	d11f      	bne.n	8003b6a <SPI_EndRxTransaction+0xb2>
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	689a      	ldr	r2, [r3, #8]
 8003b2e:	2380      	movs	r3, #128	; 0x80
 8003b30:	021b      	lsls	r3, r3, #8
 8003b32:	429a      	cmp	r2, r3
 8003b34:	d005      	beq.n	8003b42 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	689a      	ldr	r2, [r3, #8]
 8003b3a:	2380      	movs	r3, #128	; 0x80
 8003b3c:	00db      	lsls	r3, r3, #3
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d113      	bne.n	8003b6a <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003b42:	68ba      	ldr	r2, [r7, #8]
 8003b44:	23c0      	movs	r3, #192	; 0xc0
 8003b46:	00d9      	lsls	r1, r3, #3
 8003b48:	68f8      	ldr	r0, [r7, #12]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	9300      	str	r3, [sp, #0]
 8003b4e:	0013      	movs	r3, r2
 8003b50:	2200      	movs	r2, #0
 8003b52:	f7ff ff0f 	bl	8003974 <SPI_WaitFifoStateUntilTimeout>
 8003b56:	1e03      	subs	r3, r0, #0
 8003b58:	d007      	beq.n	8003b6a <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b5e:	2220      	movs	r2, #32
 8003b60:	431a      	orrs	r2, r3
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8003b66:	2303      	movs	r3, #3
 8003b68:	e000      	b.n	8003b6c <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8003b6a:	2300      	movs	r3, #0
}
 8003b6c:	0018      	movs	r0, r3
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	b004      	add	sp, #16
 8003b72:	bd80      	pop	{r7, pc}

08003b74 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b086      	sub	sp, #24
 8003b78:	af02      	add	r7, sp, #8
 8003b7a:	60f8      	str	r0, [r7, #12]
 8003b7c:	60b9      	str	r1, [r7, #8]
 8003b7e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003b80:	68ba      	ldr	r2, [r7, #8]
 8003b82:	23c0      	movs	r3, #192	; 0xc0
 8003b84:	0159      	lsls	r1, r3, #5
 8003b86:	68f8      	ldr	r0, [r7, #12]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	9300      	str	r3, [sp, #0]
 8003b8c:	0013      	movs	r3, r2
 8003b8e:	2200      	movs	r2, #0
 8003b90:	f7ff fef0 	bl	8003974 <SPI_WaitFifoStateUntilTimeout>
 8003b94:	1e03      	subs	r3, r0, #0
 8003b96:	d007      	beq.n	8003ba8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b9c:	2220      	movs	r2, #32
 8003b9e:	431a      	orrs	r2, r3
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003ba4:	2303      	movs	r3, #3
 8003ba6:	e027      	b.n	8003bf8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003ba8:	68ba      	ldr	r2, [r7, #8]
 8003baa:	68f8      	ldr	r0, [r7, #12]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	9300      	str	r3, [sp, #0]
 8003bb0:	0013      	movs	r3, r2
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	2180      	movs	r1, #128	; 0x80
 8003bb6:	f7ff fe4f 	bl	8003858 <SPI_WaitFlagStateUntilTimeout>
 8003bba:	1e03      	subs	r3, r0, #0
 8003bbc:	d007      	beq.n	8003bce <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bc2:	2220      	movs	r2, #32
 8003bc4:	431a      	orrs	r2, r3
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	e014      	b.n	8003bf8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003bce:	68ba      	ldr	r2, [r7, #8]
 8003bd0:	23c0      	movs	r3, #192	; 0xc0
 8003bd2:	00d9      	lsls	r1, r3, #3
 8003bd4:	68f8      	ldr	r0, [r7, #12]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	9300      	str	r3, [sp, #0]
 8003bda:	0013      	movs	r3, r2
 8003bdc:	2200      	movs	r2, #0
 8003bde:	f7ff fec9 	bl	8003974 <SPI_WaitFifoStateUntilTimeout>
 8003be2:	1e03      	subs	r3, r0, #0
 8003be4:	d007      	beq.n	8003bf6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bea:	2220      	movs	r2, #32
 8003bec:	431a      	orrs	r2, r3
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003bf2:	2303      	movs	r3, #3
 8003bf4:	e000      	b.n	8003bf8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003bf6:	2300      	movs	r3, #0
}
 8003bf8:	0018      	movs	r0, r3
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	b004      	add	sp, #16
 8003bfe:	bd80      	pop	{r7, pc}

08003c00 <__libc_init_array>:
 8003c00:	b570      	push	{r4, r5, r6, lr}
 8003c02:	2600      	movs	r6, #0
 8003c04:	4d0c      	ldr	r5, [pc, #48]	; (8003c38 <__libc_init_array+0x38>)
 8003c06:	4c0d      	ldr	r4, [pc, #52]	; (8003c3c <__libc_init_array+0x3c>)
 8003c08:	1b64      	subs	r4, r4, r5
 8003c0a:	10a4      	asrs	r4, r4, #2
 8003c0c:	42a6      	cmp	r6, r4
 8003c0e:	d109      	bne.n	8003c24 <__libc_init_array+0x24>
 8003c10:	2600      	movs	r6, #0
 8003c12:	f000 f821 	bl	8003c58 <_init>
 8003c16:	4d0a      	ldr	r5, [pc, #40]	; (8003c40 <__libc_init_array+0x40>)
 8003c18:	4c0a      	ldr	r4, [pc, #40]	; (8003c44 <__libc_init_array+0x44>)
 8003c1a:	1b64      	subs	r4, r4, r5
 8003c1c:	10a4      	asrs	r4, r4, #2
 8003c1e:	42a6      	cmp	r6, r4
 8003c20:	d105      	bne.n	8003c2e <__libc_init_array+0x2e>
 8003c22:	bd70      	pop	{r4, r5, r6, pc}
 8003c24:	00b3      	lsls	r3, r6, #2
 8003c26:	58eb      	ldr	r3, [r5, r3]
 8003c28:	4798      	blx	r3
 8003c2a:	3601      	adds	r6, #1
 8003c2c:	e7ee      	b.n	8003c0c <__libc_init_array+0xc>
 8003c2e:	00b3      	lsls	r3, r6, #2
 8003c30:	58eb      	ldr	r3, [r5, r3]
 8003c32:	4798      	blx	r3
 8003c34:	3601      	adds	r6, #1
 8003c36:	e7f2      	b.n	8003c1e <__libc_init_array+0x1e>
 8003c38:	08003f7c 	.word	0x08003f7c
 8003c3c:	08003f7c 	.word	0x08003f7c
 8003c40:	08003f7c 	.word	0x08003f7c
 8003c44:	08003f80 	.word	0x08003f80

08003c48 <memset>:
 8003c48:	0003      	movs	r3, r0
 8003c4a:	1882      	adds	r2, r0, r2
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d100      	bne.n	8003c52 <memset+0xa>
 8003c50:	4770      	bx	lr
 8003c52:	7019      	strb	r1, [r3, #0]
 8003c54:	3301      	adds	r3, #1
 8003c56:	e7f9      	b.n	8003c4c <memset+0x4>

08003c58 <_init>:
 8003c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c5a:	46c0      	nop			; (mov r8, r8)
 8003c5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c5e:	bc08      	pop	{r3}
 8003c60:	469e      	mov	lr, r3
 8003c62:	4770      	bx	lr

08003c64 <_fini>:
 8003c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c66:	46c0      	nop			; (mov r8, r8)
 8003c68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c6a:	bc08      	pop	{r3}
 8003c6c:	469e      	mov	lr, r3
 8003c6e:	4770      	bx	lr
